
RoombaVersion3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  0000222e  000022c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000222e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ae9  00800232  00800232  000022f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000410  00000000  00000000  00002324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000054e0  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000167e  00000000  00000000  00007c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b92  00000000  00000000  00009292  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  0000be24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001eef  00000000  00000000  0000c934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000026a1  00000000  00000000  0000e823  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  00010ec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	99 c0       	rjmp	.+306    	; 0x138 <__bad_interrupt>
       6:	00 00       	nop
       8:	97 c0       	rjmp	.+302    	; 0x138 <__bad_interrupt>
       a:	00 00       	nop
       c:	95 c0       	rjmp	.+298    	; 0x138 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c0       	rjmp	.+294    	; 0x138 <__bad_interrupt>
      12:	00 00       	nop
      14:	15 c7       	rjmp	.+3626   	; 0xe40 <__vector_5>
      16:	00 00       	nop
      18:	ac c3       	rjmp	.+1880   	; 0x772 <__vector_6>
      1a:	00 00       	nop
      1c:	8d c0       	rjmp	.+282    	; 0x138 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8b c0       	rjmp	.+278    	; 0x138 <__bad_interrupt>
      22:	00 00       	nop
      24:	89 c0       	rjmp	.+274    	; 0x138 <__bad_interrupt>
      26:	00 00       	nop
      28:	87 c0       	rjmp	.+270    	; 0x138 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	85 c0       	rjmp	.+266    	; 0x138 <__bad_interrupt>
      2e:	00 00       	nop
      30:	83 c0       	rjmp	.+262    	; 0x138 <__bad_interrupt>
      32:	00 00       	nop
      34:	81 c0       	rjmp	.+258    	; 0x138 <__bad_interrupt>
      36:	00 00       	nop
      38:	7f c0       	rjmp	.+254    	; 0x138 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7d c0       	rjmp	.+250    	; 0x138 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7b c0       	rjmp	.+246    	; 0x138 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_17>
      48:	77 c0       	rjmp	.+238    	; 0x138 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	75 c0       	rjmp	.+234    	; 0x138 <__bad_interrupt>
      4e:	00 00       	nop
      50:	73 c0       	rjmp	.+230    	; 0x138 <__bad_interrupt>
      52:	00 00       	nop
      54:	71 c0       	rjmp	.+226    	; 0x138 <__bad_interrupt>
      56:	00 00       	nop
      58:	6f c0       	rjmp	.+222    	; 0x138 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6d c0       	rjmp	.+218    	; 0x138 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6b c0       	rjmp	.+214    	; 0x138 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__vector_25>
      68:	67 c0       	rjmp	.+206    	; 0x138 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	65 c0       	rjmp	.+202    	; 0x138 <__bad_interrupt>
      6e:	00 00       	nop
      70:	63 c0       	rjmp	.+198    	; 0x138 <__bad_interrupt>
      72:	00 00       	nop
      74:	61 c0       	rjmp	.+194    	; 0x138 <__bad_interrupt>
      76:	00 00       	nop
      78:	5f c0       	rjmp	.+190    	; 0x138 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5d c0       	rjmp	.+186    	; 0x138 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a9 c3       	rjmp	.+1874   	; 0x7d4 <__vector_32>
      82:	00 00       	nop
      84:	59 c0       	rjmp	.+178    	; 0x138 <__bad_interrupt>
      86:	00 00       	nop
      88:	57 c0       	rjmp	.+174    	; 0x138 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	55 c0       	rjmp	.+170    	; 0x138 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__vector_36>
      94:	51 c0       	rjmp	.+162    	; 0x138 <__bad_interrupt>
      96:	00 00       	nop
      98:	4f c0       	rjmp	.+158    	; 0x138 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4d c0       	rjmp	.+154    	; 0x138 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4b c0       	rjmp	.+150    	; 0x138 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	49 c0       	rjmp	.+146    	; 0x138 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	47 c0       	rjmp	.+142    	; 0x138 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	45 c0       	rjmp	.+138    	; 0x138 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	43 c0       	rjmp	.+134    	; 0x138 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	41 c0       	rjmp	.+130    	; 0x138 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3f c0       	rjmp	.+126    	; 0x138 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3d c0       	rjmp	.+122    	; 0x138 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3b c0       	rjmp	.+118    	; 0x138 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	39 c0       	rjmp	.+114    	; 0x138 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	37 c0       	rjmp	.+110    	; 0x138 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	35 c0       	rjmp	.+106    	; 0x138 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	33 c0       	rjmp	.+102    	; 0x138 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	31 c0       	rjmp	.+98     	; 0x138 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2f c0       	rjmp	.+94     	; 0x138 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2d c0       	rjmp	.+90     	; 0x138 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2b c0       	rjmp	.+86     	; 0x138 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1d 10       	cpse	r1, r13
      e6:	92 0e       	add	r9, r18
      e8:	ca 0e       	add	r12, r26
      ea:	1e 0f       	add	r17, r30
      ec:	44 0f       	add	r20, r20
      ee:	1d 10       	cpse	r1, r13
      f0:	6a 0f       	add	r22, r26
      f2:	80 0f       	add	r24, r16
      f4:	a9 0f       	add	r26, r25

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d1 e2       	ldi	r29, 0x21	; 33
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0c bf       	out	0x3c, r16	; 60

00000106 <__do_copy_data>:
     106:	12 e0       	ldi	r17, 0x02	; 2
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	ee e2       	ldi	r30, 0x2E	; 46
     10e:	f2 e2       	ldi	r31, 0x22	; 34
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0b bf       	out	0x3b, r16	; 59
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x14>
     116:	07 90       	elpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a2 33       	cpi	r26, 0x32	; 50
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x10>

00000120 <__do_clear_bss>:
     120:	2d e0       	ldi	r18, 0x0D	; 13
     122:	a2 e3       	ldi	r26, 0x32	; 50
     124:	b2 e0       	ldi	r27, 0x02	; 2
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	ab 31       	cpi	r26, 0x1B	; 27
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <main>
     134:	0c 94 15 11 	jmp	0x222a	; 0x222a <_exit>

00000138 <__bad_interrupt>:
     138:	63 cf       	rjmp	.-314    	; 0x0 <__vectors>

0000013a <_Z16current_ir_statev>:
		send_back_packet();
	}
}

void current_ir_state()
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	1f 92       	push	r1
     140:	1f 92       	push	r1
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
	int16_t value;
	for(;;){
		Service_Subscribe(ir_receive_service,&value);
		roomba.last_ir_code = value;
     146:	09 e3       	ldi	r16, 0x39	; 57
     148:	12 e0       	ldi	r17, 0x02	; 2

void current_ir_state()
{
	int16_t value;
	for(;;){
		Service_Subscribe(ir_receive_service,&value);
     14a:	be 01       	movw	r22, r28
     14c:	6f 5f       	subi	r22, 0xFF	; 255
     14e:	7f 4f       	sbci	r23, 0xFF	; 255
     150:	80 91 68 02 	lds	r24, 0x0268
     154:	90 91 69 02 	lds	r25, 0x0269
     158:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Service_Subscribe>
		roomba.last_ir_code = value;
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	f8 01       	movw	r30, r16
     160:	80 83       	st	Z, r24
     162:	f3 cf       	rjmp	.-26     	; 0x14a <_Z16current_ir_statev+0x10>

00000164 <_Z17check_bump_sensorv>:
	for (;;)
	{
		if(sensor_detect() == 1) {
			autonomy_state = TURN_LEFT;
		} else if(sensor_detect() == 2) {
			autonomy_state = TURN_RIGHT;
     164:	d2 e0       	ldi	r29, 0x02	; 2

void check_bump_sensor() {
	for (;;)
	{
		if(sensor_detect() == 1) {
			autonomy_state = TURN_LEFT;
     166:	c1 e0       	ldi	r28, 0x01	; 1


void check_bump_sensor() {
	for (;;)
	{
		if(sensor_detect() == 1) {
     168:	3d d7       	rcall	.+3706   	; 0xfe4 <_Z13sensor_detectv>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	19 f4       	brne	.+6      	; 0x174 <_Z17check_bump_sensorv+0x10>
			autonomy_state = TURN_LEFT;
     16e:	c0 93 32 02 	sts	0x0232, r28
     172:	05 c0       	rjmp	.+10     	; 0x17e <_Z17check_bump_sensorv+0x1a>
		} else if(sensor_detect() == 2) {
     174:	37 d7       	rcall	.+3694   	; 0xfe4 <_Z13sensor_detectv>
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	11 f4       	brne	.+4      	; 0x17e <_Z17check_bump_sensorv+0x1a>
			autonomy_state = TURN_RIGHT;
     17a:	d0 93 32 02 	sts	0x0232, r29
		}
		Task_Next();
     17e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <Task_Next>
}




void check_bump_sensor() {
     182:	f2 cf       	rjmp	.-28     	; 0x168 <_Z17check_bump_sensorv+0x4>

00000184 <_Z12setup_roombav>:



void setup_roomba()
{
	Roomba_Init();
     184:	36 d7       	rcall	.+3692   	; 0xff2 <_Z11Roomba_Initv>
	Radio_Set_Tx_Addr(base_station_address);
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	8d d5       	rcall	.+2842   	; 0xca6 <_Z17Radio_Set_Tx_AddrPh>
	zombie_song = 0;
     18c:	10 92 34 02 	sts	0x0234, r1
	human_song = 0;
     190:	10 92 33 02 	sts	0x0233, r1
 	LED_DDR |= (1<<LED_RX_PIN);
     194:	24 9a       	sbi	0x04, 4	; 4
 	LED_DDR |= (1<<LED_TX_PIN);
     196:	25 9a       	sbi	0x04, 5	; 4
	LED_DDR |= (1<<LED_IR_PIN);
     198:	26 9a       	sbi	0x04, 6	; 4
 	LED_PORT &= ~(1<<LED_RX_PIN);
     19a:	2c 98       	cbi	0x05, 4	; 5
 	LED_PORT &= ~(1<<LED_TX_PIN);
     19c:	2d 98       	cbi	0x05, 5	; 5
	LED_PORT &= ~(1<<LED_IR_PIN);
     19e:	2e 98       	cbi	0x05, 6	; 5

	TEAM_DDR |= (1<<TEAM_HUMAN_PIN);
     1a0:	3d 9a       	sbi	0x07, 5	; 7
	TEAM_DDR |= (1<<TEAM_ZOMBIE_PIN);
     1a2:	3c 9a       	sbi	0x07, 4	; 7
	TEAM_DDR |= (1<<EFFECT_INDICATOR);
     1a4:	3b 9a       	sbi	0x07, 3	; 7
	TEAM_PORT &= ~(1<<TEAM_HUMAN_PIN);
     1a6:	45 98       	cbi	0x08, 5	; 8
	TEAM_PORT &= ~(1<<TEAM_ZOMBIE_PIN);
     1a8:	44 98       	cbi	0x08, 4	; 8
	TEAM_PORT &= ~(1<<EFFECT_INDICATOR);
     1aa:	43 98       	cbi	0x08, 3	; 8
     1ac:	08 95       	ret

000001ae <_Z15radio_rxhandlerh>:

AUTONOMY autonomy_state = USER;

// Just wake up the task that is waiting for a radio packet
void radio_rxhandler(uint8_t pipenumber) {
	LED_RX_STATE_INDICATOR();
     1ae:	95 b1       	in	r25, 0x05	; 5
     1b0:	80 e1       	ldi	r24, 0x10	; 16
     1b2:	89 27       	eor	r24, r25
     1b4:	85 b9       	out	0x05, r24	; 5
	Service_Publish(radio_receive_service,0);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	80 91 6a 02 	lds	r24, 0x026A
     1be:	90 91 6b 02 	lds	r25, 0x026B
     1c2:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <Service_Publish>
     1c6:	08 95       	ret

000001c8 <_Z12ir_rxhandlerv>:
}

void ir_rxhandler() {
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
	int16_t value = IR_getLast();
     1d6:	ab d3       	rcall	.+1878   	; 0x92e <_Z10IR_getLastv>
     1d8:	08 2f       	mov	r16, r24
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	c6 e0       	ldi	r28, 0x06	; 6
     1de:	d2 e0       	ldi	r29, 0x02	; 2
     1e0:	0f 2e       	mov	r0, r31
     1e2:	fa e0       	ldi	r31, 0x0A	; 10
     1e4:	ef 2e       	mov	r14, r31
     1e6:	f2 e0       	ldi	r31, 0x02	; 2
     1e8:	ff 2e       	mov	r15, r31
     1ea:	f0 2d       	mov	r31, r0
	for(int i = 0; i < 4; ++i) {
		if(value == PLAYER_IDS[i]) {
			if(value != PLAYER_IDS[roomba_num]) {
				IR_STATE_INDICATOR();
     1ec:	68 94       	set
     1ee:	dd 24       	eor	r13, r13
     1f0:	d6 f8       	bld	r13, 6
}

void ir_rxhandler() {
	int16_t value = IR_getLast();
	for(int i = 0; i < 4; ++i) {
		if(value == PLAYER_IDS[i]) {
     1f2:	29 91       	ld	r18, Y+
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	20 17       	cp	r18, r16
     1f8:	31 07       	cpc	r19, r17
     1fa:	a1 f4       	brne	.+40     	; 0x224 <_Z12ir_rxhandlerv+0x5c>
			if(value != PLAYER_IDS[roomba_num]) {
     1fc:	e0 91 00 02 	lds	r30, 0x0200
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	ea 5f       	subi	r30, 0xFA	; 250
     204:	fd 4f       	sbci	r31, 0xFD	; 253
     206:	80 81       	ld	r24, Z
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	80 17       	cp	r24, r16
     20c:	91 07       	cpc	r25, r17
     20e:	51 f0       	breq	.+20     	; 0x224 <_Z12ir_rxhandlerv+0x5c>
				IR_STATE_INDICATOR();
     210:	85 b1       	in	r24, 0x05	; 5
     212:	8d 25       	eor	r24, r13
     214:	85 b9       	out	0x05, r24	; 5
				Service_Publish(ir_receive_service, value);
     216:	b8 01       	movw	r22, r16
     218:	80 91 68 02 	lds	r24, 0x0268
     21c:	90 91 69 02 	lds	r25, 0x0269
     220:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Service_Publish>
	Service_Publish(radio_receive_service,0);
}

void ir_rxhandler() {
	int16_t value = IR_getLast();
	for(int i = 0; i < 4; ++i) {
     224:	ce 15       	cp	r28, r14
     226:	df 05       	cpc	r29, r15
     228:	21 f7       	brne	.-56     	; 0x1f2 <_Z12ir_rxhandlerv+0x2a>
				IR_STATE_INDICATOR();
				Service_Publish(ir_receive_service, value);
			}
		}
	}
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	df 90       	pop	r13
     238:	08 95       	ret

0000023a <_Z17handleRoombaInputP7_game_t>:

void handleRoombaInput(pf_game_t* game)
{
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ec 01       	movw	r28, r24
	int16_t x_value = (((game->velocity_x*5)/256) - 2)*40;
     244:	0d 81       	ldd	r16, Y+5	; 0x05
	int16_t y_value = (((game->velocity_y*5)/256) - 2)*250;
     246:	1e 81       	ldd	r17, Y+6	; 0x06

	// reset into safe mode.
	Roomba_Send_Byte(SAFE);
     248:	83 e8       	ldi	r24, 0x83	; 131
     24a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_Z16Roomba_Send_Byteh>
	if(game->game_team == ZOMBIE && game->game_state == (uint8_t)STUNNED) {
     24e:	9b 85       	ldd	r25, Y+11	; 0x0b
     250:	91 11       	cpse	r25, r1
     252:	09 c0       	rjmp	.+18     	; 0x266 <_Z17handleRoombaInputP7_game_t+0x2c>
     254:	8c 85       	ldd	r24, Y+12	; 0x0c
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	31 f4       	brne	.+12     	; 0x266 <_Z17handleRoombaInputP7_game_t+0x2c>
		Roomba_Drive(15,0x8000);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e8       	ldi	r23, 0x80	; 128
     25e:	8f e0       	ldi	r24, 0x0F	; 15
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	e2 d7       	rcall	.+4036   	; 0x1228 <_Z12Roomba_Driveii>
     264:	66 c0       	rjmp	.+204    	; 0x332 <_Z17handleRoombaInputP7_game_t+0xf8>
		
	} else if(autonomy_state == USER) {
     266:	90 91 32 02 	lds	r25, 0x0232
     26a:	91 11       	cpse	r25, r1
     26c:	51 c0       	rjmp	.+162    	; 0x310 <_Z17handleRoombaInputP7_game_t+0xd6>
	}
}

void handleRoombaInput(pf_game_t* game)
{
	int16_t x_value = (((game->velocity_x*5)/256) - 2)*40;
     26e:	20 2f       	mov	r18, r16
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a9 01       	movw	r20, r18
     274:	44 0f       	add	r20, r20
     276:	55 1f       	adc	r21, r21
     278:	44 0f       	add	r20, r20
     27a:	55 1f       	adc	r21, r21
     27c:	24 0f       	add	r18, r20
     27e:	35 1f       	adc	r19, r21
     280:	23 2f       	mov	r18, r19
     282:	33 0f       	add	r19, r19
     284:	33 0b       	sbc	r19, r19
     286:	22 50       	subi	r18, 0x02	; 2
     288:	31 09       	sbc	r19, r1
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	82 9f       	mul	r24, r18
     28e:	b0 01       	movw	r22, r0
     290:	83 9f       	mul	r24, r19
     292:	70 0d       	add	r23, r0
     294:	11 24       	eor	r1, r1
	int16_t y_value = (((game->velocity_y*5)/256) - 2)*250;
     296:	81 2f       	mov	r24, r17
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	9c 01       	movw	r18, r24
     29c:	22 0f       	add	r18, r18
     29e:	33 1f       	adc	r19, r19
     2a0:	22 0f       	add	r18, r18
     2a2:	33 1f       	adc	r19, r19
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
     2a8:	89 2f       	mov	r24, r25
     2aa:	99 0f       	add	r25, r25
     2ac:	99 0b       	sbc	r25, r25
     2ae:	02 97       	sbiw	r24, 0x02	; 2
     2b0:	4a ef       	ldi	r20, 0xFA	; 250
     2b2:	48 9f       	mul	r20, r24
     2b4:	90 01       	movw	r18, r0
     2b6:	49 9f       	mul	r20, r25
     2b8:	30 0d       	add	r19, r0
     2ba:	11 24       	eor	r1, r1
	Roomba_Send_Byte(SAFE);
	if(game->game_team == ZOMBIE && game->game_state == (uint8_t)STUNNED) {
		Roomba_Drive(15,0x8000);
		
	} else if(autonomy_state == USER) {
		autonomy_counter = 0;
     2bc:	10 92 35 02 	sts	0x0235, r1
		if( x_value == 0 && y_value == 0) {
     2c0:	61 15       	cp	r22, r1
     2c2:	71 05       	cpc	r23, r1
     2c4:	89 f4       	brne	.+34     	; 0x2e8 <_Z17handleRoombaInputP7_game_t+0xae>
     2c6:	21 15       	cp	r18, r1
     2c8:	31 05       	cpc	r19, r1
     2ca:	31 f4       	brne	.+12     	; 0x2d8 <_Z17handleRoombaInputP7_game_t+0x9e>
			Roomba_Drive(0,0x8000);
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e8       	ldi	r23, 0x80	; 128
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	a9 d7       	rcall	.+3922   	; 0x1228 <_Z12Roomba_Driveii>
     2d6:	2d c0       	rjmp	.+90     	; 0x332 <_Z17handleRoombaInputP7_game_t+0xf8>
		} else if( x_value == 0) {
			y_value = -y_value;
			Roomba_Drive(y_value,0x8000);
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	70 e8       	ldi	r23, 0x80	; 128
     2dc:	88 27       	eor	r24, r24
     2de:	99 27       	eor	r25, r25
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a1 d7       	rcall	.+3906   	; 0x1228 <_Z12Roomba_Driveii>
     2e6:	25 c0       	rjmp	.+74     	; 0x332 <_Z17handleRoombaInputP7_game_t+0xf8>
		} else if( y_value == 0) {
     2e8:	21 15       	cp	r18, r1
     2ea:	31 05       	cpc	r19, r1
     2ec:	59 f4       	brne	.+22     	; 0x304 <_Z17handleRoombaInputP7_game_t+0xca>
			// turn in place
			uint16_t deg = 1;
			if( x_value < 0 ){
     2ee:	77 23       	and	r23, r23
     2f0:	1c f0       	brlt	.+6      	; 0x2f8 <_Z17handleRoombaInputP7_game_t+0xbe>
		} else if( x_value == 0) {
			y_value = -y_value;
			Roomba_Drive(y_value,0x8000);
		} else if( y_value == 0) {
			// turn in place
			uint16_t deg = 1;
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <_Z17handleRoombaInputP7_game_t+0xc2>
			if( x_value < 0 ){
				deg = -1;
     2f8:	6f ef       	ldi	r22, 0xFF	; 255
     2fa:	7f ef       	ldi	r23, 0xFF	; 255
			}
			Roomba_Drive(250,deg);
     2fc:	8a ef       	ldi	r24, 0xFA	; 250
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	93 d7       	rcall	.+3878   	; 0x1228 <_Z12Roomba_Driveii>
     302:	17 c0       	rjmp	.+46     	; 0x332 <_Z17handleRoombaInputP7_game_t+0xf8>
		} else {
			x_value = x_value;
			y_value = -y_value;
			Roomba_Drive(y_value,x_value);
     304:	88 27       	eor	r24, r24
     306:	99 27       	eor	r25, r25
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	8d d7       	rcall	.+3866   	; 0x1228 <_Z12Roomba_Driveii>
     30e:	11 c0       	rjmp	.+34     	; 0x332 <_Z17handleRoombaInputP7_game_t+0xf8>
		}
	} else if(autonomy_state = TURN_LEFT) {
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 32 02 	sts	0x0232, r24
		if(autonomy_counter > 3) {
     316:	80 91 35 02 	lds	r24, 0x0235
     31a:	84 30       	cpi	r24, 0x04	; 4
     31c:	10 f0       	brcs	.+4      	; 0x322 <_Z17handleRoombaInputP7_game_t+0xe8>
			autonomy_state = USER;
     31e:	10 92 32 02 	sts	0x0232, r1
		}
		autonomy_counter++;
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	80 93 35 02 	sts	0x0235, r24
		Roomba_Drive(250,1);
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	8a ef       	ldi	r24, 0xFA	; 250
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	7b d7       	rcall	.+3830   	; 0x1228 <_Z12Roomba_Driveii>
		Roomba_Drive(250,-1);
		
	}

	// fire every 5th packet
	ir_count+= 1;
     332:	80 91 67 02 	lds	r24, 0x0267
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 67 02 	sts	0x0267, r24
	if(ir_count == 5){
     33c:	85 30       	cpi	r24, 0x05	; 5
     33e:	29 f4       	brne	.+10     	; 0x34a <_Z17handleRoombaInputP7_game_t+0x110>
		IR_transmit(roomba.player_id);
     340:	80 91 36 02 	lds	r24, 0x0236
     344:	c8 d2       	rcall	.+1424   	; 0x8d6 <_Z11IR_transmith>
		ir_count = 0;
     346:	10 92 67 02 	sts	0x0267, r1
	}
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <_Z16load_death_musicv>:

void load_death_music()
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	a2 97       	sbiw	r28, 0x22	; 34
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
	roomba_music_song_t death_song;
	death_song.len = 0;
     368:	1a 82       	std	Y+2, r1	; 0x02
	death_song.song_num = 1;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	89 83       	std	Y+1, r24	; 0x01
	if(roomba.team == ZOMBIE){
     36e:	80 91 37 02 	lds	r24, 0x0237
     372:	81 11       	cpse	r24, r1
     374:	33 c0       	rjmp	.+102    	; 0x3dc <_Z16load_death_musicv+0x88>
		Roomba_Music_add_note(&death_song, 83, 9);
     376:	49 e0       	ldi	r20, 0x09	; 9
     378:	63 e5       	ldi	r22, 0x53	; 83
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	6b d7       	rcall	.+3798   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 90, 18);
     380:	42 e1       	ldi	r20, 0x12	; 18
     382:	6a e5       	ldi	r22, 0x5A	; 90
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	66 d7       	rcall	.+3788   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 89, 9);
     38a:	49 e0       	ldi	r20, 0x09	; 9
     38c:	69 e5       	ldi	r22, 0x59	; 89
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	61 d7       	rcall	.+3778   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 89, 9);
     394:	49 e0       	ldi	r20, 0x09	; 9
     396:	69 e5       	ldi	r22, 0x59	; 89
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	5c d7       	rcall	.+3768   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 88, 9);
     39e:	49 e0       	ldi	r20, 0x09	; 9
     3a0:	68 e5       	ldi	r22, 0x58	; 88
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	57 d7       	rcall	.+3758   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 86, 9);
     3a8:	49 e0       	ldi	r20, 0x09	; 9
     3aa:	66 e5       	ldi	r22, 0x56	; 86
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	52 d7       	rcall	.+3748   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 84, 9);
     3b2:	49 e0       	ldi	r20, 0x09	; 9
     3b4:	64 e5       	ldi	r22, 0x54	; 84
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	4d d7       	rcall	.+3738   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 88, 9);
     3bc:	49 e0       	ldi	r20, 0x09	; 9
     3be:	68 e5       	ldi	r22, 0x58	; 88
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	48 d7       	rcall	.+3728   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 88, 9);
     3c6:	49 e0       	ldi	r20, 0x09	; 9
     3c8:	68 e5       	ldi	r22, 0x58	; 88
     3ca:	ce 01       	movw	r24, r28
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	43 d7       	rcall	.+3718   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 84, 9);
     3d0:	49 e0       	ldi	r20, 0x09	; 9
     3d2:	64 e5       	ldi	r22, 0x54	; 84
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	3e d7       	rcall	.+3708   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     3da:	50 c0       	rjmp	.+160    	; 0x47c <_Z16load_death_musicv+0x128>
	} else {
		Roomba_Music_add_note(&death_song, 89, 9);
     3dc:	49 e0       	ldi	r20, 0x09	; 9
     3de:	69 e5       	ldi	r22, 0x59	; 89
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	38 d7       	rcall	.+3696   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 81, 9);
     3e6:	49 e0       	ldi	r20, 0x09	; 9
     3e8:	61 e5       	ldi	r22, 0x51	; 81
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	33 d7       	rcall	.+3686   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 83, 9);
     3f0:	49 e0       	ldi	r20, 0x09	; 9
     3f2:	63 e5       	ldi	r22, 0x53	; 83
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	2e d7       	rcall	.+3676   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 89, 9);
     3fa:	49 e0       	ldi	r20, 0x09	; 9
     3fc:	69 e5       	ldi	r22, 0x59	; 89
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	29 d7       	rcall	.+3666   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 81, 9);
     404:	49 e0       	ldi	r20, 0x09	; 9
     406:	61 e5       	ldi	r22, 0x51	; 81
     408:	ce 01       	movw	r24, r28
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	24 d7       	rcall	.+3656   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 83, 9);
     40e:	49 e0       	ldi	r20, 0x09	; 9
     410:	63 e5       	ldi	r22, 0x53	; 83
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	1f d7       	rcall	.+3646   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 89, 9);
     418:	49 e0       	ldi	r20, 0x09	; 9
     41a:	69 e5       	ldi	r22, 0x59	; 89
     41c:	ce 01       	movw	r24, r28
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	1a d7       	rcall	.+3636   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 81, 9);
     422:	49 e0       	ldi	r20, 0x09	; 9
     424:	61 e5       	ldi	r22, 0x51	; 81
     426:	ce 01       	movw	r24, r28
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	15 d7       	rcall	.+3626   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 83, 9);
     42c:	49 e0       	ldi	r20, 0x09	; 9
     42e:	63 e5       	ldi	r22, 0x53	; 83
     430:	ce 01       	movw	r24, r28
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	10 d7       	rcall	.+3616   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 84, 9);
     436:	49 e0       	ldi	r20, 0x09	; 9
     438:	64 e5       	ldi	r22, 0x54	; 84
     43a:	ce 01       	movw	r24, r28
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	0b d7       	rcall	.+3606   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 88, 9);
     440:	49 e0       	ldi	r20, 0x09	; 9
     442:	68 e5       	ldi	r22, 0x58	; 88
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	06 d7       	rcall	.+3596   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 83, 9);
     44a:	49 e0       	ldi	r20, 0x09	; 9
     44c:	63 e5       	ldi	r22, 0x53	; 83
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	01 d7       	rcall	.+3586   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 84, 9);
     454:	49 e0       	ldi	r20, 0x09	; 9
     456:	64 e5       	ldi	r22, 0x54	; 84
     458:	ce 01       	movw	r24, r28
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	fc d6       	rcall	.+3576   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 83, 9);
     45e:	49 e0       	ldi	r20, 0x09	; 9
     460:	63 e5       	ldi	r22, 0x53	; 83
     462:	ce 01       	movw	r24, r28
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	f7 d6       	rcall	.+3566   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 91, 9);
     468:	49 e0       	ldi	r20, 0x09	; 9
     46a:	6b e5       	ldi	r22, 0x5B	; 91
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	f2 d6       	rcall	.+3556   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
		Roomba_Music_add_note(&death_song, 88, 9);
     472:	49 e0       	ldi	r20, 0x09	; 9
     474:	68 e5       	ldi	r22, 0x58	; 88
     476:	ce 01       	movw	r24, r28
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	ed d6       	rcall	.+3546   	; 0x1256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
	}
	Roomba_Music_load_song(&death_song);
     47c:	ce 01       	movw	r24, r28
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	01 d7       	rcall	.+3586   	; 0x1284 <_Z22Roomba_Music_load_songP20_roomba_music_song_t>
}
     482:	a2 96       	adiw	r28, 0x22	; 34
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <_Z16handleStateInputP7_game_t>:

void handleStateInput(pf_game_t* game){
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
	roomba.old_team = roomba.team;
     498:	a7 e3       	ldi	r26, 0x37	; 55
     49a:	b2 e0       	ldi	r27, 0x02	; 2
     49c:	2c 91       	ld	r18, X
     49e:	20 93 3a 02 	sts	0x023A, r18
	roomba.old_state = roomba.state;
     4a2:	e8 e3       	ldi	r30, 0x38	; 56
     4a4:	f2 e0       	ldi	r31, 0x02	; 2
     4a6:	30 81       	ld	r19, Z
     4a8:	30 93 3b 02 	sts	0x023B, r19
	roomba.team = game->game_team;
     4ac:	ec 01       	movw	r28, r24
     4ae:	3b 85       	ldd	r19, Y+11	; 0x0b
     4b0:	3c 93       	st	X, r19
	roomba.state = game->game_state;
     4b2:	8c 85       	ldd	r24, Y+12	; 0x0c
     4b4:	80 83       	st	Z, r24
	
	if(roomba.team != roomba.old_team) {
     4b6:	23 17       	cp	r18, r19
     4b8:	29 f0       	breq	.+10     	; 0x4c4 <_Z16handleStateInputP7_game_t+0x30>
		TEAM_HUMAN_PIN_OFF();
     4ba:	45 98       	cbi	0x08, 5	; 8
		TEAM_ZOMBIE_PIN_ON();
     4bc:	44 9a       	sbi	0x08, 4	; 8
		zombie_song = 0;
     4be:	10 92 34 02 	sts	0x0234, r1
     4c2:	37 c0       	rjmp	.+110    	; 0x532 <_Z16handleStateInputP7_game_t+0x9e>
	} else {
		switch(roomba.team) {
     4c4:	22 23       	and	r18, r18
     4c6:	19 f0       	breq	.+6      	; 0x4ce <_Z16handleStateInputP7_game_t+0x3a>
     4c8:	21 30       	cpi	r18, 0x01	; 1
     4ca:	b9 f0       	breq	.+46     	; 0x4fa <_Z16handleStateInputP7_game_t+0x66>
     4cc:	32 c0       	rjmp	.+100    	; 0x532 <_Z16handleStateInputP7_game_t+0x9e>
			case ZOMBIE:
			{

				if(zombie_song == 0) {
     4ce:	80 91 34 02 	lds	r24, 0x0234
     4d2:	81 11       	cpse	r24, r1
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_Z16handleStateInputP7_game_t+0x4e>
					load_death_music();
     4d6:	3e df       	rcall	.-388    	; 0x354 <_Z16load_death_musicv>
					Roomba_Music_play_song(1);
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	08 d7       	rcall	.+3600   	; 0x12ec <_Z22Roomba_Music_play_songh>
					zombie_song = 1;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 34 02 	sts	0x0234, r24
				}
				TEAM_HUMAN_PIN_OFF();
     4e2:	45 98       	cbi	0x08, 5	; 8
				TEAM_ZOMBIE_PIN_ON();
     4e4:	44 9a       	sbi	0x08, 4	; 8
				if(roomba.state == NORMAL) {
     4e6:	80 91 38 02 	lds	r24, 0x0238
     4ea:	81 11       	cpse	r24, r1
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <_Z16handleStateInputP7_game_t+0x5e>
					TEAM_ZOMBIE_STUN_ON();
     4ee:	43 9a       	sbi	0x08, 3	; 8
     4f0:	20 c0       	rjmp	.+64     	; 0x532 <_Z16handleStateInputP7_game_t+0x9e>
				} else if(roomba.state == STUNNED) {
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	f1 f4       	brne	.+60     	; 0x532 <_Z16handleStateInputP7_game_t+0x9e>
					TEAM_ZOMBIE_STUN_OFF();
     4f6:	43 98       	cbi	0x08, 3	; 8
     4f8:	1c c0       	rjmp	.+56     	; 0x532 <_Z16handleStateInputP7_game_t+0x9e>
				}
				break;
			}
			case HUMAN:
			{
				if(human_song == 0) {
     4fa:	80 91 33 02 	lds	r24, 0x0233
     4fe:	81 11       	cpse	r24, r1
     500:	10 c0       	rjmp	.+32     	; 0x522 <_Z16handleStateInputP7_game_t+0x8e>
					load_death_music();
     502:	28 df       	rcall	.-432    	; 0x354 <_Z16load_death_musicv>
					Roomba_Music_play_song(1);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	f2 d6       	rcall	.+3556   	; 0x12ec <_Z22Roomba_Music_play_songh>
					human_song = 1;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 33 02 	sts	0x0233, r24
				}
				zombie_song = 0;
     50e:	10 92 34 02 	sts	0x0234, r1
				TEAM_ZOMBIE_PIN_OFF();
     512:	44 98       	cbi	0x08, 4	; 8
				TEAM_HUMAN_PIN_ON();
     514:	45 9a       	sbi	0x08, 5	; 8
				if(roomba.state == SHIELDED) {
     516:	80 91 38 02 	lds	r24, 0x0238
     51a:	81 11       	cpse	r24, r1
     51c:	0a c0       	rjmp	.+20     	; 0x532 <_Z16handleStateInputP7_game_t+0x9e>
					TEAM_HUMAN_SHIELD_ON();
     51e:	43 9a       	sbi	0x08, 3	; 8
     520:	08 c0       	rjmp	.+16     	; 0x532 <_Z16handleStateInputP7_game_t+0x9e>
				if(human_song == 0) {
					load_death_music();
					Roomba_Music_play_song(1);
					human_song = 1;
				}
				zombie_song = 0;
     522:	10 92 34 02 	sts	0x0234, r1
				TEAM_ZOMBIE_PIN_OFF();
     526:	44 98       	cbi	0x08, 4	; 8
				TEAM_HUMAN_PIN_ON();
     528:	45 9a       	sbi	0x08, 5	; 8
				if(roomba.state == SHIELDED) {
     52a:	80 91 38 02 	lds	r24, 0x0238
     52e:	88 23       	and	r24, r24
     530:	b1 f3       	breq	.-20     	; 0x51e <_Z16handleStateInputP7_game_t+0x8a>
			default:
				break;
		}

 	}
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <_Z16send_back_packetv>:

// Return a packet back to the base station reporting
// if we have been hit, and by whom
void send_back_packet()
{
	LED_TX_STATE_INDICATOR();
     538:	95 b1       	in	r25, 0x05	; 5
     53a:	80 e2       	ldi	r24, 0x20	; 32
     53c:	89 27       	eor	r24, r25
     53e:	85 b9       	out	0x05, r24	; 5

	tx_packet.type = GAME;
     540:	10 92 47 02 	sts	0x0247, r1
	for(int i = 0;i < 5; ++i){
		tx_packet.payload.game.sender_address[i] = ROOMBA_ADDRESSES[roomba_num][i];
     544:	80 91 00 02 	lds	r24, 0x0200
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	dc 01       	movw	r26, r24
     54c:	aa 0f       	add	r26, r26
     54e:	bb 1f       	adc	r27, r27
     550:	aa 0f       	add	r26, r26
     552:	bb 1f       	adc	r27, r27
     554:	a8 0f       	add	r26, r24
     556:	b9 1f       	adc	r27, r25
     558:	a6 5f       	subi	r26, 0xF6	; 246
     55a:	bd 4f       	sbci	r27, 0xFD	; 253
     55c:	ea e4       	ldi	r30, 0x4A	; 74
     55e:	f2 e0       	ldi	r31, 0x02	; 2
     560:	8f e4       	ldi	r24, 0x4F	; 79
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	2d 91       	ld	r18, X+
     566:	21 93       	st	Z+, r18
void send_back_packet()
{
	LED_TX_STATE_INDICATOR();

	tx_packet.type = GAME;
	for(int i = 0;i < 5; ++i){
     568:	e8 17       	cp	r30, r24
     56a:	f9 07       	cpc	r31, r25
     56c:	d9 f7       	brne	.-10     	; 0x564 <_Z16send_back_packetv+0x2c>
		tx_packet.payload.game.sender_address[i] = ROOMBA_ADDRESSES[roomba_num][i];
	}

	tx_packet.payload.game.game_player_id = roomba.player_id;
     56e:	80 91 36 02 	lds	r24, 0x0236
     572:	80 93 54 02 	sts	0x0254, r24
	tx_packet.payload.game.game_team = roomba.team;
     576:	80 91 37 02 	lds	r24, 0x0237
     57a:	80 93 55 02 	sts	0x0255, r24
	tx_packet.payload.game.game_state = roomba.state;
     57e:	80 91 38 02 	lds	r24, 0x0238
     582:	80 93 56 02 	sts	0x0256, r24
	tx_packet.payload.game.game_hit_flag = (roomba.last_ir_code != 0) ? 1: 0;
     586:	80 91 39 02 	lds	r24, 0x0239
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	81 11       	cpse	r24, r1
     58e:	01 c0       	rjmp	.+2      	; 0x592 <_Z16send_back_packetv+0x5a>
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	90 93 57 02 	sts	0x0257, r25
	tx_packet.payload.game.game_enemy_id = roomba.last_ir_code;
     596:	80 93 58 02 	sts	0x0258, r24

	// reset the stuff.
	roomba.last_ir_code = 0;
     59a:	10 92 39 02 	sts	0x0239, r1

	Radio_Transmit(&tx_packet, RADIO_RETURN_ON_TX);
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	87 e4       	ldi	r24, 0x47	; 71
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	bf c3       	rjmp	.+1918   	; 0xd24 <_Z14Radio_TransmitP3_rp14_radio_tx_wait>
     5a6:	08 95       	ret

000005a8 <_Z19current_radio_statev>:
}



void current_radio_state() {
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	a2 97       	sbiw	r28, 0x22	; 34
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
	int16_t value;
	RADIO_RX_STATUS result;
	radiopacket_t packet;

	for(;;) {
		Service_Subscribe(radio_receive_service,&value);
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5d       	subi	r22, 0xDF	; 223
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	80 91 6a 02 	lds	r24, 0x026A
     5c6:	90 91 6b 02 	lds	r25, 0x026B
     5ca:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Service_Subscribe>
		
		do {
			result = Radio_Receive(&packet);
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	01 d4       	rcall	.+2050   	; 0xdd6 <_Z13Radio_ReceiveP3_rp>
     5d4:	18 2f       	mov	r17, r24

			if(result == RADIO_RX_SUCCESS || result == RADIO_RX_MORE_PACKETS) {
     5d6:	8d ef       	ldi	r24, 0xFD	; 253
     5d8:	81 0f       	add	r24, r17
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	48 f4       	brcc	.+18     	; 0x5f0 <_Z19current_radio_statev+0x48>
				if( packet.type == GAME)
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	81 11       	cpse	r24, r1
     5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <_Z19current_radio_statev+0x48>
				{
					handleRoombaInput(&packet.payload.game);
     5e4:	ce 01       	movw	r24, r28
     5e6:	04 96       	adiw	r24, 0x04	; 4
     5e8:	28 de       	rcall	.-944    	; 0x23a <_Z17handleRoombaInputP7_game_t>
					handleStateInput(&packet.payload.game);
     5ea:	ce 01       	movw	r24, r28
     5ec:	04 96       	adiw	r24, 0x04	; 4
     5ee:	52 df       	rcall	.-348    	; 0x494 <_Z16handleStateInputP7_game_t>
	radiopacket_t packet;

	for(;;) {
		Service_Subscribe(radio_receive_service,&value);
		
		do {
     5f0:	13 30       	cpi	r17, 0x03	; 3
     5f2:	69 f3       	breq	.-38     	; 0x5ce <_Z19current_radio_statev+0x26>
				}
			}

		} while (result == RADIO_RX_MORE_PACKETS);

		send_back_packet();
     5f4:	a1 df       	rcall	.-190    	; 0x538 <_Z16send_back_packetv>
	}
     5f6:	e2 cf       	rjmp	.-60     	; 0x5bc <_Z19current_radio_statev+0x14>

000005f8 <_Z17power_cycle_radiov>:
}

void power_cycle_radio()
{
	//Turn off radio power.
	DDRL |= (1 << PL2);
     5f8:	ea e0       	ldi	r30, 0x0A	; 10
     5fa:	f1 e0       	ldi	r31, 0x01	; 1
     5fc:	80 81       	ld	r24, Z
     5fe:	84 60       	ori	r24, 0x04	; 4
     600:	80 83       	st	Z, r24
	PORTL &= ~(1<< PL2);
     602:	eb e0       	ldi	r30, 0x0B	; 11
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	80 81       	ld	r24, Z
     608:	8b 7f       	andi	r24, 0xFB	; 251
     60a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60c:	2f ef       	ldi	r18, 0xFF	; 255
     60e:	89 e6       	ldi	r24, 0x69	; 105
     610:	98 e1       	ldi	r25, 0x18	; 24
     612:	21 50       	subi	r18, 0x01	; 1
     614:	80 40       	sbci	r24, 0x00	; 0
     616:	90 40       	sbci	r25, 0x00	; 0
     618:	e1 f7       	brne	.-8      	; 0x612 <_Z17power_cycle_radiov+0x1a>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <_Z17power_cycle_radiov+0x24>
     61c:	00 00       	nop
	_delay_ms(500);
	PORTL |= (1<<PL2);
     61e:	80 81       	ld	r24, Z
     620:	84 60       	ori	r24, 0x04	; 4
     622:	80 83       	st	Z, r24
     624:	2f ef       	ldi	r18, 0xFF	; 255
     626:	89 e6       	ldi	r24, 0x69	; 105
     628:	98 e1       	ldi	r25, 0x18	; 24
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	80 40       	sbci	r24, 0x00	; 0
     62e:	90 40       	sbci	r25, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <_Z17power_cycle_radiov+0x32>
     632:	00 c0       	rjmp	.+0      	; 0x634 <_Z17power_cycle_radiov+0x3c>
     634:	00 00       	nop
     636:	08 95       	ret

00000638 <_Z17init_roomba_stateP12roomba_state>:
	TEAM_PORT &= ~(1<<TEAM_ZOMBIE_PIN);
	TEAM_PORT &= ~(1<<EFFECT_INDICATOR);
}

void init_roomba_state(ROOMBA_STATE* roomba)
{
     638:	fc 01       	movw	r30, r24
	roomba->player_id = PLAYER_IDS[roomba_num];
     63a:	a0 91 00 02 	lds	r26, 0x0200
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	aa 5f       	subi	r26, 0xFA	; 250
     642:	bd 4f       	sbci	r27, 0xFD	; 253
     644:	8c 91       	ld	r24, X
     646:	80 83       	st	Z, r24
	roomba->team = ZOMBIE;
     648:	11 82       	std	Z+1, r1	; 0x01
	roomba->state = NORMAL;
     64a:	12 82       	std	Z+2, r1	; 0x02
	roomba->last_ir_code= 0;
     64c:	13 82       	std	Z+3, r1	; 0x03
	roomba->old_team = 0;
     64e:	14 82       	std	Z+4, r1	; 0x04
	roomba->old_state = 0;
     650:	15 82       	std	Z+5, r1	; 0x05
	roomba->old_vx = 0;
     652:	17 82       	std	Z+7, r1	; 0x07
     654:	16 82       	std	Z+6, r1	; 0x06
	roomba->old_vy = 0;
     656:	11 86       	std	Z+9, r1	; 0x09
     658:	10 86       	std	Z+8, r1	; 0x08
	roomba->old_button = 0;
     65a:	13 86       	std	Z+11, r1	; 0x0b
     65c:	12 86       	std	Z+10, r1	; 0x0a
	roomba->vx = 0;
     65e:	15 86       	std	Z+13, r1	; 0x0d
     660:	14 86       	std	Z+12, r1	; 0x0c
	roomba->vy = 0;
     662:	17 86       	std	Z+15, r1	; 0x0f
     664:	16 86       	std	Z+14, r1	; 0x0e
	roomba->button = 0;
     666:	10 8a       	std	Z+16, r1	; 0x10
     668:	08 95       	ret

0000066a <_Z6r_mainv>:
}

int r_main(void)
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
	power_cycle_radio();
     66e:	c4 df       	rcall	.-120    	; 0x5f8 <_Z17power_cycle_radiov>
	init_roomba_state(&roomba);
     670:	86 e3       	ldi	r24, 0x36	; 54
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	e1 df       	rcall	.-62     	; 0x638 <_Z17init_roomba_stateP12roomba_state>
	
	
	//Initialize radio
	Radio_Init();
     676:	0e d2       	rcall	.+1052   	; 0xa94 <_Z10Radio_Initv>
	IR_init();
     678:	43 d0       	rcall	.+134    	; 0x700 <_Z7IR_initv>
	Radio_Configure_Rx(RADIO_PIPE_0, ROOMBA_ADDRESSES[roomba_num], ENABLE);
     67a:	80 91 00 02 	lds	r24, 0x0200
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	bc 01       	movw	r22, r24
     682:	66 0f       	add	r22, r22
     684:	77 1f       	adc	r23, r23
     686:	66 0f       	add	r22, r22
     688:	77 1f       	adc	r23, r23
     68a:	86 0f       	add	r24, r22
     68c:	97 1f       	adc	r25, r23
     68e:	bc 01       	movw	r22, r24
     690:	66 5f       	subi	r22, 0xF6	; 246
     692:	7d 4f       	sbci	r23, 0xFD	; 253
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	7c d2       	rcall	.+1272   	; 0xb92 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>
	Radio_Configure(RADIO_1MBPS, RADIO_HIGHEST_POWER);
     69a:	63 e0       	ldi	r22, 0x03	; 3
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	18 d3       	rcall	.+1584   	; 0xcd0 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>
 
	//Create the services
	radio_receive_service = Service_Init();
     6a0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <Service_Init>
     6a4:	90 93 6b 02 	sts	0x026B, r25
     6a8:	80 93 6a 02 	sts	0x026A, r24
	ir_receive_service = Service_Init();
     6ac:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <Service_Init>
     6b0:	90 93 69 02 	sts	0x0269, r25
     6b4:	80 93 68 02 	sts	0x0268, r24

	//Create the tasks
	Task_Create_System(setup_roomba, 0);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	82 ec       	ldi	r24, 0xC2	; 194
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <Task_Create_System>
	Task_Create_RR(current_radio_state,0);
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	84 ed       	ldi	r24, 0xD4	; 212
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <Task_Create_RR>
	Task_Create_RR(current_ir_state,0);
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8d e9       	ldi	r24, 0x9D	; 157
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <Task_Create_RR>
	Task_Create_Periodic(check_bump_sensor, 0, 80, 60, 1000);
     6dc:	08 ee       	ldi	r16, 0xE8	; 232
     6de:	13 e0       	ldi	r17, 0x03	; 3
     6e0:	2c e3       	ldi	r18, 0x3C	; 60
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e5       	ldi	r20, 0x50	; 80
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	82 eb       	ldi	r24, 0xB2	; 178
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <Task_Create_Periodic>
 
	Task_Terminate();
     6f4:	f8 d7       	rcall	.+4080   	; 0x16e6 <Task_Terminate>
	return 0 ;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <_Z7IR_initv>:
//Input on pin 3 (PE5/INT5)
void IR_init() {

	// This block sets up the PWM timers for controlling
	// the IR transmitter
	DDRL |= (1 << PL3)  | ( 1 << PL5);
     700:	ea e0       	ldi	r30, 0x0A	; 10
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	80 81       	ld	r24, Z
     706:	88 62       	ori	r24, 0x28	; 40
     708:	80 83       	st	Z, r24
	TCCR5A = 0;
     70a:	a0 e2       	ldi	r26, 0x20	; 32
     70c:	b1 e0       	ldi	r27, 0x01	; 1
     70e:	1c 92       	st	X, r1
	TCCR5B = 0;
     710:	e1 e2       	ldi	r30, 0x21	; 33
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	10 82       	st	Z, r1
	//TIMSK5 &= ~(1 << OCIE5C);
	// fast pwm
	TCCR5A |= (1<<WGM50) | (1<<WGM51);
     716:	8c 91       	ld	r24, X
     718:	83 60       	ori	r24, 0x03	; 3
     71a:	8c 93       	st	X, r24
	TCCR5B |= (1<<WGM52) | (1<<WGM53);
     71c:	80 81       	ld	r24, Z
     71e:	88 61       	ori	r24, 0x18	; 24
     720:	80 83       	st	Z, r24
	// output to pin 44, for output C
	// but have the output turned off to begin with.
	TCCR5A &= ~(1 << COM5C1);
     722:	8c 91       	ld	r24, X
     724:	87 7f       	andi	r24, 0xF7	; 247
     726:	8c 93       	st	X, r24
	//TCCR5A |= (1 << COM5C1);
	// no prescaler
	TCCR5B |= (1 << CS50);
     728:	80 81       	ld	r24, Z
     72a:	81 60       	ori	r24, 0x01	; 1
     72c:	80 83       	st	Z, r24
	// set output compare counts
	OCR5A = 421; // 38 Khz
     72e:	85 ea       	ldi	r24, 0xA5	; 165
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	90 93 29 01 	sts	0x0129, r25
     736:	80 93 28 01 	sts	0x0128, r24
	OCR5C = 210; // 50 % duty
     73a:	82 ed       	ldi	r24, 0xD2	; 210
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	90 93 2d 01 	sts	0x012D, r25
     742:	80 93 2c 01 	sts	0x012C, r24

	// Interrupt Timer 3.
	//clear the control registers
	TCCR3A = 0;
     746:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;
     74a:	e1 e9       	ldi	r30, 0x91	; 145
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	10 82       	st	Z, r1
	//Leave on normal mode.
	//No prescaller
	TCCR3B |= (1<<CS10);
     750:	80 81       	ld	r24, Z
     752:	81 60       	ori	r24, 0x01	; 1
     754:	80 83       	st	Z, r24
	//Make sure interrupt is disabled until external interrupt
	TIMSK3 &= ~(1<<OCIE3A);
     756:	e1 e7       	ldi	r30, 0x71	; 113
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	8d 7f       	andi	r24, 0xFD	; 253
     75e:	80 83       	st	Z, r24

	//Setup the input interrupt on pin 3 (PE5/INT5)
	// DDRE &= ~(1<<PE5);
	// EICRB |= (1<<ISC51) | (1<<ISC50);
	DDRE &= ~_BV(PE5);
     760:	6d 98       	cbi	0x0d, 5	; 13

	EICRB |= (1<<ISC51) | (1<<ISC50);
     762:	ea e6       	ldi	r30, 0x6A	; 106
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	8c 60       	ori	r24, 0x0C	; 12
     76a:	80 83       	st	Z, r24
	// EICRB |= _BV(ISC51);
	// EICRB &= ~_BV(ISC50);
	EIMSK |= _BV(INT5);
     76c:	ed 9a       	sbi	0x1d, 5	; 29
	EIFR |= _BV(INTF5);
     76e:	e5 9a       	sbi	0x1c, 5	; 28
     770:	08 95       	ret

00000772 <__vector_6>:
}


//Receiving a signal.
ISR(INT5_vect) {
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	0b b6       	in	r0, 0x3b	; 59
     77e:	0f 92       	push	r0
     780:	8f 93       	push	r24
     782:	9f 93       	push	r25
     784:	ef 93       	push	r30
     786:	ff 93       	push	r31
	if(!is_receiving) {
     788:	80 91 70 02 	lds	r24, 0x0270
     78c:	81 11       	cpse	r24, r1
     78e:	17 c0       	rjmp	.+46     	; 0x7be <__vector_6+0x4c>
		//Start a new byte, start the timers.
		is_receiving = 1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	80 93 70 02 	sts	0x0270, r24
		currentBit = 0;
     796:	10 92 6e 02 	sts	0x026E, r1
		currentByte = 0;
     79a:	10 92 6d 02 	sts	0x026D, r1

		//Clear any existing timer interrupts.
		TIFR3 |= (1<<OCF3A);
     79e:	c1 9a       	sbi	0x18, 1	; 24

		//Delay by 1.5 bit lengths.
		// i.e 8000 + 8000
		OCR3A = TCNT3 + 12000;
     7a0:	80 91 94 00 	lds	r24, 0x0094
     7a4:	90 91 95 00 	lds	r25, 0x0095
     7a8:	80 52       	subi	r24, 0x20	; 32
     7aa:	91 4d       	sbci	r25, 0xD1	; 209
     7ac:	90 93 99 00 	sts	0x0099, r25
     7b0:	80 93 98 00 	sts	0x0098, r24
		// enable timer 3 interrupts
		TIMSK3 |= (1<<OCIE3A);
     7b4:	e1 e7       	ldi	r30, 0x71	; 113
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	82 60       	ori	r24, 0x02	; 2
     7bc:	80 83       	st	Z, r24
	}
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	0f 90       	pop	r0
     7c8:	0b be       	out	0x3b, r0	; 59
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <__vector_32>:

//Read a new arriving signal.
ISR(TIMER3_COMPA_vect) {
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
     7de:	0b b6       	in	r0, 0x3b	; 59
     7e0:	0f 92       	push	r0
     7e2:	2f 93       	push	r18
     7e4:	3f 93       	push	r19
     7e6:	4f 93       	push	r20
     7e8:	5f 93       	push	r21
     7ea:	6f 93       	push	r22
     7ec:	7f 93       	push	r23
     7ee:	8f 93       	push	r24
     7f0:	9f 93       	push	r25
     7f2:	af 93       	push	r26
     7f4:	bf 93       	push	r27
     7f6:	ef 93       	push	r30
     7f8:	ff 93       	push	r31
	if(is_receiving) {
     7fa:	80 91 70 02 	lds	r24, 0x0270
     7fe:	88 23       	and	r24, r24
     800:	81 f1       	breq	.+96     	; 0x862 <__vector_32+0x8e>

		// check to see if the input pin is HIGH ( digital pin 3)
		if(!(PINE & (1<<PE5)) ) {
     802:	65 99       	sbic	0x0c, 5	; 12
     804:	0e c0       	rjmp	.+28     	; 0x822 <__vector_32+0x4e>
			currentByte |= (1<<currentBit);
     806:	30 91 6e 02 	lds	r19, 0x026E
     80a:	20 91 6d 02 	lds	r18, 0x026D
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	02 c0       	rjmp	.+4      	; 0x818 <__vector_32+0x44>
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	3a 95       	dec	r19
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__vector_32+0x40>
     81c:	82 2b       	or	r24, r18
     81e:	80 93 6d 02 	sts	0x026D, r24
		}


		++currentBit;
     822:	80 91 6e 02 	lds	r24, 0x026E
     826:	8f 5f       	subi	r24, 0xFF	; 255
     828:	80 93 6e 02 	sts	0x026E, r24
		OCR3A += 8000;
     82c:	e8 e9       	ldi	r30, 0x98	; 152
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	80 5c       	subi	r24, 0xC0	; 192
     836:	90 4e       	sbci	r25, 0xE0	; 224
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	80 83       	st	Z, r24

		if(currentBit >= 8) {
     83c:	80 91 6e 02 	lds	r24, 0x026E
     840:	88 30       	cpi	r24, 0x08	; 8
     842:	88 f0       	brcs	.+34     	; 0x866 <__vector_32+0x92>
			is_receiving = 0;
     844:	10 92 70 02 	sts	0x0270, r1

			// disable further timer3 interrupts
			TIMSK3 &= ~(1<<OCIE3A);
     848:	e1 e7       	ldi	r30, 0x71	; 113
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8d 7f       	andi	r24, 0xFD	; 253
     850:	80 83       	st	Z, r24

			// clear any pending timer3 interrupts
			TIFR3 |= (1<<OCF3A);
     852:	c1 9a       	sbi	0x18, 1	; 24

			// clear the any interrupts waiting on the IR receiver
			EIFR |= (1<<INTF5);
     854:	e5 9a       	sbi	0x1c, 5	; 28

			// here we should call
			outputByte = currentByte;
     856:	80 91 6d 02 	lds	r24, 0x026D
     85a:	80 93 6c 02 	sts	0x026C, r24
			ir_rxhandler();
     85e:	b4 dc       	rcall	.-1688   	; 0x1c8 <_Z12ir_rxhandlerv>
     860:	02 c0       	rjmp	.+4      	; 0x866 <__vector_32+0x92>
		}
	}else if (is_transmitting) {
     862:	80 91 6f 02 	lds	r24, 0x026F

	}
}
     866:	ff 91       	pop	r31
     868:	ef 91       	pop	r30
     86a:	bf 91       	pop	r27
     86c:	af 91       	pop	r26
     86e:	9f 91       	pop	r25
     870:	8f 91       	pop	r24
     872:	7f 91       	pop	r23
     874:	6f 91       	pop	r22
     876:	5f 91       	pop	r21
     878:	4f 91       	pop	r20
     87a:	3f 91       	pop	r19
     87c:	2f 91       	pop	r18
     87e:	0f 90       	pop	r0
     880:	0b be       	out	0x3b, r0	; 59
     882:	0f 90       	pop	r0
     884:	0f be       	out	0x3f, r0	; 63
     886:	0f 90       	pop	r0
     888:	1f 90       	pop	r1
     88a:	18 95       	reti

0000088c <_Z16enable_interruptv>:


void enable_interrupt() {
	//Clears existing interrupts.
	EIFR  |= (1<<INTF5);
     88c:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5);
     88e:	ed 9a       	sbi	0x1d, 5	; 29
     890:	08 95       	ret

00000892 <_Z17disable_interruptv>:
}

void disable_interrupt() {
	EIMSK &= ~(1<<INT5);
     892:	ed 98       	cbi	0x1d, 5	; 29
	TIMSK3 &= ~(1<<OCIE3A);
     894:	e1 e7       	ldi	r30, 0x71	; 113
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	8d 7f       	andi	r24, 0xFD	; 253
     89c:	80 83       	st	Z, r24
	TIFR3 |= (1<<OCF3A);
     89e:	c1 9a       	sbi	0x18, 1	; 24
	is_receiving = 0;
     8a0:	10 92 70 02 	sts	0x0270, r1
     8a4:	08 95       	ret

000008a6 <_Z4markv>:
}

void mark() {
	TCCR5A |= (1<<COM5C1);
     8a6:	e0 e2       	ldi	r30, 0x20	; 32
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	80 81       	ld	r24, Z
     8ac:	88 60       	ori	r24, 0x08	; 8
     8ae:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b0:	8f ec       	ldi	r24, 0xCF	; 207
     8b2:	97 e0       	ldi	r25, 0x07	; 7
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <_Z4markv+0xe>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <_Z4markv+0x14>
     8ba:	00 00       	nop
     8bc:	08 95       	ret

000008be <_Z5spacev>:
	_delay_us(500);
}
void space() {
	TCCR5A &= ~(1 << COM5C1);
     8be:	e0 e2       	ldi	r30, 0x20	; 32
     8c0:	f1 e0       	ldi	r31, 0x01	; 1
     8c2:	80 81       	ld	r24, Z
     8c4:	87 7f       	andi	r24, 0xF7	; 247
     8c6:	80 83       	st	Z, r24
     8c8:	8f ec       	ldi	r24, 0xCF	; 207
     8ca:	97 e0       	ldi	r25, 0x07	; 7
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <_Z5spacev+0xe>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <_Z5spacev+0x14>
     8d2:	00 00       	nop
     8d4:	08 95       	ret

000008d6 <_Z11IR_transmith>:
	_delay_us(500);
}

void IR_transmit(uint8_t data) {
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	08 2f       	mov	r16, r24
	uint8_t sreg = SREG;
     8e2:	ff b6       	in	r15, 0x3f	; 63
	cli();
     8e4:	f8 94       	cli

	disable_interrupt();
     8e6:	d5 df       	rcall	.-86     	; 0x892 <_Z17disable_interruptv>
	TCCR5A |= (1<<COM5C1);
     8e8:	e0 e2       	ldi	r30, 0x20	; 32
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	80 81       	ld	r24, Z
     8ee:	88 60       	ori	r24, 0x08	; 8
     8f0:	80 83       	st	Z, r24
	mark();
     8f2:	d9 df       	rcall	.-78     	; 0x8a6 <_Z4markv>
	space();
     8f4:	e4 df       	rcall	.-56     	; 0x8be <_Z5spacev>
	for(int i = 0; i < 8; i++) {
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
		if(((data >> i) & 0x1)) {
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	98 01       	movw	r18, r16
     8fe:	0c 2e       	mov	r0, r28
     900:	02 c0       	rjmp	.+4      	; 0x906 <_Z11IR_transmith+0x30>
     902:	35 95       	asr	r19
     904:	27 95       	ror	r18
     906:	0a 94       	dec	r0
     908:	e2 f7       	brpl	.-8      	; 0x902 <_Z11IR_transmith+0x2c>
     90a:	20 ff       	sbrs	r18, 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <_Z11IR_transmith+0x3c>
			mark();
     90e:	cb df       	rcall	.-106    	; 0x8a6 <_Z4markv>
     910:	01 c0       	rjmp	.+2      	; 0x914 <_Z11IR_transmith+0x3e>
		} else {
			space();
     912:	d5 df       	rcall	.-86     	; 0x8be <_Z5spacev>

	disable_interrupt();
	TCCR5A |= (1<<COM5C1);
	mark();
	space();
	for(int i = 0; i < 8; i++) {
     914:	21 96       	adiw	r28, 0x01	; 1
     916:	c8 30       	cpi	r28, 0x08	; 8
     918:	d1 05       	cpc	r29, r1
     91a:	81 f7       	brne	.-32     	; 0x8fc <_Z11IR_transmith+0x26>
			mark();
		} else {
			space();
		}
	}
	space();
     91c:	d0 df       	rcall	.-96     	; 0x8be <_Z5spacev>
	enable_interrupt();
     91e:	b6 df       	rcall	.-148    	; 0x88c <_Z16enable_interruptv>

	SREG = sreg; // sei();
     920:	ff be       	out	0x3f, r15	; 63
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	08 95       	ret

0000092e <_Z10IR_getLastv>:

uint8_t IR_getLast(){
	return outputByte;
     92e:	80 91 6c 02 	lds	r24, 0x026C
     932:	08 95       	ret

00000934 <_ZL10get_statusv>:
}

void Radio_Flush()
{
	send_instruction(FLUSH_TX, NULL, NULL, 0);
	send_instruction(FLUSH_RX, NULL, NULL, 0);
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	c2 e0       	ldi	r28, 0x02	; 2
     93a:	d1 e0       	ldi	r29, 0x01	; 1
     93c:	88 81       	ld	r24, Y
     93e:	8f 7b       	andi	r24, 0xBF	; 191
     940:	88 83       	st	Y, r24
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	30 d3       	rcall	.+1632   	; 0xfa6 <_Z14SPI_Write_Byteh>
     946:	98 81       	ld	r25, Y
     948:	90 64       	ori	r25, 0x40	; 64
     94a:	98 83       	st	Y, r25
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <_ZL12set_registerhPhh>:
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	8b 01       	movw	r16, r22
     960:	e4 2e       	mov	r14, r20
     962:	c2 e0       	ldi	r28, 0x02	; 2
     964:	d1 e0       	ldi	r29, 0x01	; 1
     966:	98 81       	ld	r25, Y
     968:	9f 7b       	andi	r25, 0xBF	; 191
     96a:	98 83       	st	Y, r25
     96c:	8f 71       	andi	r24, 0x1F	; 31
     96e:	80 62       	ori	r24, 0x20	; 32
     970:	1a d3       	rcall	.+1588   	; 0xfa6 <_Z14SPI_Write_Byteh>
     972:	f8 2e       	mov	r15, r24
     974:	6e 2d       	mov	r22, r14
     976:	c8 01       	movw	r24, r16
     978:	07 d3       	rcall	.+1550   	; 0xf88 <_Z15SPI_Write_BlockPhh>
     97a:	88 81       	ld	r24, Y
     97c:	80 64       	ori	r24, 0x40	; 64
     97e:	88 83       	st	Y, r24
     980:	8f 2d       	mov	r24, r15
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	08 95       	ret

00000990 <_ZL19reset_pipe0_addressv>:
     990:	80 91 2b 02 	lds	r24, 0x022B
     994:	88 23       	and	r24, r24
     996:	29 f0       	breq	.+10     	; 0x9a2 <_ZL19reset_pipe0_addressv+0x12>
     998:	45 e0       	ldi	r20, 0x05	; 5
     99a:	61 e2       	ldi	r22, 0x21	; 33
     99c:	72 e0       	ldi	r23, 0x02	; 2
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	d8 cf       	rjmp	.-80     	; 0x952 <_ZL12set_registerhPhh>
     9a2:	08 95       	ret

000009a4 <_ZL16send_instructionhPhS_h>:
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	8b 01       	movw	r16, r22
     9b0:	ea 01       	movw	r28, r20
     9b2:	f2 2e       	mov	r15, r18
     9b4:	e2 e0       	ldi	r30, 0x02	; 2
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	90 81       	ld	r25, Z
     9ba:	9f 7b       	andi	r25, 0xBF	; 191
     9bc:	90 83       	st	Z, r25
     9be:	f3 d2       	rcall	.+1510   	; 0xfa6 <_Z14SPI_Write_Byteh>
     9c0:	ff 20       	and	r15, r15
     9c2:	51 f0       	breq	.+20     	; 0x9d8 <_ZL16send_instructionhPhS_h+0x34>
     9c4:	20 97       	sbiw	r28, 0x00	; 0
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <_ZL16send_instructionhPhS_h+0x2c>
     9c8:	6f 2d       	mov	r22, r15
     9ca:	c8 01       	movw	r24, r16
     9cc:	dd d2       	rcall	.+1466   	; 0xf88 <_Z15SPI_Write_BlockPhh>
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <_ZL16send_instructionhPhS_h+0x34>
     9d0:	4f 2d       	mov	r20, r15
     9d2:	be 01       	movw	r22, r28
     9d4:	c8 01       	movw	r24, r16
     9d6:	c5 d2       	rcall	.+1418   	; 0xf62 <_Z19SPI_ReadWrite_BlockPhS_h>
     9d8:	e2 e0       	ldi	r30, 0x02	; 2
     9da:	f1 e0       	ldi	r31, 0x01	; 1
     9dc:	80 81       	ld	r24, Z
     9de:	80 64       	ori	r24, 0x40	; 64
     9e0:	80 83       	st	Z, r24
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	08 95       	ret

000009ee <_ZL12get_registerhPhh>:
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	06 2f       	mov	r16, r22
     9fc:	f7 2e       	mov	r15, r23
     9fe:	14 2f       	mov	r17, r20
     a00:	44 23       	and	r20, r20
     a02:	49 f0       	breq	.+18     	; 0xa16 <_ZL12get_registerhPhh+0x28>
     a04:	36 2f       	mov	r19, r22
     a06:	e6 2f       	mov	r30, r22
     a08:	f7 2f       	mov	r31, r23
     a0a:	2f ef       	ldi	r18, 0xFF	; 255
     a0c:	21 93       	st	Z+, r18
     a0e:	9e 2f       	mov	r25, r30
     a10:	93 1b       	sub	r25, r19
     a12:	91 17       	cp	r25, r17
     a14:	d8 f3       	brcs	.-10     	; 0xa0c <_ZL12get_registerhPhh+0x1e>
     a16:	c2 e0       	ldi	r28, 0x02	; 2
     a18:	d1 e0       	ldi	r29, 0x01	; 1
     a1a:	98 81       	ld	r25, Y
     a1c:	9f 7b       	andi	r25, 0xBF	; 191
     a1e:	98 83       	st	Y, r25
     a20:	8f 71       	andi	r24, 0x1F	; 31
     a22:	c1 d2       	rcall	.+1410   	; 0xfa6 <_Z14SPI_Write_Byteh>
     a24:	e8 2e       	mov	r14, r24
     a26:	41 2f       	mov	r20, r17
     a28:	60 2f       	mov	r22, r16
     a2a:	7f 2d       	mov	r23, r15
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	98 d2       	rcall	.+1328   	; 0xf62 <_Z19SPI_ReadWrite_BlockPhS_h>
     a32:	88 81       	ld	r24, Y
     a34:	80 64       	ori	r24, 0x40	; 64
     a36:	88 83       	st	Y, r24
     a38:	8e 2d       	mov	r24, r14
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	08 95       	ret

00000a48 <_ZL11set_rx_modev>:
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	1f 92       	push	r1
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	be 01       	movw	r22, r28
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	c8 df       	rcall	.-112    	; 0x9ee <_ZL12get_registerhPhh>
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	80 fd       	sbrc	r24, 0
     a62:	14 c0       	rjmp	.+40     	; 0xa8c <_ZL11set_rx_modev+0x44>
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	89 83       	std	Y+1, r24	; 0x01
     a68:	41 e0       	ldi	r20, 0x01	; 1
     a6a:	be 01       	movw	r22, r28
     a6c:	6f 5f       	subi	r22, 0xFF	; 255
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	6f df       	rcall	.-290    	; 0x952 <_ZL12set_registerhPhh>
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <_ZL11set_rx_modev+0x30>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <_ZL11set_rx_modev+0x36>
     a7e:	00 00       	nop
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <_ZL11set_rx_modev+0x3c>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <_ZL11set_rx_modev+0x42>
     a8a:	00 00       	nop
     a8c:	0f 90       	pop	r0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <_Z10Radio_Initv>:
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	1f 92       	push	r1
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	10 92 71 02 	sts	0x0271, r1
     aa4:	e1 e0       	ldi	r30, 0x01	; 1
     aa6:	f1 e0       	ldi	r31, 0x01	; 1
     aa8:	80 81       	ld	r24, Z
     aaa:	88 61       	ori	r24, 0x18	; 24
     aac:	80 83       	st	Z, r24
     aae:	a2 e0       	ldi	r26, 0x02	; 2
     ab0:	b1 e0       	ldi	r27, 0x01	; 1
     ab2:	8c 91       	ld	r24, X
     ab4:	8f 7e       	andi	r24, 0xEF	; 239
     ab6:	8c 93       	st	X, r24
     ab8:	8c 91       	ld	r24, X
     aba:	87 7f       	andi	r24, 0xF7	; 247
     abc:	8c 93       	st	X, r24
     abe:	8c 91       	ld	r24, X
     ac0:	8f 7d       	andi	r24, 0xDF	; 223
     ac2:	8c 93       	st	X, r24
     ac4:	80 81       	ld	r24, Z
     ac6:	80 62       	ori	r24, 0x20	; 32
     ac8:	80 83       	st	Z, r24
     aca:	80 81       	ld	r24, Z
     acc:	80 64       	ori	r24, 0x40	; 64
     ace:	80 83       	st	Z, r24
     ad0:	6c 98       	cbi	0x0d, 4	; 13
     ad2:	ea e6       	ldi	r30, 0x6A	; 106
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	82 60       	ori	r24, 0x02	; 2
     ada:	80 83       	st	Z, r24
     adc:	80 81       	ld	r24, Z
     ade:	8e 7f       	andi	r24, 0xFE	; 254
     ae0:	80 83       	st	Z, r24
     ae2:	ec 9a       	sbi	0x1d, 4	; 29
     ae4:	e4 9a       	sbi	0x1c, 4	; 28
     ae6:	8f ed       	ldi	r24, 0xDF	; 223
     ae8:	9b ea       	ldi	r25, 0xAB	; 171
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <_Z10Radio_Initv+0x56>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <_Z10Radio_Initv+0x5c>
     af0:	00 00       	nop
     af2:	2a d2       	rcall	.+1108   	; 0xf48 <_Z8SPI_Initv>
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	28 df       	rcall	.-432    	; 0x952 <_ZL12set_registerhPhh>
     b02:	85 e1       	ldi	r24, 0x15	; 21
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	be 01       	movw	r22, r28
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	20 df       	rcall	.-448    	; 0x952 <_ZL12set_registerhPhh>
     b12:	10 e7       	ldi	r17, 0x70	; 112
     b14:	19 83       	std	Y+1, r17	; 0x01
     b16:	41 e0       	ldi	r20, 0x01	; 1
     b18:	be 01       	movw	r22, r28
     b1a:	6f 5f       	subi	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	18 df       	rcall	.-464    	; 0x952 <_ZL12set_registerhPhh>
     b22:	89 e0       	ldi	r24, 0x09	; 9
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	41 e0       	ldi	r20, 0x01	; 1
     b28:	be 01       	movw	r22, r28
     b2a:	6f 5f       	subi	r22, 0xFF	; 255
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	10 df       	rcall	.-480    	; 0x952 <_ZL12set_registerhPhh>
     b32:	8f e0       	ldi	r24, 0x0F	; 15
     b34:	89 83       	std	Y+1, r24	; 0x01
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	be 01       	movw	r22, r28
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	08 df       	rcall	.-496    	; 0x952 <_ZL12set_registerhPhh>
     b42:	19 83       	std	Y+1, r17	; 0x01
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	be 01       	movw	r22, r28
     b48:	6f 5f       	subi	r22, 0xFF	; 255
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	01 df       	rcall	.-510    	; 0x952 <_ZL12set_registerhPhh>
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	81 ee       	ldi	r24, 0xE1	; 225
     b5c:	23 df       	rcall	.-442    	; 0x9a4 <_ZL16send_instructionhPhS_h>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	82 ee       	ldi	r24, 0xE2	; 226
     b6a:	1c df       	rcall	.-456    	; 0x9a4 <_ZL16send_instructionhPhS_h>
     b6c:	8f e3       	ldi	r24, 0x3F	; 63
     b6e:	9f e1       	ldi	r25, 0x1F	; 31
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <_Z10Radio_Initv+0xdc>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <_Z10Radio_Initv+0xe2>
     b76:	00 00       	nop
     b78:	e2 e0       	ldi	r30, 0x02	; 2
     b7a:	f1 e0       	ldi	r31, 0x01	; 1
     b7c:	80 81       	ld	r24, Z
     b7e:	80 62       	ori	r24, 0x20	; 32
     b80:	80 83       	st	Z, r24
     b82:	80 81       	ld	r24, Z
     b84:	80 61       	ori	r24, 0x10	; 16
     b86:	80 83       	st	Z, r24
     b88:	0f 90       	pop	r0
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	08 95       	ret

00000b92 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>:
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	1f 92       	push	r1
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	d8 2e       	mov	r13, r24
     baa:	c4 2e       	mov	r12, r20
     bac:	85 e0       	ldi	r24, 0x05	; 5
     bae:	8d 15       	cp	r24, r13
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x22>
     bb2:	6f c0       	rjmp	.+222    	; 0xc92 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x100>
     bb4:	d1 10       	cpse	r13, r1
     bb6:	11 c0       	rjmp	.+34     	; 0xbda <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x48>
     bb8:	fb 01       	movw	r30, r22
     bba:	80 81       	ld	r24, Z
     bbc:	80 93 21 02 	sts	0x0221, r24
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	80 93 22 02 	sts	0x0222, r24
     bc6:	82 81       	ldd	r24, Z+2	; 0x02
     bc8:	80 93 23 02 	sts	0x0223, r24
     bcc:	83 81       	ldd	r24, Z+3	; 0x03
     bce:	80 93 24 02 	sts	0x0224, r24
     bd2:	84 81       	ldd	r24, Z+4	; 0x04
     bd4:	80 93 25 02 	sts	0x0225, r24
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x4e>
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	fd 15       	cp	r31, r13
     bde:	10 f0       	brcs	.+4      	; 0xbe4 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x52>
     be0:	45 e0       	ldi	r20, 0x05	; 5
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x54>
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	8a e0       	ldi	r24, 0x0A	; 10
     be8:	8d 0d       	add	r24, r13
     bea:	b3 de       	rcall	.-666    	; 0x952 <_ZL12set_registerhPhh>
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	be 01       	movw	r22, r28
     bf0:	6f 5f       	subi	r22, 0xFF	; 255
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	fb de       	rcall	.-522    	; 0x9ee <_ZL12get_registerhPhh>
     bf8:	ed 2c       	mov	r14, r13
     bfa:	f1 2c       	mov	r15, r1
     bfc:	01 e0       	ldi	r16, 0x01	; 1
     bfe:	10 e0       	ldi	r17, 0x00	; 0
     c00:	0d 2c       	mov	r0, r13
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x76>
     c04:	00 0f       	add	r16, r16
     c06:	11 1f       	adc	r17, r17
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x72>
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	80 2b       	or	r24, r16
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	be 01       	movw	r22, r28
     c16:	6f 5f       	subi	r22, 0xFF	; 255
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	9a de       	rcall	.-716    	; 0x952 <_ZL12set_registerhPhh>
     c1e:	c1 10       	cpse	r12, r1
     c20:	08 c0       	rjmp	.+16     	; 0xc32 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xa0>
     c22:	1f c0       	rjmp	.+62     	; 0xc62 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xd0>
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	be 01       	movw	r22, r28
     c28:	6f 5f       	subi	r22, 0xFF	; 255
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	91 de       	rcall	.-734    	; 0x952 <_ZL12set_registerhPhh>
     c30:	30 c0       	rjmp	.+96     	; 0xc92 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x100>
     c32:	80 e2       	ldi	r24, 0x20	; 32
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	be 01       	movw	r22, r28
     c3a:	6f 5f       	subi	r22, 0xFF	; 255
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	81 e1       	ldi	r24, 0x11	; 17
     c40:	8d 0d       	add	r24, r13
     c42:	87 de       	rcall	.-754    	; 0x952 <_ZL12set_registerhPhh>
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	f7 01       	movw	r30, r14
     c48:	e5 5d       	subi	r30, 0xD5	; 213
     c4a:	fd 4f       	sbci	r31, 0xFD	; 253
     c4c:	80 83       	st	Z, r24
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	be 01       	movw	r22, r28
     c52:	6f 5f       	subi	r22, 0xFF	; 255
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	ca de       	rcall	.-620    	; 0x9ee <_ZL12get_registerhPhh>
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	08 2b       	or	r16, r24
     c5e:	09 83       	std	Y+1, r16	; 0x01
     c60:	e1 cf       	rjmp	.-62     	; 0xc24 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x92>
     c62:	19 82       	std	Y+1, r1	; 0x01
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	be 01       	movw	r22, r28
     c68:	6f 5f       	subi	r22, 0xFF	; 255
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	81 e1       	ldi	r24, 0x11	; 17
     c6e:	8d 0d       	add	r24, r13
     c70:	70 de       	rcall	.-800    	; 0x952 <_ZL12set_registerhPhh>
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	f7 01       	movw	r30, r14
     c76:	e5 5d       	subi	r30, 0xD5	; 213
     c78:	fd 4f       	sbci	r31, 0xFD	; 253
     c7a:	80 83       	st	Z, r24
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	be 01       	movw	r22, r28
     c80:	6f 5f       	subi	r22, 0xFF	; 255
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	b3 de       	rcall	.-666    	; 0x9ee <_ZL12get_registerhPhh>
     c88:	00 95       	com	r16
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	08 23       	and	r16, r24
     c8e:	09 83       	std	Y+1, r16	; 0x01
     c90:	c9 cf       	rjmp	.-110    	; 0xc24 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x92>
     c92:	0f 90       	pop	r0
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	08 95       	ret

00000ca6 <_Z17Radio_Set_Tx_AddrPh>:
     ca6:	fc 01       	movw	r30, r24
     ca8:	80 81       	ld	r24, Z
     caa:	80 93 26 02 	sts	0x0226, r24
     cae:	81 81       	ldd	r24, Z+1	; 0x01
     cb0:	80 93 27 02 	sts	0x0227, r24
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	80 93 28 02 	sts	0x0228, r24
     cba:	83 81       	ldd	r24, Z+3	; 0x03
     cbc:	80 93 29 02 	sts	0x0229, r24
     cc0:	84 81       	ldd	r24, Z+4	; 0x04
     cc2:	80 93 2a 02 	sts	0x022A, r24
     cc6:	45 e0       	ldi	r20, 0x05	; 5
     cc8:	bf 01       	movw	r22, r30
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	42 ce       	rjmp	.-892    	; 0x952 <_ZL12set_registerhPhh>
     cce:	08 95       	ret

00000cd0 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>:
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	1f 92       	push	r1
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	08 2f       	mov	r16, r24
     ce0:	16 2f       	mov	r17, r22
     ce2:	64 30       	cpi	r22, 0x04	; 4
     ce4:	c8 f4       	brcc	.+50     	; 0xd18 <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x48>
     ce6:	82 30       	cpi	r24, 0x02	; 2
     ce8:	b8 f4       	brcc	.+46     	; 0xd18 <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x48>
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	be 01       	movw	r22, r28
     cee:	6f 5f       	subi	r22, 0xFF	; 255
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	86 e0       	ldi	r24, 0x06	; 6
     cf4:	7c de       	rcall	.-776    	; 0x9ee <_ZL12get_registerhPhh>
     cf6:	11 0f       	add	r17, r17
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	86 60       	ori	r24, 0x06	; 6
     cfc:	18 23       	and	r17, r24
     cfe:	00 23       	and	r16, r16
     d00:	19 f0       	breq	.+6      	; 0xd08 <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x38>
     d02:	18 60       	ori	r17, 0x08	; 8
     d04:	19 83       	std	Y+1, r17	; 0x01
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x3c>
     d08:	17 7f       	andi	r17, 0xF7	; 247
     d0a:	19 83       	std	Y+1, r17	; 0x01
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	be 01       	movw	r22, r28
     d10:	6f 5f       	subi	r22, 0xFF	; 255
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	86 e0       	ldi	r24, 0x06	; 6
     d16:	1d de       	rcall	.-966    	; 0x952 <_ZL12set_registerhPhh>
     d18:	0f 90       	pop	r0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	08 95       	ret

00000d24 <_Z14Radio_TransmitP3_rp14_radio_tx_wait>:
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	1f 92       	push	r1
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	7c 01       	movw	r14, r24
     d3a:	d6 2e       	mov	r13, r22
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 93 71 02 	sts	0x0271, r24
     d42:	e2 e0       	ldi	r30, 0x02	; 2
     d44:	f1 e0       	ldi	r31, 0x01	; 1
     d46:	80 81       	ld	r24, Z
     d48:	8f 7d       	andi	r24, 0xDF	; 223
     d4a:	80 83       	st	Z, r24
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	be 01       	movw	r22, r28
     d50:	6f 5f       	subi	r22, 0xFF	; 255
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	4b de       	rcall	.-874    	; 0x9ee <_ZL12get_registerhPhh>
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	80 ff       	sbrs	r24, 0
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x62>
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	be 01       	movw	r22, r28
     d66:	6f 5f       	subi	r22, 0xFF	; 255
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	f2 dd       	rcall	.-1052   	; 0x952 <_ZL12set_registerhPhh>
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x4e>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x54>
     d78:	00 00       	nop
     d7a:	e3 e0       	ldi	r30, 0x03	; 3
     d7c:	f1 e0       	ldi	r31, 0x01	; 1
     d7e:	31 97       	sbiw	r30, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x5a>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x60>
     d84:	00 00       	nop
     d86:	45 e0       	ldi	r20, 0x05	; 5
     d88:	66 e2       	ldi	r22, 0x26	; 38
     d8a:	72 e0       	ldi	r23, 0x02	; 2
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	e1 dd       	rcall	.-1086   	; 0x952 <_ZL12set_registerhPhh>
     d90:	02 e0       	ldi	r16, 0x02	; 2
     d92:	11 e0       	ldi	r17, 0x01	; 1
     d94:	f8 01       	movw	r30, r16
     d96:	80 81       	ld	r24, Z
     d98:	88 60       	ori	r24, 0x08	; 8
     d9a:	80 83       	st	Z, r24
     d9c:	20 e2       	ldi	r18, 0x20	; 32
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	b7 01       	movw	r22, r14
     da4:	80 ea       	ldi	r24, 0xA0	; 160
     da6:	fe dd       	rcall	.-1028   	; 0x9a4 <_ZL16send_instructionhPhS_h>
     da8:	f8 01       	movw	r30, r16
     daa:	80 81       	ld	r24, Z
     dac:	80 62       	ori	r24, 0x20	; 32
     dae:	80 83       	st	Z, r24
     db0:	d1 10       	cpse	r13, r1
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x9e>
     db4:	80 91 71 02 	lds	r24, 0x0271
     db8:	81 11       	cpse	r24, r1
     dba:	fc cf       	rjmp	.-8      	; 0xdb4 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x90>
     dbc:	80 91 1e 02 	lds	r24, 0x021E
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0xa0>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0f 90       	pop	r0
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	08 95       	ret

00000dd6 <_Z13Radio_ReceiveP3_rp>:
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
     ddc:	10 92 71 02 	sts	0x0271, r1
     de0:	e2 e0       	ldi	r30, 0x02	; 2
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	80 81       	ld	r24, Z
     de6:	8f 7d       	andi	r24, 0xDF	; 223
     de8:	80 83       	st	Z, r24
     dea:	a4 dd       	rcall	.-1208   	; 0x934 <_ZL10get_statusv>
     dec:	8e 70       	andi	r24, 0x0E	; 14
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	35 95       	asr	r19
     df4:	27 95       	ror	r18
     df6:	f9 01       	movw	r30, r18
     df8:	ff 27       	eor	r31, r31
     dfa:	df 01       	movw	r26, r30
     dfc:	a5 5d       	subi	r26, 0xD5	; 213
     dfe:	bd 4f       	sbci	r27, 0xFD	; 253
     e00:	8c 91       	ld	r24, X
     e02:	81 32       	cpi	r24, 0x21	; 33
     e04:	70 f4       	brcc	.+28     	; 0xe22 <_Z13Radio_ReceiveP3_rp+0x4c>
     e06:	27 30       	cpi	r18, 0x07	; 7
     e08:	71 f0       	breq	.+28     	; 0xe26 <_Z13Radio_ReceiveP3_rp+0x50>
     e0a:	fd 01       	movw	r30, r26
     e0c:	20 81       	ld	r18, Z
     e0e:	ae 01       	movw	r20, r28
     e10:	be 01       	movw	r22, r28
     e12:	81 e6       	ldi	r24, 0x61	; 97
     e14:	c7 dd       	rcall	.-1138   	; 0x9a4 <_ZL16send_instructionhPhS_h>
     e16:	8e dd       	rcall	.-1252   	; 0x934 <_ZL10get_statusv>
     e18:	8e 70       	andi	r24, 0x0E	; 14
     e1a:	8e 30       	cpi	r24, 0x0E	; 14
     e1c:	31 f0       	breq	.+12     	; 0xe2a <_Z13Radio_ReceiveP3_rp+0x54>
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <_Z13Radio_ReceiveP3_rp+0x56>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <_Z13Radio_ReceiveP3_rp+0x56>
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <_Z13Radio_ReceiveP3_rp+0x56>
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	e2 e0       	ldi	r30, 0x02	; 2
     e2e:	f1 e0       	ldi	r31, 0x01	; 1
     e30:	90 81       	ld	r25, Z
     e32:	90 62       	ori	r25, 0x20	; 32
     e34:	90 83       	st	Z, r25
     e36:	10 92 71 02 	sts	0x0271, r1
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <__vector_5>:
}


// Interrupt handler
ISR(INT4_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	0b b6       	in	r0, 0x3b	; 59
     e4c:	0f 92       	push	r0
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

	DEBUG_2_LOW;
     e70:	e2 e0       	ldi	r30, 0x02	; 2
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	80 81       	ld	r24, Z
     e76:	8f 7e       	andi	r24, 0xEF	; 239
     e78:	80 83       	st	Z, r24
    CE_LOW();
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 7d       	andi	r24, 0xDF	; 223
     e7e:	80 83       	st	Z, r24

    status = get_status();
     e80:	59 dd       	rcall	.-1358   	; 0x934 <_ZL10get_statusv>
     e82:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR))
     e84:	86 ff       	sbrs	r24, 6
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <__vector_5+0x4e>
    {
    	pipe_number =  (status & 0xE) >> 1;
     e88:	8e 70       	andi	r24, 0x0E	; 14
    	radio_rxhandler(pipe_number);
     e8a:	86 95       	lsr	r24
     e8c:	90 d9       	rcall	.-3296   	; 0x1ae <_Z15radio_rxhandlerh>
    }
    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS))
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	85 ff       	sbrs	r24, 5
     e92:	1b c0       	rjmp	.+54     	; 0xeca <__vector_5+0x8a>
    {
        // if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
     e94:	10 92 71 02 	sts	0x0271, r1
        reset_pipe0_address();
     e98:	7b dd       	rcall	.-1290   	; 0x990 <_ZL19reset_pipe0_addressv>
        set_rx_mode();
     e9a:	d6 dd       	rcall	.-1108   	; 0xa48 <_ZL11set_rx_modev>

    	// indicate in the history that a packet was transmitted successfully by appending a 1.
    	tx_history <<= 1;
     e9c:	80 91 1f 02 	lds	r24, 0x021F
     ea0:	90 91 20 02 	lds	r25, 0x0220
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	90 93 20 02 	sts	0x0220, r25
     eac:	80 93 1f 02 	sts	0x021F, r24
    	tx_history |= 1;
     eb0:	80 91 1f 02 	lds	r24, 0x021F
     eb4:	90 91 20 02 	lds	r25, 0x0220
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	90 93 20 02 	sts	0x0220, r25
     ebe:	80 93 1f 02 	sts	0x021F, r24

    	tx_last_status = RADIO_TX_SUCCESS;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 1e 02 	sts	0x021E, r24
     ec8:	19 c0       	rjmp	.+50     	; 0xefc <__vector_5+0xbc>
    }
    else if (status & _BV(MAX_RT))
     eca:	84 ff       	sbrs	r24, 4
     ecc:	17 c0       	rjmp	.+46     	; 0xefc <__vector_5+0xbc>
    {
        send_instruction(FLUSH_TX, NULL, NULL, 0);
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	81 ee       	ldi	r24, 0xE1	; 225
     eda:	64 dd       	rcall	.-1336   	; 0x9a4 <_ZL16send_instructionhPhS_h>

    	transmit_lock = 0;
     edc:	10 92 71 02 	sts	0x0271, r1
    	reset_pipe0_address();
     ee0:	57 dd       	rcall	.-1362   	; 0x990 <_ZL19reset_pipe0_addressv>
		set_rx_mode();
     ee2:	b2 dd       	rcall	.-1180   	; 0xa48 <_ZL11set_rx_modev>
    	// indicate in the history that a packet was dropped by appending a 0.
    	tx_history <<= 1;
     ee4:	80 91 1f 02 	lds	r24, 0x021F
     ee8:	90 91 20 02 	lds	r25, 0x0220
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	90 93 20 02 	sts	0x0220, r25
     ef4:	80 93 1f 02 	sts	0x021F, r24

    	tx_last_status = RADIO_TX_MAX_RT;
     ef8:	10 92 1e 02 	sts	0x021E, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     efc:	80 e7       	ldi	r24, 0x70	; 112
     efe:	89 83       	std	Y+1, r24	; 0x01
	set_register(STATUS, &status, 1);
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	87 e0       	ldi	r24, 0x07	; 7
     f0a:	23 dd       	rcall	.-1466   	; 0x952 <_ZL12set_registerhPhh>
	DEBUG_2_HIGH;
     f0c:	e2 e0       	ldi	r30, 0x02	; 2
     f0e:	f1 e0       	ldi	r31, 0x01	; 1
     f10:	80 81       	ld	r24, Z
     f12:	80 61       	ori	r24, 0x10	; 16
     f14:	80 83       	st	Z, r24

    CE_HIGH();
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	80 83       	st	Z, r24
}
     f1c:	0f 90       	pop	r0
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	0f 90       	pop	r0
     f3c:	0b be       	out	0x3b, r0	; 59
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <_Z8SPI_Initv>:
	// The DDR operations are pretty fragile and doing this less awkwardly breaks SPI.  I don't care enough
	// to figure out why right now.  Note that SPI_SS is the actual SPI port's SS pin, which is not necessarily
	// the SS pin that's used for a given slave.  Anything that uses this driver must handle its own slave selection.
	// It must set its SS pin direction to output, set the pin low before doing an SPI operation, and set it high
	// when the SPI operation is complete.
    SPI_DDR &= ~(_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SS)|_BV(SPI_SCK));
     f48:	84 b1       	in	r24, 0x04	; 4
     f4a:	80 7f       	andi	r24, 0xF0	; 240
     f4c:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= (_BV(SPI_MOSI) | _BV(SPI_SS) | _BV(SPI_SCK));
     f4e:	84 b1       	in	r24, 0x04	; 4
     f50:	87 60       	ori	r24, 0x07	; 7
     f52:	84 b9       	out	0x04, r24	; 4
	 * SPR1 | SPR0 - Determines SCK frequency along with the SPI2X bit in SPSR.  See Table 17-4 in hardware manual [p178].
	 * bit 0
	 */

    // Set the AT90's SS pin high during config (this disables the Flash RAM or something)
    SPI_PORT |= _BV(SPI_SS);
     f54:	28 9a       	sbi	0x05, 0	; 5

	SPCR = _BV(SPE) | _BV(MSTR);	// enable SPI, set as master, set prescaler to f(osc)/4
     f56:	80 e5       	ldi	r24, 0x50	; 80
     f58:	8c bd       	out	0x2c, r24	; 44

	SPSR = _BV(SPI2X);							// Double SCK to f(osc)/2 (4 MHz)
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	8d bd       	out	0x2d, r24	; 45

	SPI_PORT &= ~_BV(SPI_SS);
     f5e:	28 98       	cbi	0x05, 0	; 5
     f60:	08 95       	ret

00000f62 <_Z19SPI_ReadWrite_BlockPhS_h>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
     f62:	44 23       	and	r20, r20
     f64:	81 f0       	breq	.+32     	; 0xf86 <_Z19SPI_ReadWrite_BlockPhS_h+0x24>
     f66:	28 2f       	mov	r18, r24
     f68:	a6 2f       	mov	r26, r22
     f6a:	b7 2f       	mov	r27, r23
     f6c:	e8 2f       	mov	r30, r24
     f6e:	f9 2f       	mov	r31, r25
          SPDR = data[i];
     f70:	81 91       	ld	r24, Z+
     f72:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
     f74:	0d b4       	in	r0, 0x2d	; 45
     f76:	07 fe       	sbrs	r0, 7
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <_Z19SPI_ReadWrite_BlockPhS_h+0x12>
          buffer[i] = SPDR;
     f7a:	8e b5       	in	r24, 0x2e	; 46
     f7c:	8d 93       	st	X+, r24
     f7e:	8e 2f       	mov	r24, r30
     f80:	82 1b       	sub	r24, r18
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
     f82:	84 17       	cp	r24, r20
     f84:	a8 f3       	brcs	.-22     	; 0xf70 <_Z19SPI_ReadWrite_BlockPhS_h+0xe>
     f86:	08 95       	ret

00000f88 <_Z15SPI_Write_BlockPhh>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
     f88:	66 23       	and	r22, r22
     f8a:	61 f0       	breq	.+24     	; 0xfa4 <_Z15SPI_Write_BlockPhh+0x1c>
     f8c:	28 2f       	mov	r18, r24
     f8e:	e8 2f       	mov	r30, r24
     f90:	f9 2f       	mov	r31, r25
          SPDR = data[i];
     f92:	81 91       	ld	r24, Z+
     f94:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
     f96:	0d b4       	in	r0, 0x2d	; 45
     f98:	07 fe       	sbrs	r0, 7
     f9a:	fd cf       	rjmp	.-6      	; 0xf96 <_Z15SPI_Write_BlockPhh+0xe>
     f9c:	8e 2f       	mov	r24, r30
     f9e:	82 1b       	sub	r24, r18
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
     fa0:	86 17       	cp	r24, r22
     fa2:	b8 f3       	brcs	.-18     	; 0xf92 <_Z15SPI_Write_BlockPhh+0xa>
     fa4:	08 95       	ret

00000fa6 <_Z14SPI_Write_Byteh>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
     fa6:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
     fa8:	0d b4       	in	r0, 0x2d	; 45
     faa:	07 fe       	sbrs	r0, 7
     fac:	fd cf       	rjmp	.-6      	; 0xfa8 <_Z14SPI_Write_Byteh+0x2>
    return SPDR;
     fae:	8e b5       	in	r24, 0x2e	; 46
}
     fb0:	08 95       	ret

00000fb2 <_Z23get_roomba_bump_sensorsv>:
 * Created: 4/5/2015 11:34:12 PM
 *  Author: d
 */ 
#include "roomba_bump_detection.h"

uint8_t get_roomba_bump_sensors() {
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	a6 97       	sbiw	r28, 0x26	; 38
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
	roomba_sensor_data_t sensor_packet;
	Roomba_UpdateSensorPacket(EXTERNAL, &sensor_packet);
     fc6:	be 01       	movw	r22, r28
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	4d d0       	rcall	.+154    	; 0x106a <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t>
	return sensor_packet.bumps_wheeldrops;
}
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	a6 96       	adiw	r28, 0x26	; 38
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <_Z13sensor_detectv>:

uint8_t sensor_detect() {
	uint8_t roomba_bump_sensors = get_roomba_bump_sensors();
     fe4:	e6 df       	rcall	.-52     	; 0xfb2 <_Z23get_roomba_bump_sensorsv>
	if (roomba_bump_sensors && BUMP_LEFT) {
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	81 11       	cpse	r24, r1
     fea:	01 c0       	rjmp	.+2      	; 0xfee <_Z13sensor_detectv+0xa>
     fec:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	} else if (roomba_bump_sensors && BUMP_RIGHT) {
		return 2;
	}
	return 0;
     fee:	89 2f       	mov	r24, r25
     ff0:	08 95       	ret

00000ff2 <_Z11Roomba_Initv>:
	Roomba_Send_Byte(SAFE);
	_delay_ms(20);
}

void Roomba_Finish() {
	Roomba_Send_Byte(STOP);
     ff2:	51 9a       	sbi	0x0a, 1	; 10
     ff4:	59 98       	cbi	0x0b, 1	; 11
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_Z16Roomba_UART_Init9_uart_bps>
     ffc:	80 e8       	ldi	r24, 0x80	; 128
     ffe:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_Z16Roomba_Send_Byteh>
    1002:	2f ef       	ldi	r18, 0xFF	; 255
    1004:	89 ef       	ldi	r24, 0xF9	; 249
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	21 50       	subi	r18, 0x01	; 1
    100a:	80 40       	sbci	r24, 0x00	; 0
    100c:	90 40       	sbci	r25, 0x00	; 0
    100e:	e1 f7       	brne	.-8      	; 0x1008 <_Z11Roomba_Initv+0x16>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <_Z11Roomba_Initv+0x20>
    1012:	00 00       	nop
    1014:	81 e8       	ldi	r24, 0x81	; 129
    1016:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_Z16Roomba_Send_Byteh>
    101a:	87 e0       	ldi	r24, 0x07	; 7
    101c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_Z16Roomba_Send_Byteh>
    1020:	2f ef       	ldi	r18, 0xFF	; 255
    1022:	81 ee       	ldi	r24, 0xE1	; 225
    1024:	94 e0       	ldi	r25, 0x04	; 4
    1026:	21 50       	subi	r18, 0x01	; 1
    1028:	80 40       	sbci	r24, 0x00	; 0
    102a:	90 40       	sbci	r25, 0x00	; 0
    102c:	e1 f7       	brne	.-8      	; 0x1026 <_Z11Roomba_Initv+0x34>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <_Z11Roomba_Initv+0x3e>
    1030:	00 00       	nop
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_Z16Roomba_UART_Init9_uart_bps>
    1038:	80 e8       	ldi	r24, 0x80	; 128
    103a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_Z16Roomba_Send_Byteh>
    103e:	2f ef       	ldi	r18, 0xFF	; 255
    1040:	89 ef       	ldi	r24, 0xF9	; 249
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	80 40       	sbci	r24, 0x00	; 0
    1048:	90 40       	sbci	r25, 0x00	; 0
    104a:	e1 f7       	brne	.-8      	; 0x1044 <_Z11Roomba_Initv+0x52>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <_Z11Roomba_Initv+0x5c>
    104e:	00 00       	nop
    1050:	83 e8       	ldi	r24, 0x83	; 131
    1052:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_Z16Roomba_Send_Byteh>
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	89 ef       	ldi	r24, 0xF9	; 249
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	21 50       	subi	r18, 0x01	; 1
    105e:	80 40       	sbci	r24, 0x00	; 0
    1060:	90 40       	sbci	r25, 0x00	; 0
    1062:	e1 f7       	brne	.-8      	; 0x105c <_Z11Roomba_Initv+0x6a>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <_Z11Roomba_Initv+0x74>
    1066:	00 00       	nop
    1068:	08 95       	ret

0000106a <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t>:
}

void Roomba_UpdateSensorPacket(ROOMBA_SENSOR_GROUP group, roomba_sensor_data_t* sensor_packet)
{
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	18 2f       	mov	r17, r24
    1072:	eb 01       	movw	r28, r22
	Roomba_Send_Byte(SENSORS);
    1074:	8e e8       	ldi	r24, 0x8E	; 142
    1076:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(group);
    107a:	81 2f       	mov	r24, r17
    107c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <_Z16Roomba_Send_Byteh>
	switch(group)
    1080:	12 30       	cpi	r17, 0x02	; 2
    1082:	09 f4       	brne	.+2      	; 0x1086 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1c>
    1084:	42 c0       	rjmp	.+132    	; 0x110a <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0xa0>
    1086:	18 f4       	brcc	.+6      	; 0x108e <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x24>
    1088:	11 30       	cpi	r17, 0x01	; 1
    108a:	41 f0       	breq	.+16     	; 0x109c <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x32>
    108c:	c8 c0       	rjmp	.+400    	; 0x121e <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1b4>
    108e:	13 30       	cpi	r17, 0x03	; 3
    1090:	09 f4       	brne	.+2      	; 0x1094 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x2a>
    1092:	5e c0       	rjmp	.+188    	; 0x1150 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0xe6>
    1094:	1a 36       	cpi	r17, 0x6A	; 106
    1096:	09 f4       	brne	.+2      	; 0x109a <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x30>
    1098:	92 c0       	rjmp	.+292    	; 0x11be <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x154>
    109a:	c1 c0       	rjmp	.+386    	; 0x121e <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1b4>
	{
	case EXTERNAL:
		// environment sensors
		while (uart_bytes_received() != 10);
    109c:	0e 94 b2 10 	call	0x2164	; 0x2164 <_Z19uart_bytes_receivedv>
    10a0:	8a 30       	cpi	r24, 0x0A	; 10
    10a2:	e1 f7       	brne	.-8      	; 0x109c <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x32>
		sensor_packet->bumps_wheeldrops = uart_get_byte(0);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10ac:	88 83       	st	Y, r24
		sensor_packet->wall = uart_get_byte(1);
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10b6:	89 83       	std	Y+1, r24	; 0x01
		sensor_packet->cliff_left = uart_get_byte(2);
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10c0:	8a 83       	std	Y+2, r24	; 0x02
		sensor_packet->cliff_front_left = uart_get_byte(3);
    10c2:	83 e0       	ldi	r24, 0x03	; 3
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10ca:	8b 83       	std	Y+3, r24	; 0x03
		sensor_packet->cliff_front_right = uart_get_byte(4);
    10cc:	84 e0       	ldi	r24, 0x04	; 4
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10d4:	8c 83       	std	Y+4, r24	; 0x04
		sensor_packet->cliff_right = uart_get_byte(5);
    10d6:	85 e0       	ldi	r24, 0x05	; 5
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10de:	8d 83       	std	Y+5, r24	; 0x05
		sensor_packet->virtual_wall = uart_get_byte(6);
    10e0:	86 e0       	ldi	r24, 0x06	; 6
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10e8:	8e 83       	std	Y+6, r24	; 0x06
		sensor_packet->motor_overcurrents = uart_get_byte(7);
    10ea:	87 e0       	ldi	r24, 0x07	; 7
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10f2:	8f 83       	std	Y+7, r24	; 0x07
		sensor_packet->dirt_left = uart_get_byte(8);
    10f4:	88 e0       	ldi	r24, 0x08	; 8
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    10fc:	88 87       	std	Y+8, r24	; 0x08
		sensor_packet->dirt_right = uart_get_byte(9);
    10fe:	89 e0       	ldi	r24, 0x09	; 9
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    1106:	89 87       	std	Y+9, r24	; 0x09
		break;
    1108:	8a c0       	rjmp	.+276    	; 0x121e <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1b4>
	case CHASSIS:
		// chassis sensors
		while (uart_bytes_received() != 6);
    110a:	0e 94 b2 10 	call	0x2164	; 0x2164 <_Z19uart_bytes_receivedv>
    110e:	86 30       	cpi	r24, 0x06	; 6
    1110:	e1 f7       	brne	.-8      	; 0x110a <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0xa0>
		sensor_packet->remote_opcode = uart_get_byte(0);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    111a:	8a 87       	std	Y+10, r24	; 0x0a
		sensor_packet->buttons = uart_get_byte(1);
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    1124:	8b 87       	std	Y+11, r24	; 0x0b
		sensor_packet->distance.bytes.high_byte = uart_get_byte(2);
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    112e:	8d 87       	std	Y+13, r24	; 0x0d
		sensor_packet->distance.bytes.low_byte = uart_get_byte(3);
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    1138:	8c 87       	std	Y+12, r24	; 0x0c
		sensor_packet->angle.bytes.high_byte = uart_get_byte(4);
    113a:	84 e0       	ldi	r24, 0x04	; 4
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    1142:	8f 87       	std	Y+15, r24	; 0x0f
		sensor_packet->angle.bytes.low_byte = uart_get_byte(5);
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    114c:	8e 87       	std	Y+14, r24	; 0x0e
		break;
    114e:	67 c0       	rjmp	.+206    	; 0x121e <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1b4>
	case INTERNAL:
		// internal sensors
		
		while (uart_bytes_received() != 10);
    1150:	0e 94 b2 10 	call	0x2164	; 0x2164 <_Z19uart_bytes_receivedv>
    1154:	8a 30       	cpi	r24, 0x0A	; 10
    1156:	e1 f7       	brne	.-8      	; 0x1150 <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0xe6>
		sensor_packet->charging_state = uart_get_byte(0);
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    1160:	88 8b       	std	Y+16, r24	; 0x10
		sensor_packet->voltage.bytes.high_byte = uart_get_byte(1);
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    116a:	8a 8b       	std	Y+18, r24	; 0x12
		sensor_packet->voltage.bytes.low_byte = uart_get_byte(2);
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    1174:	89 8b       	std	Y+17, r24	; 0x11
		sensor_packet->current.bytes.high_byte = uart_get_byte(3);
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    117e:	8c 8b       	std	Y+20, r24	; 0x14
		sensor_packet->current.bytes.low_byte = uart_get_byte(4);
    1180:	84 e0       	ldi	r24, 0x04	; 4
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    1188:	8b 8b       	std	Y+19, r24	; 0x13
		sensor_packet->temperature = uart_get_byte(5);
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    1192:	8d 8b       	std	Y+21, r24	; 0x15
		sensor_packet->charge.bytes.high_byte = uart_get_byte(6);
    1194:	86 e0       	ldi	r24, 0x06	; 6
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    119c:	8f 8b       	std	Y+23, r24	; 0x17
		sensor_packet->charge.bytes.low_byte = uart_get_byte(7);
    119e:	87 e0       	ldi	r24, 0x07	; 7
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    11a6:	8e 8b       	std	Y+22, r24	; 0x16
		sensor_packet->capacity.bytes.high_byte = uart_get_byte(8);
    11a8:	88 e0       	ldi	r24, 0x08	; 8
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    11b0:	89 8f       	std	Y+25, r24	; 0x19
		sensor_packet->capacity.bytes.low_byte = uart_get_byte(9);
    11b2:	89 e0       	ldi	r24, 0x09	; 9
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 de 10 	call	0x21bc	; 0x21bc <_Z13uart_get_bytei>
    11ba:	88 8f       	std	Y+24, r24	; 0x18
		break;
    11bc:	30 c0       	rjmp	.+96     	; 0x121e <_Z25Roomba_UpdateSensorPacket4_rsgP20roomba_sensor_data_t+0x1b4>
	case LIGHT_BUMPERS:
		sensor_packet->light_left.bytes.high_byte = uart_get_byte(0);
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	fc d7       	rcall	.+4088   	; 0x21bc <_Z13uart_get_bytei>
    11c4:	8b 8f       	std	Y+27, r24	; 0x1b
		sensor_packet->light_left.bytes.low_byte = uart_get_byte(1);
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	f8 d7       	rcall	.+4080   	; 0x21bc <_Z13uart_get_bytei>
    11cc:	8a 8f       	std	Y+26, r24	; 0x1a
		sensor_packet->light_front_left.bytes.high_byte = uart_get_byte(2);
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	f4 d7       	rcall	.+4072   	; 0x21bc <_Z13uart_get_bytei>
    11d4:	8d 8f       	std	Y+29, r24	; 0x1d
		sensor_packet->light_front_left.bytes.low_byte = uart_get_byte(3);
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	f0 d7       	rcall	.+4064   	; 0x21bc <_Z13uart_get_bytei>
    11dc:	8c 8f       	std	Y+28, r24	; 0x1c
		sensor_packet->light_center_left.bytes.high_byte = uart_get_byte(4);
    11de:	84 e0       	ldi	r24, 0x04	; 4
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	ec d7       	rcall	.+4056   	; 0x21bc <_Z13uart_get_bytei>
    11e4:	8f 8f       	std	Y+31, r24	; 0x1f
		sensor_packet->light_center_left.bytes.low_byte = uart_get_byte(5);
    11e6:	85 e0       	ldi	r24, 0x05	; 5
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	e8 d7       	rcall	.+4048   	; 0x21bc <_Z13uart_get_bytei>
    11ec:	8e 8f       	std	Y+30, r24	; 0x1e
		sensor_packet->light_center_right.bytes.high_byte = uart_get_byte(6);
    11ee:	86 e0       	ldi	r24, 0x06	; 6
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	e4 d7       	rcall	.+4040   	; 0x21bc <_Z13uart_get_bytei>
    11f4:	89 a3       	std	Y+33, r24	; 0x21
		sensor_packet->light_center_right.bytes.low_byte = uart_get_byte(7);
    11f6:	87 e0       	ldi	r24, 0x07	; 7
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	e0 d7       	rcall	.+4032   	; 0x21bc <_Z13uart_get_bytei>
    11fc:	88 a3       	std	Y+32, r24	; 0x20
		sensor_packet->light_front_right.bytes.high_byte = uart_get_byte(8);
    11fe:	88 e0       	ldi	r24, 0x08	; 8
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	dc d7       	rcall	.+4024   	; 0x21bc <_Z13uart_get_bytei>
    1204:	8b a3       	std	Y+35, r24	; 0x23
		sensor_packet->light_front_right.bytes.low_byte = uart_get_byte(9);
    1206:	89 e0       	ldi	r24, 0x09	; 9
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	d8 d7       	rcall	.+4016   	; 0x21bc <_Z13uart_get_bytei>
    120c:	8a a3       	std	Y+34, r24	; 0x22
		sensor_packet->light_right.bytes.high_byte = uart_get_byte(10);
    120e:	8a e0       	ldi	r24, 0x0A	; 10
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	d4 d7       	rcall	.+4008   	; 0x21bc <_Z13uart_get_bytei>
    1214:	8d a3       	std	Y+37, r24	; 0x25
		sensor_packet->light_right.bytes.low_byte = uart_get_byte(11);
    1216:	8b e0       	ldi	r24, 0x0B	; 11
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	d0 d7       	rcall	.+4000   	; 0x21bc <_Z13uart_get_bytei>
    121c:	8c a3       	std	Y+36, r24	; 0x24
		break;
	}
	uart_reset_receive();
    121e:	a5 d7       	rcall	.+3914   	; 0x216a <_Z18uart_reset_receivev>
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	08 95       	ret

00001228 <_Z12Roomba_Driveii>:

//Used to stop the Roomba when it gets shot.
void Roomba_Drive( int16_t velocity, int16_t radius )
{
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	18 2f       	mov	r17, r24
    1232:	09 2f       	mov	r16, r25
    1234:	c6 2f       	mov	r28, r22
    1236:	d7 2f       	mov	r29, r23
	Roomba_Send_Byte(DRIVE);
    1238:	89 e8       	ldi	r24, 0x89	; 137
    123a:	4c d7       	rcall	.+3736   	; 0x20d4 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(HIGH_BYTE(velocity));
    123c:	80 2f       	mov	r24, r16
    123e:	4a d7       	rcall	.+3732   	; 0x20d4 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(LOW_BYTE(velocity));
    1240:	81 2f       	mov	r24, r17
    1242:	48 d7       	rcall	.+3728   	; 0x20d4 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(HIGH_BYTE(radius));
    1244:	8d 2f       	mov	r24, r29
    1246:	46 d7       	rcall	.+3724   	; 0x20d4 <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(LOW_BYTE(radius));
    1248:	8c 2f       	mov	r24, r28
    124a:	44 d7       	rcall	.+3720   	; 0x20d4 <_Z16Roomba_Send_Byteh>
}
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	08 95       	ret

00001256 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>:
    for(i = 0;i < song->len; ++i){
        song_len += song->notes[i][1];
    }
    // return (song_len*64)/1000;
    return ((song_len*100)/64)*10;
}
    1256:	fc 01       	movw	r30, r24
    1258:	51 81       	ldd	r21, Z+1	; 0x01
    125a:	50 31       	cpi	r21, 0x10	; 16
    125c:	90 f4       	brcc	.+36     	; 0x1282 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh+0x2c>
    125e:	25 2f       	mov	r18, r21
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	f9 01       	movw	r30, r18
    1264:	31 96       	adiw	r30, 0x01	; 1
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	e8 0f       	add	r30, r24
    126c:	f9 1f       	adc	r31, r25
    126e:	60 83       	st	Z, r22
    1270:	f9 01       	movw	r30, r18
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	e8 0f       	add	r30, r24
    1278:	f9 1f       	adc	r31, r25
    127a:	43 83       	std	Z+3, r20	; 0x03
    127c:	5f 5f       	subi	r21, 0xFF	; 255
    127e:	fc 01       	movw	r30, r24
    1280:	51 83       	std	Z+1, r21	; 0x01
    1282:	08 95       	ret

00001284 <_Z22Roomba_Music_load_songP20_roomba_music_song_t>:

/*
*   Load the given roomba song into the roomba.
*/
void Roomba_Music_load_song(roomba_music_song_t* song){
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	8c 01       	movw	r16, r24
    Roomba_Send_Byte(ROOMBA_MUSIC_LOAD_SONG_OPCODE);
    1290:	8c e8       	ldi	r24, 0x8C	; 140
    1292:	20 d7       	rcall	.+3648   	; 0x20d4 <_Z16Roomba_Send_Byteh>
    Roomba_Send_Byte(song->song_num);
    1294:	f8 01       	movw	r30, r16
    1296:	80 81       	ld	r24, Z
    1298:	1d d7       	rcall	.+3642   	; 0x20d4 <_Z16Roomba_Send_Byteh>
    Roomba_Send_Byte(song->len);
    129a:	f8 01       	movw	r30, r16
    129c:	81 81       	ldd	r24, Z+1	; 0x01
    129e:	1a d7       	rcall	.+3636   	; 0x20d4 <_Z16Roomba_Send_Byteh>
    int8_t i = 0;
    for(i = 0;i < song->len;++i){
    12a0:	f8 01       	movw	r30, r16
    12a2:	81 81       	ldd	r24, Z+1	; 0x01
    12a4:	88 23       	and	r24, r24
    12a6:	e1 f0       	breq	.+56     	; 0x12e0 <_Z22Roomba_Music_load_songP20_roomba_music_song_t+0x5c>
    12a8:	c0 e0       	ldi	r28, 0x00	; 0
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	f1 2c       	mov	r15, r1
        Roomba_Send_Byte(song->notes[i][0]);
    12ae:	fe 01       	movw	r30, r28
    12b0:	31 96       	adiw	r30, 0x01	; 1
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	e0 0f       	add	r30, r16
    12b8:	f1 1f       	adc	r31, r17
    12ba:	80 81       	ld	r24, Z
    12bc:	0b d7       	rcall	.+3606   	; 0x20d4 <_Z16Roomba_Send_Byteh>
        Roomba_Send_Byte(song->notes[i][1]);
    12be:	cc 0f       	add	r28, r28
    12c0:	dd 1f       	adc	r29, r29
    12c2:	c0 0f       	add	r28, r16
    12c4:	d1 1f       	adc	r29, r17
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	05 d7       	rcall	.+3594   	; 0x20d4 <_Z16Roomba_Send_Byteh>
void Roomba_Music_load_song(roomba_music_song_t* song){
    Roomba_Send_Byte(ROOMBA_MUSIC_LOAD_SONG_OPCODE);
    Roomba_Send_Byte(song->song_num);
    Roomba_Send_Byte(song->len);
    int8_t i = 0;
    for(i = 0;i < song->len;++i){
    12ca:	f3 94       	inc	r15
    12cc:	cf 2d       	mov	r28, r15
    12ce:	dd 27       	eor	r29, r29
    12d0:	c7 fd       	sbrc	r28, 7
    12d2:	d0 95       	com	r29
    12d4:	f8 01       	movw	r30, r16
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	c8 17       	cp	r28, r24
    12dc:	d9 07       	cpc	r29, r25
    12de:	3c f3       	brlt	.-50     	; 0x12ae <_Z22Roomba_Music_load_songP20_roomba_music_song_t+0x2a>
        Roomba_Send_Byte(song->notes[i][0]);
        Roomba_Send_Byte(song->notes[i][1]);
    }
}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	08 95       	ret

000012ec <_Z22Roomba_Music_play_songh>:

void Roomba_Music_play_song(uint8_t song_num)
{
    12ec:	cf 93       	push	r28
    12ee:	c8 2f       	mov	r28, r24
    Roomba_Send_Byte(ROOMBA_MUSIC_PLAY_SONG_OPCODE);
    12f0:	8d e8       	ldi	r24, 0x8D	; 141
    12f2:	f0 d6       	rcall	.+3552   	; 0x20d4 <_Z16Roomba_Send_Byteh>
    Roomba_Send_Byte(song_num);
    12f4:	8c 2f       	mov	r24, r28
    12f6:	ee d6       	rcall	.+3548   	; 0x20d4 <_Z16Roomba_Send_Byteh>
}
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <_ZL4idlev>:

uint16_t Now()
{
//    return ticks_from_start * TICK + (TCNT1 + HALF_MS) / (CYCLES_PER_MS)
    return ticks_from_start * TICK + ((TCNT1 - current_timer_val)/(F_CPU/TIMER_PRESCALER/1000));
}
    12fc:	ff cf       	rjmp	.-2      	; 0x12fc <_ZL4idlev>

000012fe <_ZL11exit_kernelv>:
    12fe:	ff 93       	push	r31
    1300:	fc b7       	in	r31, 0x3c	; 60
    1302:	ff 93       	push	r31
    1304:	ff b7       	in	r31, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	ff 93       	push	r31
    130a:	ef 93       	push	r30
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	bf 93       	push	r27
    1312:	af 93       	push	r26
    1314:	9f 93       	push	r25
    1316:	8f 93       	push	r24
    1318:	7f 93       	push	r23
    131a:	6f 93       	push	r22
    131c:	5f 93       	push	r21
    131e:	4f 93       	push	r20
    1320:	3f 93       	push	r19
    1322:	2f 93       	push	r18
    1324:	1f 93       	push	r17
    1326:	0f 93       	push	r16
    1328:	ff 92       	push	r15
    132a:	ef 92       	push	r14
    132c:	df 92       	push	r13
    132e:	cf 92       	push	r12
    1330:	bf 92       	push	r11
    1332:	af 92       	push	r10
    1334:	9f 92       	push	r9
    1336:	8f 92       	push	r8
    1338:	7f 92       	push	r7
    133a:	6f 92       	push	r6
    133c:	5f 92       	push	r5
    133e:	4f 92       	push	r4
    1340:	3f 92       	push	r3
    1342:	2f 92       	push	r2
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	8d b7       	in	r24, 0x3d	; 61
    134a:	9e b7       	in	r25, 0x3e	; 62
    134c:	90 93 8c 0c 	sts	0x0C8C, r25
    1350:	80 93 8b 0c 	sts	0x0C8B, r24
    1354:	e0 91 91 0c 	lds	r30, 0x0C91
    1358:	f0 91 92 0c 	lds	r31, 0x0C92
    135c:	f3 95       	inc	r31
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	9e bf       	out	0x3e, r25	; 62
    1364:	8d bf       	out	0x3d, r24	; 61
    1366:	0f 90       	pop	r0
    1368:	1f 90       	pop	r1
    136a:	2f 90       	pop	r2
    136c:	3f 90       	pop	r3
    136e:	4f 90       	pop	r4
    1370:	5f 90       	pop	r5
    1372:	6f 90       	pop	r6
    1374:	7f 90       	pop	r7
    1376:	8f 90       	pop	r8
    1378:	9f 90       	pop	r9
    137a:	af 90       	pop	r10
    137c:	bf 90       	pop	r11
    137e:	cf 90       	pop	r12
    1380:	df 90       	pop	r13
    1382:	ef 90       	pop	r14
    1384:	ff 90       	pop	r15
    1386:	0f 91       	pop	r16
    1388:	1f 91       	pop	r17
    138a:	2f 91       	pop	r18
    138c:	3f 91       	pop	r19
    138e:	4f 91       	pop	r20
    1390:	5f 91       	pop	r21
    1392:	6f 91       	pop	r22
    1394:	7f 91       	pop	r23
    1396:	8f 91       	pop	r24
    1398:	9f 91       	pop	r25
    139a:	af 91       	pop	r26
    139c:	bf 91       	pop	r27
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	ef 91       	pop	r30
    13a4:	ff 91       	pop	r31
    13a6:	ff bf       	out	0x3f, r31	; 63
    13a8:	ff 91       	pop	r31
    13aa:	fc bf       	out	0x3c, r31	; 60
    13ac:	ff 91       	pop	r31
    13ae:	08 95       	ret

000013b0 <_ZL12enter_kernelv>:
    13b0:	ff 93       	push	r31
    13b2:	fc b7       	in	r31, 0x3c	; 60
    13b4:	ff 93       	push	r31
    13b6:	ff b7       	in	r31, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	ff 93       	push	r31
    13bc:	ef 93       	push	r30
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	bf 93       	push	r27
    13c4:	af 93       	push	r26
    13c6:	9f 93       	push	r25
    13c8:	8f 93       	push	r24
    13ca:	7f 93       	push	r23
    13cc:	6f 93       	push	r22
    13ce:	5f 93       	push	r21
    13d0:	4f 93       	push	r20
    13d2:	3f 93       	push	r19
    13d4:	2f 93       	push	r18
    13d6:	1f 93       	push	r17
    13d8:	0f 93       	push	r16
    13da:	ff 92       	push	r15
    13dc:	ef 92       	push	r14
    13de:	df 92       	push	r13
    13e0:	cf 92       	push	r12
    13e2:	bf 92       	push	r11
    13e4:	af 92       	push	r10
    13e6:	9f 92       	push	r9
    13e8:	8f 92       	push	r8
    13ea:	7f 92       	push	r7
    13ec:	6f 92       	push	r6
    13ee:	5f 92       	push	r5
    13f0:	4f 92       	push	r4
    13f2:	3f 92       	push	r3
    13f4:	2f 92       	push	r2
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	e0 91 91 0c 	lds	r30, 0x0C91
    13fe:	f0 91 92 0c 	lds	r31, 0x0C92
    1402:	8d b7       	in	r24, 0x3d	; 61
    1404:	9e b7       	in	r25, 0x3e	; 62
    1406:	f3 95       	inc	r31
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	80 83       	st	Z, r24
    140c:	80 91 8b 0c 	lds	r24, 0x0C8B
    1410:	90 91 8c 0c 	lds	r25, 0x0C8C
    1414:	9e bf       	out	0x3e, r25	; 62
    1416:	8d bf       	out	0x3d, r24	; 61
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	2f 90       	pop	r2
    141e:	3f 90       	pop	r3
    1420:	4f 90       	pop	r4
    1422:	5f 90       	pop	r5
    1424:	6f 90       	pop	r6
    1426:	7f 90       	pop	r7
    1428:	8f 90       	pop	r8
    142a:	9f 90       	pop	r9
    142c:	af 90       	pop	r10
    142e:	bf 90       	pop	r11
    1430:	cf 90       	pop	r12
    1432:	df 90       	pop	r13
    1434:	ef 90       	pop	r14
    1436:	ff 90       	pop	r15
    1438:	0f 91       	pop	r16
    143a:	1f 91       	pop	r17
    143c:	2f 91       	pop	r18
    143e:	3f 91       	pop	r19
    1440:	4f 91       	pop	r20
    1442:	5f 91       	pop	r21
    1444:	6f 91       	pop	r22
    1446:	7f 91       	pop	r23
    1448:	8f 91       	pop	r24
    144a:	9f 91       	pop	r25
    144c:	af 91       	pop	r26
    144e:	bf 91       	pop	r27
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	ef 91       	pop	r30
    1456:	ff 91       	pop	r31
    1458:	ff bf       	out	0x3f, r31	; 63
    145a:	ff 91       	pop	r31
    145c:	fc bf       	out	0x3c, r31	; 60
    145e:	ff 91       	pop	r31
    1460:	08 95       	ret

00001462 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>:
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	fc 01       	movw	r30, r24
    146c:	a0 81       	ld	r26, Z
    146e:	b1 81       	ldd	r27, Z+1	; 0x01
    1470:	10 97       	sbiw	r26, 0x00	; 0
    1472:	c1 f0       	breq	.+48     	; 0x14a4 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x42>
    1474:	fb 01       	movw	r30, r22
    1476:	06 81       	ldd	r16, Z+6	; 0x06
    1478:	17 81       	ldd	r17, Z+7	; 0x07
    147a:	20 91 74 02 	lds	r18, 0x0274
    147e:	30 91 75 02 	lds	r19, 0x0275
    1482:	e0 91 74 02 	lds	r30, 0x0274
    1486:	f0 91 75 02 	lds	r31, 0x0275
    148a:	a8 01       	movw	r20, r16
    148c:	42 1b       	sub	r20, r18
    148e:	53 0b       	sbc	r21, r19
    1490:	16 96       	adiw	r26, 0x06	; 6
    1492:	2d 91       	ld	r18, X+
    1494:	3c 91       	ld	r19, X
    1496:	17 97       	sbiw	r26, 0x07	; 7
    1498:	2e 1b       	sub	r18, r30
    149a:	3f 0b       	sbc	r19, r31
    149c:	42 17       	cp	r20, r18
    149e:	53 07       	cpc	r21, r19
    14a0:	78 f5       	brcc	.+94     	; 0x1500 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x9e>
    14a2:	24 c0       	rjmp	.+72     	; 0x14ec <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x8a>
    14a4:	71 83       	std	Z+1, r23	; 0x01
    14a6:	60 83       	st	Z, r22
    14a8:	73 83       	std	Z+3, r23	; 0x03
    14aa:	62 83       	std	Z+2, r22	; 0x02
    14ac:	fb 01       	movw	r30, r22
    14ae:	11 86       	std	Z+9, r1	; 0x09
    14b0:	10 86       	std	Z+8, r1	; 0x08
    14b2:	3a c0       	rjmp	.+116    	; 0x1528 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0xc6>
    14b4:	20 91 74 02 	lds	r18, 0x0274
    14b8:	30 91 75 02 	lds	r19, 0x0275
    14bc:	c0 91 74 02 	lds	r28, 0x0274
    14c0:	d0 91 75 02 	lds	r29, 0x0275
    14c4:	a8 01       	movw	r20, r16
    14c6:	42 1b       	sub	r20, r18
    14c8:	53 0b       	sbc	r21, r19
    14ca:	26 81       	ldd	r18, Z+6	; 0x06
    14cc:	37 81       	ldd	r19, Z+7	; 0x07
    14ce:	2c 1b       	sub	r18, r28
    14d0:	3d 0b       	sbc	r19, r29
    14d2:	42 17       	cp	r20, r18
    14d4:	53 07       	cpc	r21, r19
    14d6:	10 f0       	brcs	.+4      	; 0x14dc <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x7a>
    14d8:	df 01       	movw	r26, r30
    14da:	12 c0       	rjmp	.+36     	; 0x1500 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x9e>
    14dc:	10 97       	sbiw	r26, 0x00	; 0
    14de:	29 f0       	breq	.+10     	; 0x14ea <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x88>
    14e0:	19 96       	adiw	r26, 0x09	; 9
    14e2:	7c 93       	st	X, r23
    14e4:	6e 93       	st	-X, r22
    14e6:	18 97       	sbiw	r26, 0x08	; 8
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x92>
    14ea:	df 01       	movw	r26, r30
    14ec:	fc 01       	movw	r30, r24
    14ee:	71 83       	std	Z+1, r23	; 0x01
    14f0:	60 83       	st	Z, r22
    14f2:	fd 01       	movw	r30, r26
    14f4:	db 01       	movw	r26, r22
    14f6:	19 96       	adiw	r26, 0x09	; 9
    14f8:	fc 93       	st	X, r31
    14fa:	ee 93       	st	-X, r30
    14fc:	18 97       	sbiw	r26, 0x08	; 8
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0xc6>
    1500:	18 96       	adiw	r26, 0x08	; 8
    1502:	ed 91       	ld	r30, X+
    1504:	fc 91       	ld	r31, X
    1506:	19 97       	sbiw	r26, 0x09	; 9
    1508:	30 97       	sbiw	r30, 0x00	; 0
    150a:	a1 f6       	brne	.-88     	; 0x14b4 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x52>
    150c:	dc 01       	movw	r26, r24
    150e:	12 96       	adiw	r26, 0x02	; 2
    1510:	ed 91       	ld	r30, X+
    1512:	fc 91       	ld	r31, X
    1514:	13 97       	sbiw	r26, 0x03	; 3
    1516:	71 87       	std	Z+9, r23	; 0x09
    1518:	60 87       	std	Z+8, r22	; 0x08
    151a:	13 96       	adiw	r26, 0x03	; 3
    151c:	7c 93       	st	X, r23
    151e:	6e 93       	st	-X, r22
    1520:	12 97       	sbiw	r26, 0x02	; 2
    1522:	fb 01       	movw	r30, r22
    1524:	11 86       	std	Z+9, r1	; 0x09
    1526:	10 86       	std	Z+8, r1	; 0x08
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	08 95       	ret

00001532 <_ZL7enqueueP12task_queue_tP9td_struct>:
    1532:	fc 01       	movw	r30, r24
    1534:	80 81       	ld	r24, Z
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	89 2b       	or	r24, r25
    153a:	29 f4       	brne	.+10     	; 0x1546 <_ZL7enqueueP12task_queue_tP9td_struct+0x14>
    153c:	71 83       	std	Z+1, r23	; 0x01
    153e:	60 83       	st	Z, r22
    1540:	73 83       	std	Z+3, r23	; 0x03
    1542:	62 83       	std	Z+2, r22	; 0x02
    1544:	08 95       	ret
    1546:	a2 81       	ldd	r26, Z+2	; 0x02
    1548:	b3 81       	ldd	r27, Z+3	; 0x03
    154a:	a6 5f       	subi	r26, 0xF6	; 246
    154c:	be 4f       	sbci	r27, 0xFE	; 254
    154e:	6d 93       	st	X+, r22
    1550:	7c 93       	st	X, r23
    1552:	73 83       	std	Z+3, r23	; 0x03
    1554:	62 83       	std	Z+2, r22	; 0x02
    1556:	08 95       	ret

00001558 <_ZL7dequeueP12task_queue_t>:
    1558:	fc 01       	movw	r30, r24
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	89 f0       	breq	.+34     	; 0x1584 <_ZL7dequeueP12task_queue_t+0x2c>
    1562:	22 81       	ldd	r18, Z+2	; 0x02
    1564:	33 81       	ldd	r19, Z+3	; 0x03
    1566:	82 17       	cp	r24, r18
    1568:	93 07       	cpc	r25, r19
    156a:	29 f4       	brne	.+10     	; 0x1576 <_ZL7dequeueP12task_queue_t+0x1e>
    156c:	13 82       	std	Z+3, r1	; 0x03
    156e:	12 82       	std	Z+2, r1	; 0x02
    1570:	11 82       	std	Z+1, r1	; 0x01
    1572:	10 82       	st	Z, r1
    1574:	08 95       	ret
    1576:	dc 01       	movw	r26, r24
    1578:	a6 5f       	subi	r26, 0xF6	; 246
    157a:	be 4f       	sbci	r27, 0xFE	; 254
    157c:	2d 91       	ld	r18, X+
    157e:	3c 91       	ld	r19, X
    1580:	31 83       	std	Z+1, r19	; 0x01
    1582:	20 83       	st	Z, r18
    1584:	08 95       	ret

00001586 <_ZL18kernel_create_taskv>:
    1586:	80 91 d7 02 	lds	r24, 0x02D7
    158a:	90 91 d8 02 	lds	r25, 0x02D8
    158e:	89 2b       	or	r24, r25
    1590:	09 f4       	brne	.+2      	; 0x1594 <_ZL18kernel_create_taskv+0xe>
    1592:	9a c0       	rjmp	.+308    	; 0x16c8 <_ZL18kernel_create_taskv+0x142>
    1594:	80 91 f5 02 	lds	r24, 0x02F5
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	09 f0       	breq	.+2      	; 0x159e <_ZL18kernel_create_taskv+0x18>
    159c:	9e c0       	rjmp	.+316    	; 0x16da <_ZL18kernel_create_taskv+0x154>
    159e:	80 91 d3 02 	lds	r24, 0x02D3
    15a2:	90 91 d4 02 	lds	r25, 0x02D4
    15a6:	89 2b       	or	r24, r25
    15a8:	09 f0       	breq	.+2      	; 0x15ac <_ZL18kernel_create_taskv+0x26>
    15aa:	97 c0       	rjmp	.+302    	; 0x16da <_ZL18kernel_create_taskv+0x154>
    15ac:	90 c0       	rjmp	.+288    	; 0x16ce <_ZL18kernel_create_taskv+0x148>
    15ae:	87 ed       	ldi	r24, 0xD7	; 215
    15b0:	92 e0       	ldi	r25, 0x02	; 2
    15b2:	d2 df       	rcall	.-92     	; 0x1558 <_ZL7dequeueP12task_queue_t>
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <_ZL18kernel_create_taskv+0x34>
    15b6:	8f e7       	ldi	r24, 0x7F	; 127
    15b8:	9b e0       	ldi	r25, 0x0B	; 11
    15ba:	fc 01       	movw	r30, r24
    15bc:	e7 52       	subi	r30, 0x27	; 39
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	10 82       	st	Z, r1
    15c2:	20 e8       	ldi	r18, 0x80	; 128
    15c4:	7e 96       	adiw	r30, 0x1e	; 30
    15c6:	20 83       	st	Z, r18
    15c8:	33 96       	adiw	r30, 0x03	; 3
    15ca:	10 82       	st	Z, r1
    15cc:	e1 ef       	ldi	r30, 0xF1	; 241
    15ce:	f2 e0       	ldi	r31, 0x02	; 2
    15d0:	20 81       	ld	r18, Z
    15d2:	31 81       	ldd	r19, Z+1	; 0x01
    15d4:	dc 01       	movw	r26, r24
    15d6:	a5 50       	subi	r26, 0x05	; 5
    15d8:	bf 4f       	sbci	r27, 0xFF	; 255
    15da:	3c 93       	st	X, r19
    15dc:	20 81       	ld	r18, Z
    15de:	31 81       	ldd	r19, Z+1	; 0x01
    15e0:	fc 01       	movw	r30, r24
    15e2:	e4 50       	subi	r30, 0x04	; 4
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	20 83       	st	Z, r18
    15e8:	31 96       	adiw	r30, 0x01	; 1
    15ea:	10 82       	st	Z, r1
    15ec:	23 e7       	ldi	r18, 0x73	; 115
    15ee:	3b e0       	ldi	r19, 0x0B	; 11
    15f0:	31 96       	adiw	r30, 0x01	; 1
    15f2:	30 83       	st	Z, r19
    15f4:	31 96       	adiw	r30, 0x01	; 1
    15f6:	20 83       	st	Z, r18
    15f8:	31 96       	adiw	r30, 0x01	; 1
    15fa:	9c 01       	movw	r18, r24
    15fc:	29 52       	subi	r18, 0x29	; 41
    15fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1600:	31 83       	std	Z+1, r19	; 0x01
    1602:	20 83       	st	Z, r18
    1604:	22 e0       	ldi	r18, 0x02	; 2
    1606:	35 96       	adiw	r30, 0x05	; 5
    1608:	20 83       	st	Z, r18
    160a:	20 91 f3 02 	lds	r18, 0x02F3
    160e:	30 91 f4 02 	lds	r19, 0x02F4
    1612:	31 96       	adiw	r30, 0x01	; 1
    1614:	31 83       	std	Z+1, r19	; 0x01
    1616:	20 83       	st	Z, r18
    1618:	e5 ef       	ldi	r30, 0xF5	; 245
    161a:	f2 e0       	ldi	r31, 0x02	; 2
    161c:	20 81       	ld	r18, Z
    161e:	17 96       	adiw	r26, 0x07	; 7
    1620:	2c 93       	st	X, r18
    1622:	20 81       	ld	r18, Z
    1624:	21 30       	cpi	r18, 0x01	; 1
    1626:	31 f0       	breq	.+12     	; 0x1634 <_ZL18kernel_create_taskv+0xae>
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	09 f4       	brne	.+2      	; 0x162e <_ZL18kernel_create_taskv+0xa8>
    162c:	46 c0       	rjmp	.+140    	; 0x16ba <_ZL18kernel_create_taskv+0x134>
    162e:	21 11       	cpse	r18, r1
    1630:	51 c0       	rjmp	.+162    	; 0x16d4 <_ZL18kernel_create_taskv+0x14e>
    1632:	3c c0       	rjmp	.+120    	; 0x16ac <_ZL18kernel_create_taskv+0x126>
    1634:	e0 91 d3 02 	lds	r30, 0x02D3
    1638:	f0 91 d4 02 	lds	r31, 0x02D4
    163c:	30 97       	sbiw	r30, 0x00	; 0
    163e:	b1 f0       	breq	.+44     	; 0x166c <_ZL18kernel_create_taskv+0xe6>
    1640:	20 91 d5 02 	lds	r18, 0x02D5
    1644:	30 91 d6 02 	lds	r19, 0x02D6
    1648:	e2 17       	cp	r30, r18
    164a:	f3 07       	cpc	r31, r19
    164c:	49 f4       	brne	.+18     	; 0x1660 <_ZL18kernel_create_taskv+0xda>
    164e:	10 92 d6 02 	sts	0x02D6, r1
    1652:	10 92 d5 02 	sts	0x02D5, r1
    1656:	10 92 d4 02 	sts	0x02D4, r1
    165a:	10 92 d3 02 	sts	0x02D3, r1
    165e:	06 c0       	rjmp	.+12     	; 0x166c <_ZL18kernel_create_taskv+0xe6>
    1660:	20 85       	ldd	r18, Z+8	; 0x08
    1662:	31 85       	ldd	r19, Z+9	; 0x09
    1664:	30 93 d4 02 	sts	0x02D4, r19
    1668:	20 93 d3 02 	sts	0x02D3, r18
    166c:	20 91 ed 02 	lds	r18, 0x02ED
    1670:	30 91 ee 02 	lds	r19, 0x02EE
    1674:	37 83       	std	Z+7, r19	; 0x07
    1676:	26 83       	std	Z+6, r18	; 0x06
    1678:	20 91 e9 02 	lds	r18, 0x02E9
    167c:	30 91 ea 02 	lds	r19, 0x02EA
    1680:	33 83       	std	Z+3, r19	; 0x03
    1682:	22 83       	std	Z+2, r18	; 0x02
    1684:	20 91 eb 02 	lds	r18, 0x02EB
    1688:	30 91 ec 02 	lds	r19, 0x02EC
    168c:	35 83       	std	Z+5, r19	; 0x05
    168e:	24 83       	std	Z+4, r18	; 0x04
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	dc 01       	movw	r26, r24
    1696:	ad 5f       	subi	r26, 0xFD	; 253
    1698:	be 4f       	sbci	r27, 0xFE	; 254
    169a:	ed 93       	st	X+, r30
    169c:	fc 93       	st	X, r31
    169e:	bf 01       	movw	r22, r30
    16a0:	8b ec       	ldi	r24, 0xCB	; 203
    16a2:	92 e0       	ldi	r25, 0x02	; 2
    16a4:	de de       	rcall	.-580    	; 0x1462 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	08 95       	ret
    16ac:	bc 01       	movw	r22, r24
    16ae:	87 ec       	ldi	r24, 0xC7	; 199
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	3f df       	rcall	.-386    	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	08 95       	ret
    16ba:	bc 01       	movw	r22, r24
    16bc:	8f ec       	ldi	r24, 0xCF	; 207
    16be:	92 e0       	ldi	r25, 0x02	; 2
    16c0:	38 df       	rcall	.-400    	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	08 95       	ret
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	08 95       	ret
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	08 95       	ret
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	08 95       	ret
    16da:	80 91 f5 02 	lds	r24, 0x02F5
    16de:	8f 3f       	cpi	r24, 0xFF	; 255
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <_ZL18kernel_create_taskv+0x15e>
    16e2:	65 cf       	rjmp	.-310    	; 0x15ae <_ZL18kernel_create_taskv+0x28>
    16e4:	68 cf       	rjmp	.-304    	; 0x15b6 <_ZL18kernel_create_taskv+0x30>

000016e6 <Task_Terminate>:
    16e6:	cf 93       	push	r28
    16e8:	cf b7       	in	r28, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	83 e0       	ldi	r24, 0x03	; 3
    16ee:	80 93 f6 02 	sts	0x02F6, r24
    16f2:	5e de       	rcall	.-836    	; 0x13b0 <_ZL12enter_kernelv>
    16f4:	cf bf       	out	0x3f, r28	; 63
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <__vector_17>:
    16fa:	ff 93       	push	r31
    16fc:	fc b7       	in	r31, 0x3c	; 60
    16fe:	ff 93       	push	r31
    1700:	ff b7       	in	r31, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	f0 68       	ori	r31, 0x80	; 128
    1706:	ff 93       	push	r31
    1708:	ef 93       	push	r30
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	bf 93       	push	r27
    1710:	af 93       	push	r26
    1712:	9f 93       	push	r25
    1714:	8f 93       	push	r24
    1716:	7f 93       	push	r23
    1718:	6f 93       	push	r22
    171a:	5f 93       	push	r21
    171c:	4f 93       	push	r20
    171e:	3f 93       	push	r19
    1720:	2f 93       	push	r18
    1722:	1f 93       	push	r17
    1724:	0f 93       	push	r16
    1726:	ff 92       	push	r15
    1728:	ef 92       	push	r14
    172a:	df 92       	push	r13
    172c:	cf 92       	push	r12
    172e:	bf 92       	push	r11
    1730:	af 92       	push	r10
    1732:	9f 92       	push	r9
    1734:	8f 92       	push	r8
    1736:	7f 92       	push	r7
    1738:	6f 92       	push	r6
    173a:	5f 92       	push	r5
    173c:	4f 92       	push	r4
    173e:	3f 92       	push	r3
    1740:	2f 92       	push	r2
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	e0 91 91 0c 	lds	r30, 0x0C91
    174a:	f0 91 92 0c 	lds	r31, 0x0C92
    174e:	8d b7       	in	r24, 0x3d	; 61
    1750:	9e b7       	in	r25, 0x3e	; 62
    1752:	f3 95       	inc	r31
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	80 91 8b 0c 	lds	r24, 0x0C8B
    175c:	90 91 8c 0c 	lds	r25, 0x0C8C
    1760:	9e bf       	out	0x3e, r25	; 62
    1762:	8d bf       	out	0x3d, r24	; 61
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	80 93 f6 02 	sts	0x02F6, r24
    176a:	e8 e8       	ldi	r30, 0x88	; 136
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	80 5f       	subi	r24, 0xF0	; 240
    1774:	98 4d       	sbci	r25, 0xD8	; 216
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	80 91 8b 0c 	lds	r24, 0x0C8B
    177e:	90 91 8c 0c 	lds	r25, 0x0C8C
    1782:	9e bf       	out	0x3e, r25	; 62
    1784:	8d bf       	out	0x3d, r24	; 61
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	2f 90       	pop	r2
    178c:	3f 90       	pop	r3
    178e:	4f 90       	pop	r4
    1790:	5f 90       	pop	r5
    1792:	6f 90       	pop	r6
    1794:	7f 90       	pop	r7
    1796:	8f 90       	pop	r8
    1798:	9f 90       	pop	r9
    179a:	af 90       	pop	r10
    179c:	bf 90       	pop	r11
    179e:	cf 90       	pop	r12
    17a0:	df 90       	pop	r13
    17a2:	ef 90       	pop	r14
    17a4:	ff 90       	pop	r15
    17a6:	0f 91       	pop	r16
    17a8:	1f 91       	pop	r17
    17aa:	2f 91       	pop	r18
    17ac:	3f 91       	pop	r19
    17ae:	4f 91       	pop	r20
    17b0:	5f 91       	pop	r21
    17b2:	6f 91       	pop	r22
    17b4:	7f 91       	pop	r23
    17b6:	8f 91       	pop	r24
    17b8:	9f 91       	pop	r25
    17ba:	af 91       	pop	r26
    17bc:	bf 91       	pop	r27
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	ef 91       	pop	r30
    17c4:	ff 91       	pop	r31
    17c6:	ff bf       	out	0x3f, r31	; 63
    17c8:	ff 91       	pop	r31
    17ca:	fc bf       	out	0x3c, r31	; 60
    17cc:	ff 91       	pop	r31
    17ce:	08 95       	ret

000017d0 <_Z11kernel_initv>:
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	e1 e8       	ldi	r30, 0x81	; 129
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	80 83       	st	Z, r24
    17ea:	e4 e2       	ldi	r30, 0x24	; 36
    17ec:	f4 e0       	ldi	r31, 0x04	; 4
    17ee:	24 e8       	ldi	r18, 0x84	; 132
    17f0:	3c e0       	ldi	r19, 0x0C	; 12
    17f2:	10 82       	st	Z, r1
    17f4:	cf 01       	movw	r24, r30
    17f6:	07 96       	adiw	r24, 0x07	; 7
    17f8:	96 83       	std	Z+6, r25	; 0x06
    17fa:	85 83       	std	Z+5, r24	; 0x05
    17fc:	df 01       	movw	r26, r30
    17fe:	12 97       	sbiw	r26, 0x02	; 2
    1800:	1d 92       	st	X+, r1
    1802:	1c 92       	st	X, r1
    1804:	e4 5f       	subi	r30, 0xF4	; 244
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	e2 17       	cp	r30, r18
    180a:	f3 07       	cpc	r31, r19
    180c:	91 f7       	brne	.-28     	; 0x17f2 <_Z11kernel_initv+0x22>
    180e:	10 92 8a 0c 	sts	0x0C8A, r1
    1812:	10 92 89 0c 	sts	0x0C89, r1
    1816:	10 92 7e 0b 	sts	0x0B7E, r1
    181a:	10 92 7d 0b 	sts	0x0B7D, r1
    181e:	10 92 84 0c 	sts	0x0C84, r1
    1822:	10 92 83 0c 	sts	0x0C83, r1
    1826:	10 92 82 0c 	sts	0x0C82, r1
    182a:	e7 ef       	ldi	r30, 0xF7	; 247
    182c:	f2 e0       	ldi	r31, 0x02	; 2
    182e:	25 e1       	ldi	r18, 0x15	; 21
    1830:	33 e0       	ldi	r19, 0x03	; 3
    1832:	17 82       	std	Z+7, r1	; 0x07
    1834:	16 82       	std	Z+6, r1	; 0x06
    1836:	15 82       	std	Z+5, r1	; 0x05
    1838:	14 82       	std	Z+4, r1	; 0x04
    183a:	13 82       	std	Z+3, r1	; 0x03
    183c:	12 82       	std	Z+2, r1	; 0x02
    183e:	11 82       	std	Z+1, r1	; 0x01
    1840:	10 82       	st	Z, r1
    1842:	cf 01       	movw	r24, r30
    1844:	0a 96       	adiw	r24, 0x0a	; 10
    1846:	91 87       	std	Z+9, r25	; 0x09
    1848:	80 87       	std	Z+8, r24	; 0x08
    184a:	82 17       	cp	r24, r18
    184c:	93 07       	cpc	r25, r19
    184e:	11 f0       	breq	.+4      	; 0x1854 <_Z11kernel_initv+0x84>
    1850:	fc 01       	movw	r30, r24
    1852:	ef cf       	rjmp	.-34     	; 0x1832 <_Z11kernel_initv+0x62>
    1854:	e5 e1       	ldi	r30, 0x15	; 21
    1856:	f3 e0       	ldi	r31, 0x03	; 3
    1858:	11 82       	std	Z+1, r1	; 0x01
    185a:	10 82       	st	Z, r1
    185c:	10 92 1e 03 	sts	0x031E, r1
    1860:	10 92 1d 03 	sts	0x031D, r1
    1864:	10 92 1c 03 	sts	0x031C, r1
    1868:	10 92 1b 03 	sts	0x031B, r1
    186c:	10 92 1a 03 	sts	0x031A, r1
    1870:	10 92 19 03 	sts	0x0319, r1
    1874:	10 92 18 03 	sts	0x0318, r1
    1878:	10 92 17 03 	sts	0x0317, r1
    187c:	0f 2e       	mov	r0, r31
    187e:	ff e1       	ldi	r31, 0x1F	; 31
    1880:	cf 2e       	mov	r12, r31
    1882:	f3 e0       	ldi	r31, 0x03	; 3
    1884:	df 2e       	mov	r13, r31
    1886:	f0 2d       	mov	r31, r0
    1888:	d0 92 d8 02 	sts	0x02D8, r13
    188c:	c0 92 d7 02 	sts	0x02D7, r12
    1890:	83 e7       	ldi	r24, 0x73	; 115
    1892:	9a e0       	ldi	r25, 0x0A	; 10
    1894:	90 93 da 02 	sts	0x02DA, r25
    1898:	80 93 d9 02 	sts	0x02D9, r24
    189c:	87 ef       	ldi	r24, 0xF7	; 247
    189e:	92 e0       	ldi	r25, 0x02	; 2
    18a0:	90 93 d4 02 	sts	0x02D4, r25
    18a4:	80 93 d3 02 	sts	0x02D3, r24
    18a8:	f0 93 d6 02 	sts	0x02D6, r31
    18ac:	e0 93 d5 02 	sts	0x02D5, r30
    18b0:	10 92 cc 02 	sts	0x02CC, r1
    18b4:	10 92 cb 02 	sts	0x02CB, r1
    18b8:	10 92 ce 02 	sts	0x02CE, r1
    18bc:	10 92 cd 02 	sts	0x02CD, r1
    18c0:	10 92 d0 02 	sts	0x02D0, r1
    18c4:	10 92 cf 02 	sts	0x02CF, r1
    18c8:	10 92 d2 02 	sts	0x02D2, r1
    18cc:	10 92 d1 02 	sts	0x02D1, r1
    18d0:	10 92 c8 02 	sts	0x02C8, r1
    18d4:	10 92 c7 02 	sts	0x02C7, r1
    18d8:	10 92 ca 02 	sts	0x02CA, r1
    18dc:	10 92 c9 02 	sts	0x02C9, r1
    18e0:	0f 2e       	mov	r0, r31
    18e2:	f1 ef       	ldi	r31, 0xF1	; 241
    18e4:	ef 2e       	mov	r14, r31
    18e6:	f2 e0       	ldi	r31, 0x02	; 2
    18e8:	ff 2e       	mov	r15, r31
    18ea:	f0 2d       	mov	r31, r0
    18ec:	8e e7       	ldi	r24, 0x7E	; 126
    18ee:	99 e0       	ldi	r25, 0x09	; 9
    18f0:	f7 01       	movw	r30, r14
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	05 ef       	ldi	r16, 0xF5	; 245
    18f8:	12 e0       	ldi	r17, 0x02	; 2
    18fa:	8f ef       	ldi	r24, 0xFF	; 255
    18fc:	f8 01       	movw	r30, r16
    18fe:	80 83       	st	Z, r24
    1900:	c3 ef       	ldi	r28, 0xF3	; 243
    1902:	d2 e0       	ldi	r29, 0x02	; 2
    1904:	19 82       	std	Y+1, r1	; 0x01
    1906:	18 82       	st	Y, r1
    1908:	3e de       	rcall	.-900    	; 0x1586 <_ZL18kernel_create_taskv>
    190a:	85 e3       	ldi	r24, 0x35	; 53
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	f7 01       	movw	r30, r14
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
    1914:	f8 01       	movw	r30, r16
    1916:	10 82       	st	Z, r1
    1918:	19 82       	std	Y+1, r1	; 0x01
    191a:	18 82       	st	Y, r1
    191c:	34 de       	rcall	.-920    	; 0x1586 <_ZL18kernel_create_taskv>
    191e:	d0 92 92 0c 	sts	0x0C92, r13
    1922:	c0 92 91 0c 	sts	0x0C91, r12
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	80 93 24 04 	sts	0x0424, r24
    192c:	87 ec       	ldi	r24, 0xC7	; 199
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	13 de       	rcall	.-986    	; 0x1558 <_ZL7dequeueP12task_queue_t>
    1932:	ef e6       	ldi	r30, 0x6F	; 111
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	82 60       	ori	r24, 0x02	; 2
    193a:	80 83       	st	Z, r24
    193c:	80 91 84 00 	lds	r24, 0x0084
    1940:	90 91 85 00 	lds	r25, 0x0085
    1944:	80 5f       	subi	r24, 0xF0	; 240
    1946:	98 4d       	sbci	r25, 0xD8	; 216
    1948:	90 93 89 00 	sts	0x0089, r25
    194c:	80 93 88 00 	sts	0x0088, r24
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	86 bb       	out	0x16, r24	; 22
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	08 95       	ret

00001966 <OS_Abort>:
    1966:	f8 94       	cli
    1968:	80 e8       	ldi	r24, 0x80	; 128
    196a:	84 b9       	out	0x04, r24	; 4
    196c:	80 91 31 02 	lds	r24, 0x0231
    1970:	81 11       	cpse	r24, r1
    1972:	04 c0       	rjmp	.+8      	; 0x197c <OS_Abort+0x16>
    1974:	30 91 31 02 	lds	r19, 0x0231
    1978:	3f 5f       	subi	r19, 0xFF	; 255
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <OS_Abort+0x1c>
    197c:	30 91 31 02 	lds	r19, 0x0231
    1980:	31 50       	subi	r19, 0x01	; 1
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	64 e6       	ldi	r22, 0x64	; 100
    1986:	2a e0       	ldi	r18, 0x0A	; 10
    1988:	54 e1       	ldi	r21, 0x14	; 20
    198a:	45 b9       	out	0x05, r20	; 5
    198c:	86 2f       	mov	r24, r22
    198e:	7f e7       	ldi	r23, 0x7F	; 127
    1990:	98 e3       	ldi	r25, 0x38	; 56
    1992:	e1 e0       	ldi	r30, 0x01	; 1
    1994:	71 50       	subi	r23, 0x01	; 1
    1996:	90 40       	sbci	r25, 0x00	; 0
    1998:	e0 40       	sbci	r30, 0x00	; 0
    199a:	e1 f7       	brne	.-8      	; 0x1994 <OS_Abort+0x2e>
    199c:	00 c0       	rjmp	.+0      	; 0x199e <OS_Abort+0x38>
    199e:	00 00       	nop
    19a0:	81 50       	subi	r24, 0x01	; 1
    19a2:	a9 f7       	brne	.-22     	; 0x198e <OS_Abort+0x28>
    19a4:	15 b8       	out	0x05, r1	; 5
    19a6:	88 e2       	ldi	r24, 0x28	; 40
    19a8:	ff e7       	ldi	r31, 0x7F	; 127
    19aa:	78 e3       	ldi	r23, 0x38	; 56
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	f1 50       	subi	r31, 0x01	; 1
    19b0:	70 40       	sbci	r23, 0x00	; 0
    19b2:	90 40       	sbci	r25, 0x00	; 0
    19b4:	e1 f7       	brne	.-8      	; 0x19ae <OS_Abort+0x48>
    19b6:	00 c0       	rjmp	.+0      	; 0x19b8 <OS_Abort+0x52>
    19b8:	00 00       	nop
    19ba:	81 50       	subi	r24, 0x01	; 1
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <OS_Abort+0x42>
    19be:	33 23       	and	r19, r19
    19c0:	59 f1       	breq	.+86     	; 0x1a18 <OS_Abort+0xb2>
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	45 b9       	out	0x05, r20	; 5
    19c6:	82 2f       	mov	r24, r18
    19c8:	ef e7       	ldi	r30, 0x7F	; 127
    19ca:	f8 e3       	ldi	r31, 0x38	; 56
    19cc:	71 e0       	ldi	r23, 0x01	; 1
    19ce:	e1 50       	subi	r30, 0x01	; 1
    19d0:	f0 40       	sbci	r31, 0x00	; 0
    19d2:	70 40       	sbci	r23, 0x00	; 0
    19d4:	e1 f7       	brne	.-8      	; 0x19ce <OS_Abort+0x68>
    19d6:	00 c0       	rjmp	.+0      	; 0x19d8 <OS_Abort+0x72>
    19d8:	00 00       	nop
    19da:	81 50       	subi	r24, 0x01	; 1
    19dc:	a9 f7       	brne	.-22     	; 0x19c8 <OS_Abort+0x62>
    19de:	15 b8       	out	0x05, r1	; 5
    19e0:	82 2f       	mov	r24, r18
    19e2:	ef e7       	ldi	r30, 0x7F	; 127
    19e4:	f8 e3       	ldi	r31, 0x38	; 56
    19e6:	71 e0       	ldi	r23, 0x01	; 1
    19e8:	e1 50       	subi	r30, 0x01	; 1
    19ea:	f0 40       	sbci	r31, 0x00	; 0
    19ec:	70 40       	sbci	r23, 0x00	; 0
    19ee:	e1 f7       	brne	.-8      	; 0x19e8 <OS_Abort+0x82>
    19f0:	00 c0       	rjmp	.+0      	; 0x19f2 <OS_Abort+0x8c>
    19f2:	00 00       	nop
    19f4:	81 50       	subi	r24, 0x01	; 1
    19f6:	a9 f7       	brne	.-22     	; 0x19e2 <OS_Abort+0x7c>
    19f8:	9f 5f       	subi	r25, 0xFF	; 255
    19fa:	93 13       	cpse	r25, r19
    19fc:	e3 cf       	rjmp	.-58     	; 0x19c4 <OS_Abort+0x5e>
    19fe:	0c c0       	rjmp	.+24     	; 0x1a18 <OS_Abort+0xb2>
    1a00:	9f e7       	ldi	r25, 0x7F	; 127
    1a02:	e8 e3       	ldi	r30, 0x38	; 56
    1a04:	f1 e0       	ldi	r31, 0x01	; 1
    1a06:	91 50       	subi	r25, 0x01	; 1
    1a08:	e0 40       	sbci	r30, 0x00	; 0
    1a0a:	f0 40       	sbci	r31, 0x00	; 0
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <OS_Abort+0xa0>
    1a0e:	00 c0       	rjmp	.+0      	; 0x1a10 <OS_Abort+0xaa>
    1a10:	00 00       	nop
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	a9 f7       	brne	.-22     	; 0x1a00 <OS_Abort+0x9a>
    1a16:	b9 cf       	rjmp	.-142    	; 0x198a <OS_Abort+0x24>
    1a18:	85 2f       	mov	r24, r21
    1a1a:	f2 cf       	rjmp	.-28     	; 0x1a00 <OS_Abort+0x9a>

00001a1c <_Z19periodic_task_readyv>:
    1a1c:	e0 91 cb 02 	lds	r30, 0x02CB
    1a20:	f0 91 cc 02 	lds	r31, 0x02CC
    1a24:	30 97       	sbiw	r30, 0x00	; 0
    1a26:	11 f1       	breq	.+68     	; 0x1a6c <_Z19periodic_task_readyv+0x50>
    1a28:	80 91 cd 02 	lds	r24, 0x02CD
    1a2c:	90 91 ce 02 	lds	r25, 0x02CE
    1a30:	e8 17       	cp	r30, r24
    1a32:	f9 07       	cpc	r31, r25
    1a34:	79 f0       	breq	.+30     	; 0x1a54 <_Z19periodic_task_readyv+0x38>
    1a36:	a0 85       	ldd	r26, Z+8	; 0x08
    1a38:	b1 85       	ldd	r27, Z+9	; 0x09
    1a3a:	26 81       	ldd	r18, Z+6	; 0x06
    1a3c:	37 81       	ldd	r19, Z+7	; 0x07
    1a3e:	16 96       	adiw	r26, 0x06	; 6
    1a40:	8d 91       	ld	r24, X+
    1a42:	9c 91       	ld	r25, X
    1a44:	17 97       	sbiw	r26, 0x07	; 7
    1a46:	28 17       	cp	r18, r24
    1a48:	39 07       	cpc	r19, r25
    1a4a:	21 f4       	brne	.+8      	; 0x1a54 <_Z19periodic_task_readyv+0x38>
    1a4c:	86 e0       	ldi	r24, 0x06	; 6
    1a4e:	80 93 31 02 	sts	0x0231, r24
    1a52:	89 df       	rcall	.-238    	; 0x1966 <OS_Abort>
    1a54:	20 91 74 02 	lds	r18, 0x0274
    1a58:	30 91 75 02 	lds	r19, 0x0275
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	46 81       	ldd	r20, Z+6	; 0x06
    1a60:	57 81       	ldd	r21, Z+7	; 0x07
    1a62:	42 17       	cp	r20, r18
    1a64:	53 07       	cpc	r21, r19
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <_Z19periodic_task_readyv+0x52>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <_Z19periodic_task_readyv+0x52>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	08 95       	ret

00001a72 <_ZL21kernel_should_preemptv>:
    1a72:	80 91 e5 02 	lds	r24, 0x02E5
    1a76:	90 91 e6 02 	lds	r25, 0x02E6
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	49 f1       	breq	.+82     	; 0x1ad0 <_ZL21kernel_should_preemptv+0x5e>
    1a7e:	80 91 c7 02 	lds	r24, 0x02C7
    1a82:	90 91 c8 02 	lds	r25, 0x02C8
    1a86:	89 2b       	or	r24, r25
    1a88:	49 f0       	breq	.+18     	; 0x1a9c <_ZL21kernel_should_preemptv+0x2a>
    1a8a:	e0 91 91 0c 	lds	r30, 0x0C91
    1a8e:	f0 91 92 0c 	lds	r31, 0x0C92
    1a92:	ee 5f       	subi	r30, 0xFE	; 254
    1a94:	fe 4f       	sbci	r31, 0xFE	; 254
    1a96:	80 81       	ld	r24, Z
    1a98:	81 11       	cpse	r24, r1
    1a9a:	1d c0       	rjmp	.+58     	; 0x1ad6 <_ZL21kernel_should_preemptv+0x64>
    1a9c:	bf df       	rcall	.-130    	; 0x1a1c <_Z19periodic_task_readyv>
    1a9e:	89 2b       	or	r24, r25
    1aa0:	01 f1       	breq	.+64     	; 0x1ae2 <_ZL21kernel_should_preemptv+0x70>
    1aa2:	e0 91 91 0c 	lds	r30, 0x0C91
    1aa6:	f0 91 92 0c 	lds	r31, 0x0C92
    1aaa:	ee 5f       	subi	r30, 0xFE	; 254
    1aac:	fe 4f       	sbci	r31, 0xFE	; 254
    1aae:	80 81       	ld	r24, Z
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	a4 f4       	brge	.+40     	; 0x1adc <_ZL21kernel_should_preemptv+0x6a>
    1ab4:	16 c0       	rjmp	.+44     	; 0x1ae2 <_ZL21kernel_should_preemptv+0x70>
    1ab6:	e0 91 91 0c 	lds	r30, 0x0C91
    1aba:	f0 91 92 0c 	lds	r31, 0x0C92
    1abe:	ee 5f       	subi	r30, 0xFE	; 254
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	20 81       	ld	r18, Z
    1ac8:	23 30       	cpi	r18, 0x03	; 3
    1aca:	9c f4       	brge	.+38     	; 0x1af2 <_ZL21kernel_should_preemptv+0x80>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	08 95       	ret
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	08 95       	ret
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	08 95       	ret
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	08 95       	ret
    1ae2:	80 91 cf 02 	lds	r24, 0x02CF
    1ae6:	90 91 d0 02 	lds	r25, 0x02D0
    1aea:	89 2b       	or	r24, r25
    1aec:	21 f7       	brne	.-56     	; 0x1ab6 <_ZL21kernel_should_preemptv+0x44>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	08 95       	ret

00001af4 <Task_Next>:
    1af4:	cf 93       	push	r28
    1af6:	cf b7       	in	r28, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	84 e0       	ldi	r24, 0x04	; 4
    1afc:	80 93 f6 02 	sts	0x02F6, r24
    1b00:	57 dc       	rcall	.-1874   	; 0x13b0 <_ZL12enter_kernelv>
    1b02:	cf bf       	out	0x3f, r28	; 63
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <_Z20kernel_create_helperPFvvEi15task_priority_t>:
    1b08:	cf 93       	push	r28
    1b0a:	cf b7       	in	r28, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	90 93 f2 02 	sts	0x02F2, r25
    1b12:	80 93 f1 02 	sts	0x02F1, r24
    1b16:	70 93 f4 02 	sts	0x02F4, r23
    1b1a:	60 93 f3 02 	sts	0x02F3, r22
    1b1e:	40 93 f5 02 	sts	0x02F5, r20
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	80 93 f6 02 	sts	0x02F6, r24
    1b28:	43 dc       	rcall	.-1914   	; 0x13b0 <_ZL12enter_kernelv>
    1b2a:	80 91 e3 02 	lds	r24, 0x02E3
    1b2e:	90 91 e4 02 	lds	r25, 0x02E4
    1b32:	cf bf       	out	0x3f, r28	; 63
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <Task_Create_System>:
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	e6 cf       	rjmp	.-52     	; 0x1b08 <_Z20kernel_create_helperPFvvEi15task_priority_t>
    1b3c:	08 95       	ret

00001b3e <Task_Create_RR>:
    1b3e:	42 e0       	ldi	r20, 0x02	; 2
    1b40:	e3 cf       	rjmp	.-58     	; 0x1b08 <_Z20kernel_create_helperPFvvEi15task_priority_t>
    1b42:	08 95       	ret

00001b44 <Task_Create_Periodic>:
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	41 15       	cp	r20, r1
    1b4a:	51 05       	cpc	r21, r1
    1b4c:	19 f0       	breq	.+6      	; 0x1b54 <Task_Create_Periodic+0x10>
    1b4e:	24 17       	cp	r18, r20
    1b50:	35 07       	cpc	r19, r21
    1b52:	20 f0       	brcs	.+8      	; 0x1b5c <Task_Create_Periodic+0x18>
    1b54:	84 e0       	ldi	r24, 0x04	; 4
    1b56:	80 93 31 02 	sts	0x0231, r24
    1b5a:	05 df       	rcall	.-502    	; 0x1966 <OS_Abort>
    1b5c:	50 93 ea 02 	sts	0x02EA, r21
    1b60:	40 93 e9 02 	sts	0x02E9, r20
    1b64:	10 93 ee 02 	sts	0x02EE, r17
    1b68:	00 93 ed 02 	sts	0x02ED, r16
    1b6c:	30 93 ec 02 	sts	0x02EC, r19
    1b70:	20 93 eb 02 	sts	0x02EB, r18
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	c8 df       	rcall	.-112    	; 0x1b08 <_Z20kernel_create_helperPFvvEi15task_priority_t>
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	08 95       	ret

00001b7e <Service_Init>:
    1b7e:	cf 93       	push	r28
    1b80:	cf b7       	in	r28, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	86 e0       	ldi	r24, 0x06	; 6
    1b86:	80 93 f6 02 	sts	0x02F6, r24
    1b8a:	12 dc       	rcall	.-2012   	; 0x13b0 <_ZL12enter_kernelv>
    1b8c:	80 91 e1 02 	lds	r24, 0x02E1
    1b90:	90 91 e2 02 	lds	r25, 0x02E2
    1b94:	cf bf       	out	0x3f, r28	; 63
    1b96:	cf 91       	pop	r28
    1b98:	08 95       	ret

00001b9a <Service_Subscribe>:
    1b9a:	cf 93       	push	r28
    1b9c:	cf b7       	in	r28, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	90 93 e0 02 	sts	0x02E0, r25
    1ba4:	80 93 df 02 	sts	0x02DF, r24
    1ba8:	70 93 de 02 	sts	0x02DE, r23
    1bac:	60 93 dd 02 	sts	0x02DD, r22
    1bb0:	87 e0       	ldi	r24, 0x07	; 7
    1bb2:	80 93 f6 02 	sts	0x02F6, r24
    1bb6:	fc db       	rcall	.-2056   	; 0x13b0 <_ZL12enter_kernelv>
    1bb8:	cf bf       	out	0x3f, r28	; 63
    1bba:	cf 91       	pop	r28
    1bbc:	08 95       	ret

00001bbe <Service_Publish>:
    1bbe:	cf 93       	push	r28
    1bc0:	cf b7       	in	r28, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	90 93 e0 02 	sts	0x02E0, r25
    1bc8:	80 93 df 02 	sts	0x02DF, r24
    1bcc:	70 93 dc 02 	sts	0x02DC, r23
    1bd0:	60 93 db 02 	sts	0x02DB, r22
    1bd4:	88 e0       	ldi	r24, 0x08	; 8
    1bd6:	80 93 f6 02 	sts	0x02F6, r24
    1bda:	ea db       	rcall	.-2092   	; 0x13b0 <_ZL12enter_kernelv>
    1bdc:	cf bf       	out	0x3f, r28	; 63
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <main>:
 * and will be called after the OS is initialized.
 */
int main()
{
    //EnableProfileSample1();
	kernel_init();
    1be2:	f6 dd       	rcall	.-1044   	; 0x17d0 <_Z11kernel_initv>
static void kernel_dispatch(void)
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */
    if (cur_task == NULL)
    1be4:	80 91 91 0c 	lds	r24, 0x0C91
    1be8:	90 91 92 0c 	lds	r25, 0x0C92
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	21 f4       	brne	.+8      	; 0x1bf8 <main+0x16>
    {
		error_msg = ERR_RUN_7_RTOS_INTERNAL_ERROR;
    1bf0:	88 e0       	ldi	r24, 0x08	; 8
    1bf2:	80 93 31 02 	sts	0x0231, r24
		OS_Abort();
    1bf6:	b7 de       	rcall	.-658    	; 0x1966 <OS_Abort>
        return;
    }
    if(cur_task->state != RUNNING || (cur_task == idle_task && !kernel_preemption_disabled))
    {
		if(system_task_queue.head != NULL)
    1bf8:	c7 ec       	ldi	r28, 0xC7	; 199
    1bfa:	d2 e0       	ldi	r29, 0x02	; 2
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }
        cur_task->state = RUNNING;
    1bfc:	77 24       	eor	r7, r7
    1bfe:	73 94       	inc	r7
			cur_per_metadata = periodic_dequeue(&periodic_task_queue);
            cur_task = cur_per_metadata->task;
			periodic_task_remticks = cur_per_metadata->wcet;
        }
		//Else if, use the time to complete round robin.
        else if(roundrobin_task_queue.head != NULL)
    1c00:	0f 2e       	mov	r0, r31
    1c02:	ff ec       	ldi	r31, 0xCF	; 207
    1c04:	ef 2e       	mov	r14, r31
    1c06:	f2 e0       	ldi	r31, 0x02	; 2
    1c08:	ff 2e       	mov	r15, r31
    1c0a:	f0 2d       	mov	r31, r0
            cur_task = (task_descriptor_t*)dequeue(&roundrobin_task_queue);
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
    1c0c:	0f 2e       	mov	r0, r31
    1c0e:	ff e7       	ldi	r31, 0x7F	; 127
    1c10:	4f 2e       	mov	r4, r31
    1c12:	fb e0       	ldi	r31, 0x0B	; 11
    1c14:	5f 2e       	mov	r5, r31
    1c16:	f0 2d       	mov	r31, r0
 *
 * @return The available metadata, or NULL if none available.
 */
static periodic_task_metadata_t* periodic_dequeue(periodic_task_queue_t* queue_ptr)
{
	periodic_task_metadata_t* task_ptr = queue_ptr->head;
    1c18:	0f 2e       	mov	r0, r31
    1c1a:	fb ec       	ldi	r31, 0xCB	; 203
    1c1c:	af 2e       	mov	r10, r31
    1c1e:	f2 e0       	ldi	r31, 0x02	; 2
    1c20:	bf 2e       	mov	r11, r31
    1c22:	f0 2d       	mov	r31, r0

	//If queue is not empty.
	if(queue_ptr->head != NULL)
	{
		if(queue_ptr->head == queue_ptr->tail)
    1c24:	0f 2e       	mov	r0, r31
    1c26:	fd ec       	ldi	r31, 0xCD	; 205
    1c28:	8f 2e       	mov	r8, r31
    1c2a:	f2 e0       	ldi	r31, 0x02	; 2
    1c2c:	9f 2e       	mov	r9, r31
    1c2e:	f0 2d       	mov	r31, r0
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
        {
            t = (task_descriptor_t *) dequeue(&(s->task_queue));
			*(t->data) = (int16_t) kernel_request_service_pub_data;
            t->state = READY;
    1c30:	68 94       	set
    1c32:	66 24       	eor	r6, r6
    1c34:	61 f8       	bld	r6, 1

static void budgequeue(task_queue_t* queue_ptr, task_descriptor_t* to_add)
{
	if(queue_ptr->head == NULL)
	{
		queue_ptr->head = queue_ptr->tail = to_add;
    1c36:	0f 2e       	mov	r0, r31
    1c38:	f1 ed       	ldi	r31, 0xD1	; 209
    1c3a:	2f 2e       	mov	r2, r31
    1c3c:	f2 e0       	ldi	r31, 0x02	; 2
    1c3e:	3f 2e       	mov	r3, r31
    1c40:	f0 2d       	mov	r31, r0
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */

	ticks_from_start += 1;
    current_timer_val = TCNT1;
    1c42:	0f 2e       	mov	r0, r31
    1c44:	f4 e8       	ldi	r31, 0x84	; 132
    1c46:	cf 2e       	mov	r12, r31
    1c48:	d1 2c       	mov	r13, r1
    1c4a:	f0 2d       	mov	r31, r0
    {
		error_msg = ERR_RUN_7_RTOS_INTERNAL_ERROR;
		OS_Abort();
        return;
    }
    if(cur_task->state != RUNNING || (cur_task == idle_task && !kernel_preemption_disabled))
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	eb 5f       	subi	r30, 0xFB	; 251
    1c50:	fe 4f       	sbci	r31, 0xFE	; 254
    1c52:	20 81       	ld	r18, Z
    1c54:	21 30       	cpi	r18, 0x01	; 1
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <main+0x78>
    1c58:	fa c1       	rjmp	.+1012   	; 0x204e <main+0x46c>
    1c5a:	8f 57       	subi	r24, 0x7F	; 127
    1c5c:	9b 40       	sbci	r25, 0x0B	; 11
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <main+0x80>
    1c60:	51 c0       	rjmp	.+162    	; 0x1d04 <main+0x122>
    1c62:	80 91 e5 02 	lds	r24, 0x02E5
    1c66:	90 91 e6 02 	lds	r25, 0x02E6
    1c6a:	89 2b       	or	r24, r25
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <main+0x8e>
    1c6e:	ef c1       	rjmp	.+990    	; 0x204e <main+0x46c>
    1c70:	49 c0       	rjmp	.+146    	; 0x1d04 <main+0x122>
    {
		if(system_task_queue.head != NULL)
        {
            cur_task = (task_descriptor_t*)dequeue(&system_task_queue);
    1c72:	ce 01       	movw	r24, r28
    1c74:	71 dc       	rcall	.-1822   	; 0x1558 <_ZL7dequeueP12task_queue_t>
    1c76:	90 93 92 0c 	sts	0x0C92, r25
    1c7a:	80 93 91 0c 	sts	0x0C91, r24
    1c7e:	3b c0       	rjmp	.+118    	; 0x1cf6 <main+0x114>
        }
		//Else if a period tasks is ready...
        else if(periodic_task_ready())
    1c80:	cd de       	rcall	.-614    	; 0x1a1c <_Z19periodic_task_readyv>
    1c82:	89 2b       	or	r24, r25
    1c84:	41 f1       	breq	.+80     	; 0x1cd6 <main+0xf4>
 *
 * @return The available metadata, or NULL if none available.
 */
static periodic_task_metadata_t* periodic_dequeue(periodic_task_queue_t* queue_ptr)
{
	periodic_task_metadata_t* task_ptr = queue_ptr->head;
    1c86:	d5 01       	movw	r26, r10
    1c88:	ed 91       	ld	r30, X+
    1c8a:	fc 91       	ld	r31, X

	//If queue is not empty.
	if(queue_ptr->head != NULL)
    1c8c:	30 97       	sbiw	r30, 0x00	; 0
    1c8e:	91 f0       	breq	.+36     	; 0x1cb4 <main+0xd2>
	{
		if(queue_ptr->head == queue_ptr->tail)
    1c90:	d4 01       	movw	r26, r8
    1c92:	8d 91       	ld	r24, X+
    1c94:	9c 91       	ld	r25, X
    1c96:	11 97       	sbiw	r26, 0x01	; 1
    1c98:	e8 17       	cp	r30, r24
    1c9a:	f9 07       	cpc	r31, r25
    1c9c:	31 f4       	brne	.+12     	; 0x1caa <main+0xc8>
		{
			//Last item in the queue.
			queue_ptr->head = queue_ptr->tail = NULL;
    1c9e:	1d 92       	st	X+, r1
    1ca0:	1c 92       	st	X, r1
    1ca2:	d5 01       	movw	r26, r10
    1ca4:	1d 92       	st	X+, r1
    1ca6:	1c 92       	st	X, r1
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <main+0xd2>
		}
		else
		{
			queue_ptr->head = queue_ptr->head->nextT;
    1caa:	80 85       	ldd	r24, Z+8	; 0x08
    1cac:	91 85       	ldd	r25, Z+9	; 0x09
    1cae:	d5 01       	movw	r26, r10
    1cb0:	8d 93       	st	X+, r24
    1cb2:	9c 93       	st	X, r25
        }
		//Else if a period tasks is ready...
        else if(periodic_task_ready())
        {
            /* Keep running the current PERIODIC task. */
			cur_per_metadata = periodic_dequeue(&periodic_task_queue);
    1cb4:	f0 93 90 0c 	sts	0x0C90, r31
    1cb8:	e0 93 8f 0c 	sts	0x0C8F, r30
            cur_task = cur_per_metadata->task;
    1cbc:	80 81       	ld	r24, Z
    1cbe:	91 81       	ldd	r25, Z+1	; 0x01
    1cc0:	90 93 92 0c 	sts	0x0C92, r25
    1cc4:	80 93 91 0c 	sts	0x0C91, r24
			periodic_task_remticks = cur_per_metadata->wcet;
    1cc8:	84 81       	ldd	r24, Z+4	; 0x04
    1cca:	95 81       	ldd	r25, Z+5	; 0x05
    1ccc:	90 93 8e 0c 	sts	0x0C8E, r25
    1cd0:	80 93 8d 0c 	sts	0x0C8D, r24
    1cd4:	10 c0       	rjmp	.+32     	; 0x1cf6 <main+0x114>
        }
		//Else if, use the time to complete round robin.
        else if(roundrobin_task_queue.head != NULL)
    1cd6:	f7 01       	movw	r30, r14
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	89 2b       	or	r24, r25
    1cde:	39 f0       	breq	.+14     	; 0x1cee <main+0x10c>
        {
            cur_task = (task_descriptor_t*)dequeue(&roundrobin_task_queue);
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	3a dc       	rcall	.-1932   	; 0x1558 <_ZL7dequeueP12task_queue_t>
    1ce4:	90 93 92 0c 	sts	0x0C92, r25
    1ce8:	80 93 91 0c 	sts	0x0C91, r24
    1cec:	04 c0       	rjmp	.+8      	; 0x1cf6 <main+0x114>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
    1cee:	50 92 92 0c 	sts	0x0C92, r5
    1cf2:	40 92 91 0c 	sts	0x0C91, r4
        }
        cur_task->state = RUNNING;
    1cf6:	e0 91 91 0c 	lds	r30, 0x0C91
    1cfa:	f0 91 92 0c 	lds	r31, 0x0C92
    1cfe:	eb 5f       	subi	r30, 0xFB	; 251
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	70 82       	st	Z, r7
static void kernel_main_loop(void)
{
    for(;;)
    {
        kernel_dispatch();
		kernel_preemption_disabled = 0; //Disable it after each call to OS
    1d04:	10 92 e6 02 	sts	0x02E6, r1
    1d08:	10 92 e5 02 	sts	0x02E5, r1
        exit_kernel();
    1d0c:	f8 da       	rcall	.-2576   	; 0x12fe <_ZL11exit_kernelv>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waiting queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
    1d0e:	80 91 f6 02 	lds	r24, 0x02F6
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	89 30       	cpi	r24, 0x09	; 9
    1d16:	91 05       	cpc	r25, r1
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <main+0x13a>
    1d1a:	8b c1       	rjmp	.+790    	; 0x2032 <main+0x450>
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	ee 58       	subi	r30, 0x8E	; 142
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	69 c2       	rjmp	.+1234   	; 0x21f6 <__tablejump2__>
 */
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */

	ticks_from_start += 1;
    1d24:	80 91 74 02 	lds	r24, 0x0274
    1d28:	90 91 75 02 	lds	r25, 0x0275
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	90 93 75 02 	sts	0x0275, r25
    1d32:	80 93 74 02 	sts	0x0274, r24
    current_timer_val = TCNT1;
    1d36:	d6 01       	movw	r26, r12
    1d38:	8d 91       	ld	r24, X+
    1d3a:	9c 91       	ld	r25, X
    1d3c:	90 93 73 02 	sts	0x0273, r25
    1d40:	80 93 72 02 	sts	0x0272, r24

    if(cur_task->priority == PERIODIC)
    1d44:	60 91 91 0c 	lds	r22, 0x0C91
    1d48:	70 91 92 0c 	lds	r23, 0x0C92
    1d4c:	fb 01       	movw	r30, r22
    1d4e:	ee 5f       	subi	r30, 0xFE	; 254
    1d50:	fe 4f       	sbci	r31, 0xFE	; 254
    1d52:	80 81       	ld	r24, Z
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	81 f4       	brne	.+32     	; 0x1d78 <main+0x196>
    {
		periodic_task_remticks--;
    1d58:	80 91 8d 0c 	lds	r24, 0x0C8D
    1d5c:	90 91 8e 0c 	lds	r25, 0x0C8E
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	90 93 8e 0c 	sts	0x0C8E, r25
    1d66:	80 93 8d 0c 	sts	0x0C8D, r24
        if(periodic_task_remticks == 0)
    1d6a:	89 2b       	or	r24, r25
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <main+0x18e>
    1d6e:	65 c1       	rjmp	.+714    	; 0x203a <main+0x458>
        {
			error_msg = ERR_RUN_4_PERIODIC_TOOK_TOO_LONG;
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	80 93 31 02 	sts	0x0231, r24
			OS_Abort();
    1d76:	f7 dd       	rcall	.-1042   	; 0x1966 <OS_Abort>

    case TIMER_EXPIRED:
        kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->priority == ROUND_ROBIN && cur_task->state == RUNNING)
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <main+0x19c>
    1d7c:	5e c1       	rjmp	.+700    	; 0x203a <main+0x458>
    1d7e:	fb 01       	movw	r30, r22
    1d80:	eb 5f       	subi	r30, 0xFB	; 251
    1d82:	fe 4f       	sbci	r31, 0xFE	; 254
    1d84:	80 81       	ld	r24, Z
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <main+0x1aa>
    1d8a:	57 c1       	rjmp	.+686    	; 0x203a <main+0x458>
        {
            cur_task->state = READY;
    1d8c:	60 82       	st	Z, r6
            enqueue(&roundrobin_task_queue, cur_task);
    1d8e:	c7 01       	movw	r24, r14
    1d90:	d0 db       	rcall	.-2144   	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    1d92:	53 c1       	rjmp	.+678    	; 0x203a <main+0x458>
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();
    1d94:	f8 db       	rcall	.-2064   	; 0x1586 <_ZL18kernel_create_taskv>
    1d96:	90 93 e4 02 	sts	0x02E4, r25
    1d9a:	80 93 e3 02 	sts	0x02E3, r24

        /* Check if new task has higher priority, and that it wasn't an ISR
         * making the request.
         */

        if(!kernel_request_retval && kernel_should_preempt())
    1d9e:	80 91 e3 02 	lds	r24, 0x02E3
    1da2:	90 91 e4 02 	lds	r25, 0x02E4
    1da6:	89 2b       	or	r24, r25
    1da8:	a1 f5       	brne	.+104    	; 0x1e12 <main+0x230>
    1daa:	63 de       	rcall	.-826    	; 0x1a72 <_ZL21kernel_should_preemptv>
    1dac:	89 2b       	or	r24, r25
    1dae:	89 f1       	breq	.+98     	; 0x1e12 <main+0x230>
        {
			cur_task->state = READY;
    1db0:	80 91 91 0c 	lds	r24, 0x0C91
    1db4:	90 91 92 0c 	lds	r25, 0x0C92
    1db8:	fc 01       	movw	r30, r24
    1dba:	eb 5f       	subi	r30, 0xFB	; 251
    1dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dbe:	60 82       	st	Z, r6
			//If we have been paused and are round robin, enqueue at the front
			//to run next time.
            if(cur_task->priority == ROUND_ROBIN)
    1dc0:	33 97       	sbiw	r30, 0x03	; 3
    1dc2:	20 81       	ld	r18, Z
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	d1 f4       	brne	.+52     	; 0x1dfc <main+0x21a>
}


static void budgequeue(task_queue_t* queue_ptr, task_descriptor_t* to_add)
{
	if(queue_ptr->head == NULL)
    1dc8:	f7 01       	movw	r30, r14
    1dca:	20 81       	ld	r18, Z
    1dcc:	31 81       	ldd	r19, Z+1	; 0x01
    1dce:	21 15       	cp	r18, r1
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	59 f4       	brne	.+22     	; 0x1dea <main+0x208>
	{
		queue_ptr->head = queue_ptr->tail = to_add;
    1dd4:	d1 01       	movw	r26, r2
    1dd6:	8d 93       	st	X+, r24
    1dd8:	9c 93       	st	X, r25
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	80 83       	st	Z, r24
		to_add->next = NULL;
    1dde:	fc 01       	movw	r30, r24
    1de0:	e6 5f       	subi	r30, 0xF6	; 246
    1de2:	fe 4f       	sbci	r31, 0xFE	; 254
    1de4:	11 82       	std	Z+1, r1	; 0x01
    1de6:	10 82       	st	Z, r1
    1de8:	28 c1       	rjmp	.+592    	; 0x203a <main+0x458>
	}
	else
	{
		to_add->next = queue_ptr->head;
    1dea:	fc 01       	movw	r30, r24
    1dec:	e6 5f       	subi	r30, 0xF6	; 246
    1dee:	fe 4f       	sbci	r31, 0xFE	; 254
    1df0:	31 83       	std	Z+1, r19	; 0x01
    1df2:	20 83       	st	Z, r18
		queue_ptr->head = to_add;
    1df4:	f7 01       	movw	r30, r14
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
    1dfa:	1f c1       	rjmp	.+574    	; 0x203a <main+0x458>
			//to run next time.
            if(cur_task->priority == ROUND_ROBIN)
            {
                budgequeue(&roundrobin_task_queue, cur_task);
            }
			else if(cur_task->priority == PERIODIC)
    1dfc:	21 30       	cpi	r18, 0x01	; 1
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <main+0x220>
    1e00:	1c c1       	rjmp	.+568    	; 0x203a <main+0x458>
			{
				//If we are a periodic which as been pre-empted, place us back in the
				//waiting queue without updating our next stamp, so we remain at the front.
				periodic_enqueue(&periodic_task_queue, cur_task->periodic_desc);
    1e02:	fc 01       	movw	r30, r24
    1e04:	ed 5f       	subi	r30, 0xFD	; 253
    1e06:	fe 4f       	sbci	r31, 0xFE	; 254
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	c5 01       	movw	r24, r10
    1e0e:	29 db       	rcall	.-2478   	; 0x1462 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>
    1e10:	14 c1       	rjmp	.+552    	; 0x203a <main+0x458>
			}
        }
		else if(kernel_request_retval == 1)
    1e12:	80 91 e3 02 	lds	r24, 0x02E3
    1e16:	90 91 e4 02 	lds	r25, 0x02E4
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	21 f4       	brne	.+8      	; 0x1e26 <main+0x244>
		{
			//Too many tasks.
			error_msg = ERR_RUN_1_TOO_MANY_TASKS;
    1e1e:	82 e0       	ldi	r24, 0x02	; 2
    1e20:	80 93 31 02 	sts	0x0231, r24
			OS_Abort();
    1e24:	a0 dd       	rcall	.-1216   	; 0x1966 <OS_Abort>

		}
		else if(kernel_request_retval == 2)
    1e26:	80 91 e3 02 	lds	r24, 0x02E3
    1e2a:	90 91 e4 02 	lds	r25, 0x02E4
    1e2e:	02 97       	sbiw	r24, 0x02	; 2
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <main+0x252>
    1e32:	03 c1       	rjmp	.+518    	; 0x203a <main+0x458>
		{
			//Too many periodic tasks.
			error_msg = ERR_RUN_2_TOO_MANY_PERIODIC_TASKS;
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	80 93 31 02 	sts	0x0231, r24
			OS_Abort();
    1e3a:	95 dd       	rcall	.-1238   	; 0x1966 <OS_Abort>
		}

        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
    1e3c:	00 91 91 0c 	lds	r16, 0x0C91
    1e40:	10 91 92 0c 	lds	r17, 0x0C92
    1e44:	fb e0       	ldi	r31, 0x0B	; 11
    1e46:	0f 37       	cpi	r16, 0x7F	; 127
    1e48:	1f 07       	cpc	r17, r31
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <main+0x26c>
    1e4c:	f6 c0       	rjmp	.+492    	; 0x203a <main+0x458>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
    1e4e:	f8 01       	movw	r30, r16
    1e50:	eb 5f       	subi	r30, 0xFB	; 251
    1e52:	fe 4f       	sbci	r31, 0xFE	; 254
    1e54:	10 82       	st	Z, r1
    if(cur_task->priority == PERIODIC && cur_task->periodic_desc != NULL)
    1e56:	33 97       	sbiw	r30, 0x03	; 3
    1e58:	80 81       	ld	r24, Z
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <main+0x29c>
    1e5e:	31 96       	adiw	r30, 0x01	; 1
    1e60:	01 90       	ld	r0, Z+
    1e62:	f0 81       	ld	r31, Z
    1e64:	e0 2d       	mov	r30, r0
    1e66:	30 97       	sbiw	r30, 0x00	; 0
    1e68:	51 f0       	breq	.+20     	; 0x1e7e <main+0x29c>
    {
		//TODO: Remove from our construct.
		cur_task->periodic_desc->task = NULL;
    1e6a:	11 82       	std	Z+1, r1	; 0x01
    1e6c:	10 82       	st	Z, r1
		periodic_enqueue(&periodic_dead_pool_queue, cur_task->periodic_desc);
    1e6e:	f8 01       	movw	r30, r16
    1e70:	ed 5f       	subi	r30, 0xFD	; 253
    1e72:	fe 4f       	sbci	r31, 0xFE	; 254
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	83 ed       	ldi	r24, 0xD3	; 211
    1e7a:	92 e0       	ldi	r25, 0x02	; 2
    1e7c:	f2 da       	rcall	.-2588   	; 0x1462 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>
    }
    enqueue(&dead_pool_queue, cur_task);
    1e7e:	b8 01       	movw	r22, r16
    1e80:	87 ed       	ldi	r24, 0xD7	; 215
    1e82:	92 e0       	ldi	r25, 0x02	; 2
    1e84:	56 db       	rcall	.-2388   	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    1e86:	d9 c0       	rjmp	.+434    	; 0x203a <main+0x458>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		cur_task->state = READY;
    1e88:	60 91 91 0c 	lds	r22, 0x0C91
    1e8c:	70 91 92 0c 	lds	r23, 0x0C92
    1e90:	fb 01       	movw	r30, r22
    1e92:	eb 5f       	subi	r30, 0xFB	; 251
    1e94:	fe 4f       	sbci	r31, 0xFE	; 254
    1e96:	60 82       	st	Z, r6
		switch(cur_task->priority)
    1e98:	33 97       	sbiw	r30, 0x03	; 3
    1e9a:	80 81       	ld	r24, Z
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	39 f0       	breq	.+14     	; 0x1eae <main+0x2cc>
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	a9 f0       	breq	.+42     	; 0x1ece <main+0x2ec>
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	c9 c0       	rjmp	.+402    	; 0x203a <main+0x458>
		{
			case SYSTEM:
				enqueue(&system_task_queue, cur_task);
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	43 db       	rcall	.-2426   	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    1eac:	c6 c0       	rjmp	.+396    	; 0x203a <main+0x458>
				break;

			case PERIODIC:
				//If we did execute in time
				cur_per_metadata->next += cur_per_metadata->period;
    1eae:	e0 91 8f 0c 	lds	r30, 0x0C8F
    1eb2:	f0 91 90 0c 	lds	r31, 0x0C90
    1eb6:	26 81       	ldd	r18, Z+6	; 0x06
    1eb8:	37 81       	ldd	r19, Z+7	; 0x07
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	82 0f       	add	r24, r18
    1ec0:	93 1f       	adc	r25, r19
    1ec2:	97 83       	std	Z+7, r25	; 0x07
    1ec4:	86 83       	std	Z+6, r24	; 0x06
				periodic_enqueue(&periodic_task_queue, cur_per_metadata);
    1ec6:	bf 01       	movw	r22, r30
    1ec8:	c5 01       	movw	r24, r10
    1eca:	cb da       	rcall	.-2666   	; 0x1462 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>
    1ecc:	b6 c0       	rjmp	.+364    	; 0x203a <main+0x458>
				break;

			case ROUND_ROBIN:
				//If the task calls Task_Next() it is yielding, and is moved to the back.
				enqueue(&roundrobin_task_queue, cur_task);
    1ece:	c7 01       	movw	r24, r14
    1ed0:	30 db       	rcall	.-2464   	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    1ed2:	b3 c0       	rjmp	.+358    	; 0x203a <main+0x458>
 * kernel_request_service_init_retval pointer. Set the
 * pointer to 0 to imply a failure
 */
static void kernel_service_init()
{
	if (num_services < MAXSERVICES)
    1ed4:	20 91 76 02 	lds	r18, 0x0276
    1ed8:	2a 30       	cpi	r18, 0x0A	; 10
    1eda:	70 f4       	brcc	.+28     	; 0x1ef8 <main+0x316>
	{
		kernel_request_service_init_retval = &(service_list[num_services]);
    1edc:	38 e0       	ldi	r19, 0x08	; 8
    1ede:	23 9f       	mul	r18, r19
    1ee0:	c0 01       	movw	r24, r0
    1ee2:	11 24       	eor	r1, r1
    1ee4:	89 58       	subi	r24, 0x89	; 137
    1ee6:	9d 4f       	sbci	r25, 0xFD	; 253
    1ee8:	90 93 e2 02 	sts	0x02E2, r25
    1eec:	80 93 e1 02 	sts	0x02E1, r24
		num_services += 1;
    1ef0:	2f 5f       	subi	r18, 0xFF	; 255
    1ef2:	20 93 76 02 	sts	0x0276, r18
    1ef6:	a1 c0       	rjmp	.+322    	; 0x203a <main+0x458>
	}
	else
	{
		error_msg = ERR_RUN_8_SERVICE_CAPACITY_REACHED;
    1ef8:	89 e0       	ldi	r24, 0x09	; 9
    1efa:	80 93 31 02 	sts	0x0231, r24
		OS_Abort();
    1efe:	33 dd       	rcall	.-1434   	; 0x1966 <OS_Abort>
/**
 * Subscribe a task to a given service
 */
static void kernel_service_sub()
{
	if (kernel_request_service_descriptor == NULL)
    1f00:	80 91 df 02 	lds	r24, 0x02DF
    1f04:	90 91 e0 02 	lds	r25, 0x02E0
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <main+0x332>
	{
		error_msg = ERR_RUN_9_INVALID_SERVICE;
    1f0c:	8a e0       	ldi	r24, 0x0A	; 10
    1f0e:	80 93 31 02 	sts	0x0231, r24
        OS_Abort();
    1f12:	29 dd       	rcall	.-1454   	; 0x1966 <OS_Abort>
	}
    else if (cur_task->priority == PERIODIC)
    1f14:	00 91 91 0c 	lds	r16, 0x0C91
    1f18:	10 91 92 0c 	lds	r17, 0x0C92
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	ee 5f       	subi	r30, 0xFE	; 254
    1f20:	fe 4f       	sbci	r31, 0xFE	; 254
    1f22:	20 81       	ld	r18, Z
    1f24:	21 30       	cpi	r18, 0x01	; 1
    1f26:	21 f4       	brne	.+8      	; 0x1f30 <main+0x34e>
    {
        error_msg = ERR_RUN_10_PERIODIC_SUBSCRIBE;
    1f28:	8b e0       	ldi	r24, 0x0B	; 11
    1f2a:	80 93 31 02 	sts	0x0231, r24
        OS_Abort();
    1f2e:	1b dd       	rcall	.-1482   	; 0x1966 <OS_Abort>
    }
    else
    {
        SERVICE * s = (SERVICE *) kernel_request_service_descriptor;
        cur_task->data = (int16_t *) kernel_request_service_sub_data;
    1f30:	f8 01       	movw	r30, r16
    1f32:	e8 5f       	subi	r30, 0xF8	; 248
    1f34:	fe 4f       	sbci	r31, 0xFE	; 254
    1f36:	20 91 dd 02 	lds	r18, 0x02DD
    1f3a:	30 91 de 02 	lds	r19, 0x02DE
    1f3e:	31 83       	std	Z+1, r19	; 0x01
    1f40:	20 83       	st	Z, r18
	    enqueue(&(s->task_queue), cur_task);
    1f42:	b8 01       	movw	r22, r16
    1f44:	f6 da       	rcall	.-2580   	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>

        // Block the task until someone publishes to the service
        cur_task->state = WAITING;
    1f46:	f8 01       	movw	r30, r16
    1f48:	eb 5f       	subi	r30, 0xFB	; 251
    1f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	80 83       	st	Z, r24
    1f50:	74 c0       	rjmp	.+232    	; 0x203a <main+0x458>
/**
 * Publish a value to a service
 */
static void kernel_service_pub()
{
	if (kernel_request_service_descriptor == NULL)
    1f52:	00 91 df 02 	lds	r16, 0x02DF
    1f56:	10 91 e0 02 	lds	r17, 0x02E0
    1f5a:	01 15       	cp	r16, r1
    1f5c:	11 05       	cpc	r17, r1
    1f5e:	71 f5       	brne	.+92     	; 0x1fbc <main+0x3da>
	{
    	error_msg = ERR_RUN_9_INVALID_SERVICE;
    1f60:	8a e0       	ldi	r24, 0x0A	; 10
    1f62:	80 93 31 02 	sts	0x0231, r24
    	OS_Abort();
    1f66:	ff dc       	rcall	.-1538   	; 0x1966 <OS_Abort>

        // Release the tasks! TODO: Place them in the expected ready queues
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
        {
            t = (task_descriptor_t *) dequeue(&(s->task_queue));
    1f68:	c8 01       	movw	r24, r16
    1f6a:	f6 da       	rcall	.-2580   	; 0x1558 <_ZL7dequeueP12task_queue_t>
			*(t->data) = (int16_t) kernel_request_service_pub_data;
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	e8 5f       	subi	r30, 0xF8	; 248
    1f70:	fe 4f       	sbci	r31, 0xFE	; 254
    1f72:	01 90       	ld	r0, Z+
    1f74:	f0 81       	ld	r31, Z
    1f76:	e0 2d       	mov	r30, r0
    1f78:	20 91 db 02 	lds	r18, 0x02DB
    1f7c:	30 91 dc 02 	lds	r19, 0x02DC
    1f80:	31 83       	std	Z+1, r19	; 0x01
    1f82:	20 83       	st	Z, r18
            t->state = READY;
    1f84:	fc 01       	movw	r30, r24
    1f86:	eb 5f       	subi	r30, 0xFB	; 251
    1f88:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8a:	60 82       	st	Z, r6
            switch(t->priority)
    1f8c:	33 97       	sbiw	r30, 0x03	; 3
    1f8e:	20 81       	ld	r18, Z
    1f90:	21 30       	cpi	r18, 0x01	; 1
    1f92:	41 f0       	breq	.+16     	; 0x1fa4 <main+0x3c2>
    1f94:	22 30       	cpi	r18, 0x02	; 2
    1f96:	51 f0       	breq	.+20     	; 0x1fac <main+0x3ca>
    1f98:	21 11       	cpse	r18, r1
    1f9a:	0c c0       	rjmp	.+24     	; 0x1fb4 <main+0x3d2>
            {
                case SYSTEM:
                    enqueue(&system_task_queue, t);
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	c8 da       	rcall	.-2672   	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    1fa2:	0c c0       	rjmp	.+24     	; 0x1fbc <main+0x3da>
                    break;
                case PERIODIC:
                    // This should have never happened. Error out
                    error_msg = ERR_RUN_11_PERIODIC_FOUND_WHEN_PUBLISHING;
    1fa4:	8c e0       	ldi	r24, 0x0C	; 12
    1fa6:	80 93 31 02 	sts	0x0231, r24
                    OS_Abort();
    1faa:	dd dc       	rcall	.-1606   	; 0x1966 <OS_Abort>
                    break;
                case ROUND_ROBIN:
                    enqueue(&roundrobin_task_queue, t);
    1fac:	bc 01       	movw	r22, r24
    1fae:	c7 01       	movw	r24, r14
    1fb0:	c0 da       	rcall	.-2688   	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    1fb2:	04 c0       	rjmp	.+8      	; 0x1fbc <main+0x3da>
                    break;
                default:
                    error_msg = ERR_RUN_12_TASK_WITHOUT_PRIORITY;
    1fb4:	8d e0       	ldi	r24, 0x0D	; 13
    1fb6:	80 93 31 02 	sts	0x0231, r24
                    OS_Abort();
    1fba:	d5 dc       	rcall	.-1622   	; 0x1966 <OS_Abort>
    {
        SERVICE * s = (SERVICE *) kernel_request_service_descriptor;

        // Release the tasks! TODO: Place them in the expected ready queues
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
    1fbc:	d8 01       	movw	r26, r16
    1fbe:	8d 91       	ld	r24, X+
    1fc0:	9c 91       	ld	r25, X
    1fc2:	89 2b       	or	r24, r25
    1fc4:	89 f6       	brne	.-94     	; 0x1f68 <main+0x386>
        kernel_service_sub();
        break;

    case SERVICE_PUB:
        kernel_service_pub();
		if(kernel_should_preempt())
    1fc6:	55 dd       	rcall	.-1366   	; 0x1a72 <_ZL21kernel_should_preemptv>
    1fc8:	89 2b       	or	r24, r25
    1fca:	b9 f1       	breq	.+110    	; 0x203a <main+0x458>
		{
			cur_task->state = READY;
    1fcc:	60 91 91 0c 	lds	r22, 0x0C91
    1fd0:	70 91 92 0c 	lds	r23, 0x0C92
    1fd4:	fb 01       	movw	r30, r22
    1fd6:	eb 5f       	subi	r30, 0xFB	; 251
    1fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fda:	60 82       	st	Z, r6
			switch(cur_task->priority)
    1fdc:	33 97       	sbiw	r30, 0x03	; 3
    1fde:	80 81       	ld	r24, Z
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	39 f0       	breq	.+14     	; 0x1ff2 <main+0x410>
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	61 f0       	breq	.+24     	; 0x2000 <main+0x41e>
    1fe8:	81 11       	cpse	r24, r1
    1fea:	27 c0       	rjmp	.+78     	; 0x203a <main+0x458>
			{
				case SYSTEM:
				enqueue(&system_task_queue, cur_task);
    1fec:	ce 01       	movw	r24, r28
    1fee:	a1 da       	rcall	.-2750   	; 0x1532 <_ZL7enqueueP12task_queue_tP9td_struct>
    1ff0:	24 c0       	rjmp	.+72     	; 0x203a <main+0x458>
				break;

				case PERIODIC:
				//Assume we did not finish out run.
				periodic_enqueue(&periodic_task_queue, cur_per_metadata);
    1ff2:	60 91 8f 0c 	lds	r22, 0x0C8F
    1ff6:	70 91 90 0c 	lds	r23, 0x0C90
    1ffa:	c5 01       	movw	r24, r10
    1ffc:	32 da       	rcall	.-2972   	; 0x1462 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>
    1ffe:	1d c0       	rjmp	.+58     	; 0x203a <main+0x458>
}


static void budgequeue(task_queue_t* queue_ptr, task_descriptor_t* to_add)
{
	if(queue_ptr->head == NULL)
    2000:	f7 01       	movw	r30, r14
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	59 f4       	brne	.+22     	; 0x2020 <main+0x43e>
	{
		queue_ptr->head = queue_ptr->tail = to_add;
    200a:	d1 01       	movw	r26, r2
    200c:	6d 93       	st	X+, r22
    200e:	7c 93       	st	X, r23
    2010:	71 83       	std	Z+1, r23	; 0x01
    2012:	60 83       	st	Z, r22
		to_add->next = NULL;
    2014:	fb 01       	movw	r30, r22
    2016:	e6 5f       	subi	r30, 0xF6	; 246
    2018:	fe 4f       	sbci	r31, 0xFE	; 254
    201a:	11 82       	std	Z+1, r1	; 0x01
    201c:	10 82       	st	Z, r1
    201e:	0d c0       	rjmp	.+26     	; 0x203a <main+0x458>
	}
	else
	{
		to_add->next = queue_ptr->head;
    2020:	fb 01       	movw	r30, r22
    2022:	e6 5f       	subi	r30, 0xF6	; 246
    2024:	fe 4f       	sbci	r31, 0xFE	; 254
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
		queue_ptr->head = to_add;
    202a:	f7 01       	movw	r30, r14
    202c:	71 83       	std	Z+1, r23	; 0x01
    202e:	60 83       	st	Z, r22
    2030:	04 c0       	rjmp	.+8      	; 0x203a <main+0x458>
		}
        break;

    default:
        /* Should never happen */
        error_msg = 2; // TODO: FIXME //ERR_RUN_8_RTOS_INTERNAL_ERROR;
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	80 93 31 02 	sts	0x0231, r24
        OS_Abort();
    2038:	96 dc       	rcall	.-1748   	; 0x1966 <OS_Abort>
        break;
    }

    kernel_request = NONE;
    203a:	10 92 f6 02 	sts	0x02F6, r1
static void kernel_dispatch(void)
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */
    if (cur_task == NULL)
    203e:	80 91 91 0c 	lds	r24, 0x0C91
    2042:	90 91 92 0c 	lds	r25, 0x0C92
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	09 f0       	breq	.+2      	; 0x204c <main+0x46a>
    204a:	00 ce       	rjmp	.-1024   	; 0x1c4c <main+0x6a>
    204c:	d1 cd       	rjmp	.-1118   	; 0x1bf0 <main+0xe>
		OS_Abort();
        return;
    }
    if(cur_task->state != RUNNING || (cur_task == idle_task && !kernel_preemption_disabled))
    {
		if(system_task_queue.head != NULL)
    204e:	88 81       	ld	r24, Y
    2050:	99 81       	ldd	r25, Y+1	; 0x01
    2052:	89 2b       	or	r24, r25
    2054:	09 f0       	breq	.+2      	; 0x2058 <main+0x476>
    2056:	0d ce       	rjmp	.-998    	; 0x1c72 <main+0x90>
    2058:	13 ce       	rjmp	.-986    	; 0x1c80 <main+0x9e>

0000205a <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
    205a:	1f 92       	push	r1
    205c:	0f 92       	push	r0
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	0f 92       	push	r0
    2062:	11 24       	eor	r1, r1
    2064:	0b b6       	in	r0, 0x3b	; 59
    2066:	0f 92       	push	r0
    2068:	5f 93       	push	r21
    206a:	6f 93       	push	r22
    206c:	7f 93       	push	r23
    206e:	8f 93       	push	r24
    2070:	9f 93       	push	r25
    2072:	af 93       	push	r26
    2074:	bf 93       	push	r27
    2076:	ef 93       	push	r30
    2078:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
    207a:	e0 ec       	ldi	r30, 0xC0	; 192
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	88 23       	and	r24, r24
    2082:	ec f7       	brge	.-6      	; 0x207e <__vector_25+0x24>

	//PORTB ^= _BV(PB7);

	rx[rxn] = UDR0;
    2084:	e0 91 f8 0c 	lds	r30, 0x0CF8
    2088:	f0 91 f9 0c 	lds	r31, 0x0CF9
    208c:	80 91 c6 00 	lds	r24, 0x00C6
    2090:	ec 56       	subi	r30, 0x6C	; 108
    2092:	f3 4f       	sbci	r31, 0xF3	; 243
    2094:	80 83       	st	Z, r24
	rxn = (rxn + 1) % TRACE_UART_BUFFER_SIZE;
    2096:	80 91 f8 0c 	lds	r24, 0x0CF8
    209a:	90 91 f9 0c 	lds	r25, 0x0CF9
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	64 e6       	ldi	r22, 0x64	; 100
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	95 d0       	rcall	.+298    	; 0x21d0 <__divmodhi4>
    20a6:	90 93 f9 0c 	sts	0x0CF9, r25
    20aa:	80 93 f8 0c 	sts	0x0CF8, r24
	uart_rx = 1; // notify main of receipt of data.
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	80 93 93 0c 	sts	0x0C93, r24
	//PORTB = PORTB | _BV(PINB1);
}
    20b4:	ff 91       	pop	r31
    20b6:	ef 91       	pop	r30
    20b8:	bf 91       	pop	r27
    20ba:	af 91       	pop	r26
    20bc:	9f 91       	pop	r25
    20be:	8f 91       	pop	r24
    20c0:	7f 91       	pop	r23
    20c2:	6f 91       	pop	r22
    20c4:	5f 91       	pop	r21
    20c6:	0f 90       	pop	r0
    20c8:	0b be       	out	0x3b, r0	; 59
    20ca:	0f 90       	pop	r0
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	0f 90       	pop	r0
    20d0:	1f 90       	pop	r1
    20d2:	18 95       	reti

000020d4 <_Z16Roomba_Send_Byteh>:

	// poll the uart status register until it says that
	// the data register is empty and ready to use
	// UDREn it is set/1 when the transmit buffer is empty,
	// else it is cleared/0.
	while(! (UCSR1A & (1<<UDRE1)));
    20d4:	e8 ec       	ldi	r30, 0xC8	; 200
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	90 81       	ld	r25, Z
    20da:	95 ff       	sbrs	r25, 5
    20dc:	fd cf       	rjmp	.-6      	; 0x20d8 <_Z16Roomba_Send_Byteh+0x4>

	// Put the data into the register in order to be sent out.
	// writing to this register clears the UDREn
	UDR1 = data_out;
    20de:	80 93 ce 00 	sts	0x00CE, r24
    20e2:	08 95       	ret

000020e4 <_Z16Roomba_UART_Init9_uart_bps>:
}

void Roomba_UART_Init(UART_BPS baud){
	uint8_t sreg = SREG;
    20e4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    20e6:	f8 94       	cli
	// Make sure I/O clock to USART1 is enabled
	// PRR<n> - Power Reduction Register 1
	// PRUSART<n> - Power Reduction USART 1
	// write a 1 to shut this down
	// 0 to turn on??
	PRR1 &= ~(1 << PRUSART1);
    20e8:	e5 e6       	ldi	r30, 0x65	; 101
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	90 81       	ld	r25, Z
    20ee:	9e 7f       	andi	r25, 0xFE	; 254
    20f0:	90 83       	st	Z, r25
	// 16 assumes normal async mode
	// uint16_t baud_rate = (F_CPU/16/target_baud - 1);
	// UBBR0H = (uint8_t) baud_rate >> 8;
	// UBBR0H = (uint8_t) baud_rate;

	switch(baud) {
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	69 f0       	breq	.+26     	; 0x2110 <_Z16Roomba_UART_Init9_uart_bps+0x2c>
    20f6:	28 f0       	brcs	.+10     	; 0x2102 <_Z16Roomba_UART_Init9_uart_bps+0x1e>
    20f8:	82 30       	cpi	r24, 0x02	; 2
    20fa:	89 f0       	breq	.+34     	; 0x211e <_Z16Roomba_UART_Init9_uart_bps+0x3a>
    20fc:	83 30       	cpi	r24, 0x03	; 3
    20fe:	b1 f0       	breq	.+44     	; 0x212c <_Z16Roomba_UART_Init9_uart_bps+0x48>
    2100:	1c c0       	rjmp	.+56     	; 0x213a <_Z16Roomba_UART_Init9_uart_bps+0x56>
		case UART_19200:
			UBRR1 = 51;
    2102:	83 e3       	ldi	r24, 0x33	; 51
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	90 93 cd 00 	sts	0x00CD, r25
    210a:	80 93 cc 00 	sts	0x00CC, r24
			break;
    210e:	1b c0       	rjmp	.+54     	; 0x2146 <_Z16Roomba_UART_Init9_uart_bps+0x62>
		case UART_38400:
			UBRR1 = 25;
    2110:	89 e1       	ldi	r24, 0x19	; 25
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	90 93 cd 00 	sts	0x00CD, r25
    2118:	80 93 cc 00 	sts	0x00CC, r24
			break;
    211c:	14 c0       	rjmp	.+40     	; 0x2146 <_Z16Roomba_UART_Init9_uart_bps+0x62>
		case UART_57600:
			UBRR1 = 16;
    211e:	80 e1       	ldi	r24, 0x10	; 16
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	90 93 cd 00 	sts	0x00CD, r25
    2126:	80 93 cc 00 	sts	0x00CC, r24
			break;
    212a:	0d c0       	rjmp	.+26     	; 0x2146 <_Z16Roomba_UART_Init9_uart_bps+0x62>
		case UART_115200:
			UBRR1 = 8;
    212c:	88 e0       	ldi	r24, 0x08	; 8
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	90 93 cd 00 	sts	0x00CD, r25
    2134:	80 93 cc 00 	sts	0x00CC, r24
			break;
    2138:	06 c0       	rjmp	.+12     	; 0x2146 <_Z16Roomba_UART_Init9_uart_bps+0x62>
		default:
			// 58 823??
			UBRR1 = 16;
    213a:	80 e1       	ldi	r24, 0x10	; 16
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	90 93 cd 00 	sts	0x00CD, r25
    2142:	80 93 cc 00 	sts	0x00CC, r24
	}

	// Clear USART Transmit complete flag, normal USART transmission speed
	UCSR1A = (1 << TXC1) | (0 << U2X1) | ( 1 << RXC1);
    2146:	e8 ec       	ldi	r30, 0xC8	; 200
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 ec       	ldi	r24, 0xC0	; 192
    214c:	80 83       	st	Z, r24

	// Enable receiver, transmitter, and rx complete interrupt.
	// Enable transmission
	UCSR1B = (1<<TXEN1) | (1 << RXEN1) | ( 1 << RXCIE1);
    214e:	88 e9       	ldi	r24, 0x98	; 152
    2150:	80 93 c9 00 	sts	0x00C9, r24

	// 8-bit data, 2 bit stop
	// UCSR1C = ((1<<UCSZ11)|(1<<UCSZ10));

	// 8-bit data, 2 bit stop
	UCSR1C = (1<<USBS1) | (1<<UCSZ10) | (1<<UCSZ11);
    2154:	8e e0       	ldi	r24, 0x0E	; 14
    2156:	80 93 ca 00 	sts	0x00CA, r24

	// disable 2x speed
	UCSR1A &= ~(1<<U2X1);
    215a:	80 81       	ld	r24, Z
    215c:	8d 7f       	andi	r24, 0xFD	; 253
    215e:	80 83       	st	Z, r24

	SREG = sreg;
    2160:	2f bf       	out	0x3f, r18	; 63
    2162:	08 95       	ret

00002164 <_Z19uart_bytes_receivedv>:
}

uint8_t uart_bytes_received(void)
{
	return uart_buffer_index;
    2164:	80 91 fa 0c 	lds	r24, 0x0CFA
}
    2168:	08 95       	ret

0000216a <_Z18uart_reset_receivev>:

void uart_reset_receive(void)
{
	uart_buffer_index = 0;
    216a:	10 92 fa 0c 	sts	0x0CFA, r1
    216e:	08 95       	ret

00002170 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    2170:	1f 92       	push	r1
    2172:	0f 92       	push	r0
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	0f 92       	push	r0
    2178:	11 24       	eor	r1, r1
    217a:	0b b6       	in	r0, 0x3b	; 59
    217c:	0f 92       	push	r0
    217e:	8f 93       	push	r24
    2180:	9f 93       	push	r25
    2182:	ef 93       	push	r30
    2184:	ff 93       	push	r31
	// FEn - frame error
	// DORn - data overrun
	// UPEn - uart pairty error
    uart_buffer[uart_buffer_index] = UDR1;
    2186:	e0 91 fa 0c 	lds	r30, 0x0CFA
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 91 ce 00 	lds	r24, 0x00CE
    2190:	e5 50       	subi	r30, 0x05	; 5
    2192:	f3 4f       	sbci	r31, 0xF3	; 243
    2194:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    2196:	80 91 fa 0c 	lds	r24, 0x0CFA
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	8f 71       	andi	r24, 0x1F	; 31
    21a0:	90 78       	andi	r25, 0x80	; 128
    21a2:	80 93 fa 0c 	sts	0x0CFA, r24
}
    21a6:	ff 91       	pop	r31
    21a8:	ef 91       	pop	r30
    21aa:	9f 91       	pop	r25
    21ac:	8f 91       	pop	r24
    21ae:	0f 90       	pop	r0
    21b0:	0b be       	out	0x3b, r0	; 59
    21b2:	0f 90       	pop	r0
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	0f 90       	pop	r0
    21b8:	1f 90       	pop	r1
    21ba:	18 95       	reti

000021bc <_Z13uart_get_bytei>:

uint8_t uart_get_byte(int index)
{
	if (index < UART_BUFFER_SIZE)
    21bc:	80 32       	cpi	r24, 0x20	; 32
    21be:	91 05       	cpc	r25, r1
    21c0:	2c f4       	brge	.+10     	; 0x21cc <_Z13uart_get_bytei+0x10>
	{
		return uart_buffer[index];
    21c2:	fc 01       	movw	r30, r24
    21c4:	e5 50       	subi	r30, 0x05	; 5
    21c6:	f3 4f       	sbci	r31, 0xF3	; 243
    21c8:	80 81       	ld	r24, Z
    21ca:	08 95       	ret
	}
	return 0;
    21cc:	80 e0       	ldi	r24, 0x00	; 0
}
    21ce:	08 95       	ret

000021d0 <__divmodhi4>:
    21d0:	97 fb       	bst	r25, 7
    21d2:	07 2e       	mov	r0, r23
    21d4:	16 f4       	brtc	.+4      	; 0x21da <__divmodhi4+0xa>
    21d6:	00 94       	com	r0
    21d8:	06 d0       	rcall	.+12     	; 0x21e6 <__divmodhi4_neg1>
    21da:	77 fd       	sbrc	r23, 7
    21dc:	08 d0       	rcall	.+16     	; 0x21ee <__divmodhi4_neg2>
    21de:	11 d0       	rcall	.+34     	; 0x2202 <__udivmodhi4>
    21e0:	07 fc       	sbrc	r0, 7
    21e2:	05 d0       	rcall	.+10     	; 0x21ee <__divmodhi4_neg2>
    21e4:	3e f4       	brtc	.+14     	; 0x21f4 <__divmodhi4_exit>

000021e6 <__divmodhi4_neg1>:
    21e6:	90 95       	com	r25
    21e8:	81 95       	neg	r24
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	08 95       	ret

000021ee <__divmodhi4_neg2>:
    21ee:	70 95       	com	r23
    21f0:	61 95       	neg	r22
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255

000021f4 <__divmodhi4_exit>:
    21f4:	08 95       	ret

000021f6 <__tablejump2__>:
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31

000021fa <__tablejump__>:
    21fa:	05 90       	lpm	r0, Z+
    21fc:	f4 91       	lpm	r31, Z
    21fe:	e0 2d       	mov	r30, r0
    2200:	19 94       	eijmp

00002202 <__udivmodhi4>:
    2202:	aa 1b       	sub	r26, r26
    2204:	bb 1b       	sub	r27, r27
    2206:	51 e1       	ldi	r21, 0x11	; 17
    2208:	07 c0       	rjmp	.+14     	; 0x2218 <__udivmodhi4_ep>

0000220a <__udivmodhi4_loop>:
    220a:	aa 1f       	adc	r26, r26
    220c:	bb 1f       	adc	r27, r27
    220e:	a6 17       	cp	r26, r22
    2210:	b7 07       	cpc	r27, r23
    2212:	10 f0       	brcs	.+4      	; 0x2218 <__udivmodhi4_ep>
    2214:	a6 1b       	sub	r26, r22
    2216:	b7 0b       	sbc	r27, r23

00002218 <__udivmodhi4_ep>:
    2218:	88 1f       	adc	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	5a 95       	dec	r21
    221e:	a9 f7       	brne	.-22     	; 0x220a <__udivmodhi4_loop>
    2220:	80 95       	com	r24
    2222:	90 95       	com	r25
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	08 95       	ret

0000222a <_exit>:
    222a:	f8 94       	cli

0000222c <__stop_program>:
    222c:	ff cf       	rjmp	.-2      	; 0x222c <__stop_program>
