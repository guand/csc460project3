
RoombaVersion3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800200  00002be2  00002c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b99  00800294  00800294  00002d0a  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006d8  00000000  00000000  00002d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000df88  00000000  00000000  00003423  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002bba  00000000  00000000  000113ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003d55  00000000  00000000  00013f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001368  00000000  00000000  00017cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003a11  00000000  00000000  00019024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005a3b  00000000  00000000  0001ca35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000760  00000000  00000000  00022470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	11 c1       	rjmp	.+546    	; 0x224 <__ctors_end>
       2:	00 00       	nop
       4:	40 c1       	rjmp	.+640    	; 0x286 <__bad_interrupt>
       6:	00 00       	nop
       8:	3e c1       	rjmp	.+636    	; 0x286 <__bad_interrupt>
       a:	00 00       	nop
       c:	3c c1       	rjmp	.+632    	; 0x286 <__bad_interrupt>
       e:	00 00       	nop
      10:	3a c1       	rjmp	.+628    	; 0x286 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_5>
      18:	6e c5       	rjmp	.+2780   	; 0xaf6 <__vector_6>
      1a:	00 00       	nop
      1c:	34 c1       	rjmp	.+616    	; 0x286 <__bad_interrupt>
      1e:	00 00       	nop
      20:	32 c1       	rjmp	.+612    	; 0x286 <__bad_interrupt>
      22:	00 00       	nop
      24:	30 c1       	rjmp	.+608    	; 0x286 <__bad_interrupt>
      26:	00 00       	nop
      28:	2e c1       	rjmp	.+604    	; 0x286 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2c c1       	rjmp	.+600    	; 0x286 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2a c1       	rjmp	.+596    	; 0x286 <__bad_interrupt>
      32:	00 00       	nop
      34:	28 c1       	rjmp	.+592    	; 0x286 <__bad_interrupt>
      36:	00 00       	nop
      38:	26 c1       	rjmp	.+588    	; 0x286 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	24 c1       	rjmp	.+584    	; 0x286 <__bad_interrupt>
      3e:	00 00       	nop
      40:	22 c1       	rjmp	.+580    	; 0x286 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__vector_17>
      48:	1e c1       	rjmp	.+572    	; 0x286 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1c c1       	rjmp	.+568    	; 0x286 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1a c1       	rjmp	.+564    	; 0x286 <__bad_interrupt>
      52:	00 00       	nop
      54:	18 c1       	rjmp	.+560    	; 0x286 <__bad_interrupt>
      56:	00 00       	nop
      58:	16 c1       	rjmp	.+556    	; 0x286 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_23>
      60:	12 c1       	rjmp	.+548    	; 0x286 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__vector_25>
      68:	0e c1       	rjmp	.+540    	; 0x286 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c c1       	rjmp	.+536    	; 0x286 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0a c1       	rjmp	.+532    	; 0x286 <__bad_interrupt>
      72:	00 00       	nop
      74:	08 c1       	rjmp	.+528    	; 0x286 <__bad_interrupt>
      76:	00 00       	nop
      78:	06 c1       	rjmp	.+524    	; 0x286 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	04 c1       	rjmp	.+520    	; 0x286 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c5       	rjmp	.+2758   	; 0xb48 <__vector_32>
      82:	00 00       	nop
      84:	00 c1       	rjmp	.+512    	; 0x286 <__bad_interrupt>
      86:	00 00       	nop
      88:	fe c0       	rjmp	.+508    	; 0x286 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fc c0       	rjmp	.+504    	; 0x286 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__vector_36>
      94:	f8 c0       	rjmp	.+496    	; 0x286 <__bad_interrupt>
      96:	00 00       	nop
      98:	f6 c0       	rjmp	.+492    	; 0x286 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f4 c0       	rjmp	.+488    	; 0x286 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f2 c0       	rjmp	.+484    	; 0x286 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f0 c0       	rjmp	.+480    	; 0x286 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ee c0       	rjmp	.+476    	; 0x286 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ec c0       	rjmp	.+472    	; 0x286 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ea c0       	rjmp	.+468    	; 0x286 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e8 c0       	rjmp	.+464    	; 0x286 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e6 c0       	rjmp	.+460    	; 0x286 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e4 c0       	rjmp	.+456    	; 0x286 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e2 c0       	rjmp	.+452    	; 0x286 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e0 c0       	rjmp	.+448    	; 0x286 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	de c0       	rjmp	.+444    	; 0x286 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 87 13 	jmp	0x270e	; 0x270e <__vector_51>
      d0:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__vector_52>
      d4:	d8 c0       	rjmp	.+432    	; 0x286 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d6 c0       	rjmp	.+428    	; 0x286 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d4 c0       	rjmp	.+424    	; 0x286 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d2 c0       	rjmp	.+420    	; 0x286 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a1 0f       	add	r26, r17
      e6:	63 0e       	add	r6, r19
      e8:	9a 0e       	add	r9, r26
      ea:	ab 0e       	add	r10, r27
      ec:	cc 0e       	add	r12, r28
      ee:	a1 0f       	add	r26, r17
      f0:	ed 0e       	add	r14, r29
      f2:	01 0f       	add	r16, r17
      f4:	23 0f       	add	r18, r19
      f6:	ab 11       	cpse	r26, r11
      f8:	ae 11       	cpse	r26, r14
      fa:	9d 11       	cpse	r25, r13
      fc:	a1 11       	cpse	r26, r1
      fe:	a7 11       	cpse	r26, r7
     100:	e5 11       	cpse	r30, r5
     102:	b2 11       	cpse	r27, r2
     104:	b6 11       	cpse	r27, r6
     106:	bc 11       	cpse	r27, r12
     108:	c0 11       	cpse	r28, r0
     10a:	c4 11       	cpse	r28, r4
     10c:	ca 11       	cpse	r28, r10
     10e:	ce 11       	cpse	r28, r14
     110:	d2 11       	cpse	r29, r2
     112:	e5 11       	cpse	r30, r5
     114:	d8 11       	cpse	r29, r8
     116:	dc 11       	cpse	r29, r12
     118:	e0 11       	cpse	r30, r0

0000011a <__trampolines_end>:
     11a:	00 00       	nop
     11c:	0a 0b       	sbc	r16, r26
     11e:	02 09       	sbc	r16, r2
     120:	0c 0d       	add	r16, r12
     122:	0e 08       	sbc	r0, r14
     124:	07 03       	mulsu	r16, r23
     126:	04 01       	movw	r0, r8
	...
     144:	00 00       	nop
     146:	12 11       	cpse	r17, r2
     148:	10 00       	.word	0x0010	; ????
	...

00000160 <digital_pin_to_bit_mask_PGM>:
     160:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     170:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     180:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     190:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1a0:	04 08 10 20 40 80                                   ... @.

000001a6 <digital_pin_to_port_PGM>:
     1a6:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1b6:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1c6:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1d6:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1e6:	0b 0b 0b 0b 0b 0b                                   ......

000001ec <port_to_output_PGM>:
     1ec:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1fc:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000206 <port_to_mode_PGM>:
     206:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     216:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000220 <__ctors_start>:
     220:	31 05       	cpc	r19, r1
     222:	e6 13       	cpse	r30, r22

00000224 <__ctors_end>:
     224:	11 24       	eor	r1, r1
     226:	1f be       	out	0x3f, r1	; 63
     228:	cf ef       	ldi	r28, 0xFF	; 255
     22a:	d1 e2       	ldi	r29, 0x21	; 33
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	0c bf       	out	0x3c, r16	; 60

00000234 <__do_copy_data>:
     234:	12 e0       	ldi	r17, 0x02	; 2
     236:	a0 e0       	ldi	r26, 0x00	; 0
     238:	b2 e0       	ldi	r27, 0x02	; 2
     23a:	e2 ee       	ldi	r30, 0xE2	; 226
     23c:	fb e2       	ldi	r31, 0x2B	; 43
     23e:	00 e0       	ldi	r16, 0x00	; 0
     240:	0b bf       	out	0x3b, r16	; 59
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x14>
     244:	07 90       	elpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a4 39       	cpi	r26, 0x94	; 148
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0x10>

0000024e <__do_clear_bss>:
     24e:	2e e0       	ldi	r18, 0x0E	; 14
     250:	a4 e9       	ldi	r26, 0x94	; 148
     252:	b2 e0       	ldi	r27, 0x02	; 2
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	ad 32       	cpi	r26, 0x2D	; 45
     25a:	b2 07       	cpc	r27, r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>

0000025e <__do_global_ctors>:
     25e:	12 e0       	ldi	r17, 0x02	; 2
     260:	c4 e2       	ldi	r28, 0x24	; 36
     262:	d2 e0       	ldi	r29, 0x02	; 2
     264:	00 e0       	ldi	r16, 0x00	; 0
     266:	06 c0       	rjmp	.+12     	; 0x274 <__do_global_ctors+0x16>
     268:	22 97       	sbiw	r28, 0x02	; 2
     26a:	01 09       	sbc	r16, r1
     26c:	fe 01       	movw	r30, r28
     26e:	0b bf       	out	0x3b, r16	; 59
     270:	0e 94 a2 14 	call	0x2944	; 0x2944 <__tablejump_elpm__>
     274:	c0 32       	cpi	r28, 0x20	; 32
     276:	d1 07       	cpc	r29, r17
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	08 07       	cpc	r16, r24
     27c:	a9 f7       	brne	.-22     	; 0x268 <__do_global_ctors+0xa>
     27e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <main>
     282:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <_exit>

00000286 <__bad_interrupt>:
     286:	bc ce       	rjmp	.-648    	; 0x0 <__vectors>

00000288 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     288:	61 15       	cp	r22, r1
     28a:	71 05       	cpc	r23, r1
     28c:	81 f0       	breq	.+32     	; 0x2ae <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     28e:	db 01       	movw	r26, r22
     290:	0d 90       	ld	r0, X+
     292:	00 20       	and	r0, r0
     294:	e9 f7       	brne	.-6      	; 0x290 <_ZN5Print5writeEPKc+0x8>
     296:	ad 01       	movw	r20, r26
     298:	41 50       	subi	r20, 0x01	; 1
     29a:	51 09       	sbc	r21, r1
     29c:	46 1b       	sub	r20, r22
     29e:	57 0b       	sbc	r21, r23
     2a0:	dc 01       	movw	r26, r24
     2a2:	ed 91       	ld	r30, X+
     2a4:	fc 91       	ld	r31, X
     2a6:	02 80       	ldd	r0, Z+2	; 0x02
     2a8:	f3 81       	ldd	r31, Z+3	; 0x03
     2aa:	e0 2d       	mov	r30, r0
     2ac:	19 94       	eijmp
    }
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <_ZN9Bluetooth14setupBluetoothEv>:

void Bluetooth::settxPin(int tx){
	txPin = tx;
}

void Bluetooth::setupBluetooth(){
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	ae 97       	sbiw	r28, 0x2e	; 46
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	6c 01       	movw	r12, r24
	char msg[20] = "";
     2d6:	19 82       	std	Y+1, r1	; 0x01
     2d8:	1a 82       	std	Y+2, r1	; 0x02
     2da:	1b 82       	std	Y+3, r1	; 0x03
     2dc:	1c 82       	std	Y+4, r1	; 0x04
     2de:	fe 01       	movw	r30, r28
     2e0:	35 96       	adiw	r30, 0x05	; 5
     2e2:	80 e1       	ldi	r24, 0x10	; 16
     2e4:	df 01       	movw	r26, r30
     2e6:	1d 92       	st	X+, r1
     2e8:	8a 95       	dec	r24
     2ea:	e9 f7       	brne	.-6      	; 0x2e6 <_ZN9Bluetooth14setupBluetoothEv+0x32>
	int i = 0;
	
	btSerial = &Serial2;
     2ec:	8c e8       	ldi	r24, 0x8C	; 140
     2ee:	9d e0       	ldi	r25, 0x0D	; 13
     2f0:	90 93 95 02 	sts	0x0295, r25
     2f4:	80 93 94 02 	sts	0x0294, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2f8:	26 e0       	ldi	r18, 0x06	; 6
     2fa:	40 e8       	ldi	r20, 0x80	; 128
     2fc:	55 e2       	ldi	r21, 0x25	; 37
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	0e 94 27 13 	call	0x264e	; 0x264e <_ZN14HardwareSerial5beginEmh>

	btSerial->begin(9600);

	btSerial->write("AT+BAUD4");
     306:	6d e3       	ldi	r22, 0x3D	; 61
     308:	72 e0       	ldi	r23, 0x02	; 2
     30a:	80 91 94 02 	lds	r24, 0x0294
     30e:	90 91 95 02 	lds	r25, 0x0295
     312:	ba df       	rcall	.-140    	; 0x288 <_ZN5Print5writeEPKc>
	delay(1100);
     314:	6c e4       	ldi	r22, 0x4C	; 76
     316:	74 e0       	ldi	r23, 0x04	; 4
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 0c 11 	call	0x2218	; 0x2218 <delay>
     320:	8e 01       	movw	r16, r28
     322:	0f 5f       	subi	r16, 0xFF	; 255
     324:	1f 4f       	sbci	r17, 0xFF	; 255
	while (btSerial->available()) {
     326:	78 01       	movw	r14, r16
     328:	80 91 94 02 	lds	r24, 0x0294
     32c:	90 91 95 02 	lds	r25, 0x0295
     330:	dc 01       	movw	r26, r24
     332:	ed 91       	ld	r30, X+
     334:	fc 91       	ld	r31, X
     336:	04 80       	ldd	r0, Z+4	; 0x04
     338:	f5 81       	ldd	r31, Z+5	; 0x05
     33a:	e0 2d       	mov	r30, r0
     33c:	19 95       	eicall
     33e:	89 2b       	or	r24, r25
     340:	79 f0       	breq	.+30     	; 0x360 <_ZN9Bluetooth14setupBluetoothEv+0xac>
		msg[i] = btSerial->read();
     342:	80 91 94 02 	lds	r24, 0x0294
     346:	90 91 95 02 	lds	r25, 0x0295
     34a:	dc 01       	movw	r26, r24
     34c:	ed 91       	ld	r30, X+
     34e:	fc 91       	ld	r31, X
     350:	06 80       	ldd	r0, Z+6	; 0x06
     352:	f7 81       	ldd	r31, Z+7	; 0x07
     354:	e0 2d       	mov	r30, r0
     356:	19 95       	eicall
     358:	f7 01       	movw	r30, r14
     35a:	81 93       	st	Z+, r24
     35c:	7f 01       	movw	r14, r30
     35e:	e4 cf       	rjmp	.-56     	; 0x328 <_ZN9Bluetooth14setupBluetoothEv+0x74>
		i++;
	}
	
	char ok9600[] = "OK9600";
     360:	87 e0       	ldi	r24, 0x07	; 7
     362:	e1 e5       	ldi	r30, 0x51	; 81
     364:	f2 e0       	ldi	r31, 0x02	; 2
     366:	de 01       	movw	r26, r28
     368:	98 96       	adiw	r26, 0x28	; 40
     36a:	01 90       	ld	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	8a 95       	dec	r24
     370:	e1 f7       	brne	.-8      	; 0x36a <_ZN9Bluetooth14setupBluetoothEv+0xb6>
	if (strcmp(msg, ok9600) != 0) {
     372:	be 01       	movw	r22, r28
     374:	68 5d       	subi	r22, 0xD8	; 216
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	c8 01       	movw	r24, r16
     37a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <strcmp>
     37e:	89 2b       	or	r24, r25
     380:	11 f0       	breq	.+4      	; 0x386 <_ZN9Bluetooth14setupBluetoothEv+0xd2>
		OS_Abort();
     382:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <OS_Abort>
	}
	
	memset(msg, 0, strlen(msg));
     386:	f8 01       	movw	r30, r16
     388:	01 90       	ld	r0, Z+
     38a:	00 20       	and	r0, r0
     38c:	e9 f7       	brne	.-6      	; 0x388 <_ZN9Bluetooth14setupBluetoothEv+0xd4>
     38e:	af 01       	movw	r20, r30
     390:	41 50       	subi	r20, 0x01	; 1
     392:	51 09       	sbc	r21, r1
     394:	40 1b       	sub	r20, r16
     396:	51 0b       	sbc	r21, r17
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	c8 01       	movw	r24, r16
     39e:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <memset>
	i = 0;
	
	btSerial->write(Bluetooth::Name);
     3a2:	b6 01       	movw	r22, r12
     3a4:	7c 5f       	subi	r23, 0xFC	; 252
     3a6:	80 91 94 02 	lds	r24, 0x0294
     3aa:	90 91 95 02 	lds	r25, 0x0295
     3ae:	6c df       	rcall	.-296    	; 0x288 <_ZN5Print5writeEPKc>
	delay(1100);
     3b0:	6c e4       	ldi	r22, 0x4C	; 76
     3b2:	74 e0       	ldi	r23, 0x04	; 4
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 0c 11 	call	0x2218	; 0x2218 <delay>
	while (btSerial->available()) {
     3bc:	78 01       	movw	r14, r16
     3be:	80 91 94 02 	lds	r24, 0x0294
     3c2:	90 91 95 02 	lds	r25, 0x0295
     3c6:	dc 01       	movw	r26, r24
     3c8:	ed 91       	ld	r30, X+
     3ca:	fc 91       	ld	r31, X
     3cc:	04 80       	ldd	r0, Z+4	; 0x04
     3ce:	f5 81       	ldd	r31, Z+5	; 0x05
     3d0:	e0 2d       	mov	r30, r0
     3d2:	19 95       	eicall
     3d4:	89 2b       	or	r24, r25
     3d6:	79 f0       	breq	.+30     	; 0x3f6 <_ZN9Bluetooth14setupBluetoothEv+0x142>
		msg[i] = btSerial->read();
     3d8:	80 91 94 02 	lds	r24, 0x0294
     3dc:	90 91 95 02 	lds	r25, 0x0295
     3e0:	dc 01       	movw	r26, r24
     3e2:	ed 91       	ld	r30, X+
     3e4:	fc 91       	ld	r31, X
     3e6:	06 80       	ldd	r0, Z+6	; 0x06
     3e8:	f7 81       	ldd	r31, Z+7	; 0x07
     3ea:	e0 2d       	mov	r30, r0
     3ec:	19 95       	eicall
     3ee:	f7 01       	movw	r30, r14
     3f0:	81 93       	st	Z+, r24
     3f2:	7f 01       	movw	r14, r30
     3f4:	e4 cf       	rjmp	.-56     	; 0x3be <_ZN9Bluetooth14setupBluetoothEv+0x10a>
		i++;
	}
	
	char oksetname[] = "OKsetname";
     3f6:	8a e0       	ldi	r24, 0x0A	; 10
     3f8:	e8 e5       	ldi	r30, 0x58	; 88
     3fa:	f2 e0       	ldi	r31, 0x02	; 2
     3fc:	de 01       	movw	r26, r28
     3fe:	55 96       	adiw	r26, 0x15	; 21
     400:	01 90       	ld	r0, Z+
     402:	0d 92       	st	X+, r0
     404:	8a 95       	dec	r24
     406:	e1 f7       	brne	.-8      	; 0x400 <_ZN9Bluetooth14setupBluetoothEv+0x14c>
	if (strcmp(msg, oksetname) != 0) {
     408:	be 01       	movw	r22, r28
     40a:	6b 5e       	subi	r22, 0xEB	; 235
     40c:	7f 4f       	sbci	r23, 0xFF	; 255
     40e:	c8 01       	movw	r24, r16
     410:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <strcmp>
     414:	89 2b       	or	r24, r25
     416:	11 f0       	breq	.+4      	; 0x41c <_ZN9Bluetooth14setupBluetoothEv+0x168>
		OS_Abort();
     418:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <OS_Abort>
	}
	
	memset(msg, 0, strlen(msg));
     41c:	f8 01       	movw	r30, r16
     41e:	01 90       	ld	r0, Z+
     420:	00 20       	and	r0, r0
     422:	e9 f7       	brne	.-6      	; 0x41e <_ZN9Bluetooth14setupBluetoothEv+0x16a>
     424:	af 01       	movw	r20, r30
     426:	41 50       	subi	r20, 0x01	; 1
     428:	51 09       	sbc	r21, r1
     42a:	40 1b       	sub	r20, r16
     42c:	51 0b       	sbc	r21, r17
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	c8 01       	movw	r24, r16
     434:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <memset>
	i = 0;

	btSerial->write("AT+PIN1111");
     438:	66 e4       	ldi	r22, 0x46	; 70
     43a:	72 e0       	ldi	r23, 0x02	; 2
     43c:	80 91 94 02 	lds	r24, 0x0294
     440:	90 91 95 02 	lds	r25, 0x0295
     444:	21 df       	rcall	.-446    	; 0x288 <_ZN5Print5writeEPKc>
	delay(1100);
     446:	6c e4       	ldi	r22, 0x4C	; 76
     448:	74 e0       	ldi	r23, 0x04	; 4
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 0c 11 	call	0x2218	; 0x2218 <delay>
	while (btSerial->available()) {
     452:	78 01       	movw	r14, r16
     454:	80 91 94 02 	lds	r24, 0x0294
     458:	90 91 95 02 	lds	r25, 0x0295
     45c:	dc 01       	movw	r26, r24
     45e:	ed 91       	ld	r30, X+
     460:	fc 91       	ld	r31, X
     462:	04 80       	ldd	r0, Z+4	; 0x04
     464:	f5 81       	ldd	r31, Z+5	; 0x05
     466:	e0 2d       	mov	r30, r0
     468:	19 95       	eicall
     46a:	89 2b       	or	r24, r25
     46c:	79 f0       	breq	.+30     	; 0x48c <_ZN9Bluetooth14setupBluetoothEv+0x1d8>
		msg[i] = btSerial->read();
     46e:	80 91 94 02 	lds	r24, 0x0294
     472:	90 91 95 02 	lds	r25, 0x0295
     476:	dc 01       	movw	r26, r24
     478:	ed 91       	ld	r30, X+
     47a:	fc 91       	ld	r31, X
     47c:	06 80       	ldd	r0, Z+6	; 0x06
     47e:	f7 81       	ldd	r31, Z+7	; 0x07
     480:	e0 2d       	mov	r30, r0
     482:	19 95       	eicall
     484:	f7 01       	movw	r30, r14
     486:	81 93       	st	Z+, r24
     488:	7f 01       	movw	r14, r30
     48a:	e4 cf       	rjmp	.-56     	; 0x454 <_ZN9Bluetooth14setupBluetoothEv+0x1a0>
		i++;
	}
	
	char oksetpin[] = "OKsetPIN";
     48c:	89 e0       	ldi	r24, 0x09	; 9
     48e:	e2 e6       	ldi	r30, 0x62	; 98
     490:	f2 e0       	ldi	r31, 0x02	; 2
     492:	de 01       	movw	r26, r28
     494:	5f 96       	adiw	r26, 0x1f	; 31
     496:	01 90       	ld	r0, Z+
     498:	0d 92       	st	X+, r0
     49a:	8a 95       	dec	r24
     49c:	e1 f7       	brne	.-8      	; 0x496 <_ZN9Bluetooth14setupBluetoothEv+0x1e2>
	if (strcmp(msg, oksetpin) != 0) {
     49e:	be 01       	movw	r22, r28
     4a0:	61 5e       	subi	r22, 0xE1	; 225
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	c8 01       	movw	r24, r16
     4a6:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <strcmp>
     4aa:	89 2b       	or	r24, r25
     4ac:	81 f0       	breq	.+32     	; 0x4ce <_ZN9Bluetooth14setupBluetoothEv+0x21a>
		OS_Abort();
	}
}
     4ae:	ae 96       	adiw	r28, 0x2e	; 46
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
		i++;
	}
	
	char oksetpin[] = "OKsetPIN";
	if (strcmp(msg, oksetpin) != 0) {
		OS_Abort();
     4ca:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <OS_Abort>
	}
}
     4ce:	ae 96       	adiw	r28, 0x2e	; 46
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	08 95       	ret

000004ec <_ZN9Bluetooth7setNameEPc>:
	setrxPin(r);
	settxPin(t);
	setupBluetooth();
}

void Bluetooth::setName(char c[]){
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	8b 01       	movw	r16, r22
	strcpy(Name, "AT+NAME");
     4f6:	ec 01       	movw	r28, r24
     4f8:	dc 5f       	subi	r29, 0xFC	; 252
     4fa:	6b e6       	ldi	r22, 0x6B	; 107
     4fc:	72 e0       	ldi	r23, 0x02	; 2
     4fe:	ce 01       	movw	r24, r28
     500:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <strcpy>
	strcat(Name, c);
     504:	b8 01       	movw	r22, r16
     506:	ce 01       	movw	r24, r28
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
	setupBluetooth();
}

void Bluetooth::setName(char c[]){
	strcpy(Name, "AT+NAME");
	strcat(Name, c);
     510:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <strcat>

00000514 <_ZN9BluetoothC1EPc>:
		OS_Abort();
	}
}

Bluetooth::Bluetooth(char name[]){
	setName(name);
     514:	eb df       	rcall	.-42     	; 0x4ec <_ZN9Bluetooth7setNameEPc>
int Bluetooth::getrxPin(){
	return rxPin;
}

void Bluetooth::setrxPin(int rx){
	rxPin = rx;
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	90 93 09 02 	sts	0x0209, r25
     51e:	80 93 08 02 	sts	0x0208, r24
int Bluetooth::gettxPin(){
	return txPin;
}

void Bluetooth::settxPin(int tx){
	txPin = tx;
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	90 93 07 02 	sts	0x0207, r25
     52a:	80 93 06 02 	sts	0x0206, r24
     52e:	08 95       	ret

00000530 <_Z16current_ir_statev>:
}




void check_bump_sensor() {
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	1f 92       	push	r1
     536:	1f 92       	push	r1
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	be 01       	movw	r22, r28
     53e:	6f 5f       	subi	r22, 0xFF	; 255
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	80 91 d0 02 	lds	r24, 0x02D0
     546:	90 91 d1 02 	lds	r25, 0x02D1
     54a:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Service_Subscribe>
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	80 93 9b 02 	sts	0x029B, r24
     554:	f3 cf       	rjmp	.-26     	; 0x53c <_Z16current_ir_statev+0xc>

00000556 <_Z12setup_roombav>:
     556:	d7 d6       	rcall	.+3502   	; 0x1306 <_Z11Roomba_Initv>
     558:	8c e0       	ldi	r24, 0x0C	; 12
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	5b d5       	rcall	.+2742   	; 0x1014 <_Z17Radio_Set_Tx_AddrPh>
     55e:	10 92 97 02 	sts	0x0297, r1
     562:	10 92 96 02 	sts	0x0296, r1
     566:	24 9a       	sbi	0x04, 4	; 4
     568:	25 9a       	sbi	0x04, 5	; 4
     56a:	26 9a       	sbi	0x04, 6	; 4
     56c:	2c 98       	cbi	0x05, 4	; 5
     56e:	2d 98       	cbi	0x05, 5	; 5
     570:	2e 98       	cbi	0x05, 6	; 5
     572:	3d 9a       	sbi	0x07, 5	; 7
     574:	3c 9a       	sbi	0x07, 4	; 7
     576:	3b 9a       	sbi	0x07, 3	; 7
     578:	45 98       	cbi	0x08, 5	; 8
     57a:	44 98       	cbi	0x08, 4	; 8
     57c:	43 98       	cbi	0x08, 3	; 8
     57e:	08 95       	ret

00000580 <_Z15radio_rxhandlerh>:
     580:	85 b1       	in	r24, 0x05	; 5
     582:	90 e1       	ldi	r25, 0x10	; 16
     584:	89 27       	eor	r24, r25
     586:	85 b9       	out	0x05, r24	; 5
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 91 d2 02 	lds	r24, 0x02D2
     590:	90 91 d3 02 	lds	r25, 0x02D3
     594:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <Service_Publish>

00000598 <_Z12ir_rxhandlerv>:
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	81 d3       	rcall	.+1794   	; 0xca6 <_Z10IR_getLastv>
     5a4:	08 2f       	mov	r16, r24
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	c1 e1       	ldi	r28, 0x11	; 17
     5aa:	d2 e0       	ldi	r29, 0x02	; 2
     5ac:	80 e4       	ldi	r24, 0x40	; 64
     5ae:	f8 2e       	mov	r15, r24
     5b0:	89 91       	ld	r24, Y+
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	08 17       	cp	r16, r24
     5b6:	19 07       	cpc	r17, r25
     5b8:	a1 f4       	brne	.+40     	; 0x5e2 <_Z12ir_rxhandlerv+0x4a>
     5ba:	e0 91 0b 02 	lds	r30, 0x020B
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	ef 5e       	subi	r30, 0xEF	; 239
     5c2:	fd 4f       	sbci	r31, 0xFD	; 253
     5c4:	80 81       	ld	r24, Z
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	08 17       	cp	r16, r24
     5ca:	19 07       	cpc	r17, r25
     5cc:	51 f0       	breq	.+20     	; 0x5e2 <_Z12ir_rxhandlerv+0x4a>
     5ce:	85 b1       	in	r24, 0x05	; 5
     5d0:	8f 25       	eor	r24, r15
     5d2:	85 b9       	out	0x05, r24	; 5
     5d4:	b8 01       	movw	r22, r16
     5d6:	80 91 d0 02 	lds	r24, 0x02D0
     5da:	90 91 d1 02 	lds	r25, 0x02D1
     5de:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Service_Publish>
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	c5 31       	cpi	r28, 0x15	; 21
     5e6:	d8 07       	cpc	r29, r24
     5e8:	19 f7       	brne	.-58     	; 0x5b0 <_Z12ir_rxhandlerv+0x18>
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	08 95       	ret

000005f6 <_Z17handleRoombaInputv>:
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	00 91 cc 02 	lds	r16, 0x02CC
     602:	10 91 cd 02 	lds	r17, 0x02CD
     606:	c0 91 ca 02 	lds	r28, 0x02CA
     60a:	d0 91 cb 02 	lds	r29, 0x02CB
     60e:	83 e8       	ldi	r24, 0x83	; 131
     610:	0e 94 45 10 	call	0x208a	; 0x208a <_Z16Roomba_Send_Byteh>
     614:	b8 01       	movw	r22, r16
     616:	ce 01       	movw	r24, r28
     618:	ab d6       	rcall	.+3414   	; 0x1370 <_Z12Roomba_Driveii>
     61a:	80 91 c9 02 	lds	r24, 0x02C9
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	80 93 c9 02 	sts	0x02C9, r24
     624:	85 30       	cpi	r24, 0x05	; 5
     626:	29 f4       	brne	.+10     	; 0x632 <_Z17handleRoombaInputv+0x3c>
     628:	80 91 98 02 	lds	r24, 0x0298
     62c:	10 d3       	rcall	.+1568   	; 0xc4e <_Z11IR_transmith>
     62e:	10 92 c9 02 	sts	0x02C9, r1
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <_Z23current_bluetooth_statev>:
     63c:	c1 e0       	ldi	r28, 0x01	; 1
     63e:	d8 ec       	ldi	r29, 0xC8	; 200
     640:	12 e3       	ldi	r17, 0x32	; 50
     642:	80 91 94 02 	lds	r24, 0x0294
     646:	90 91 95 02 	lds	r25, 0x0295
     64a:	dc 01       	movw	r26, r24
     64c:	ed 91       	ld	r30, X+
     64e:	fc 91       	ld	r31, X
     650:	04 80       	ldd	r0, Z+4	; 0x04
     652:	f5 81       	ldd	r31, Z+5	; 0x05
     654:	e0 2d       	mov	r30, r0
     656:	19 95       	eicall
     658:	89 2b       	or	r24, r25
     65a:	99 f3       	breq	.-26     	; 0x642 <_Z23current_bluetooth_statev+0x6>
     65c:	80 91 94 02 	lds	r24, 0x0294
     660:	90 91 95 02 	lds	r25, 0x0295
     664:	dc 01       	movw	r26, r24
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	06 80       	ldd	r0, Z+6	; 0x06
     66c:	f7 81       	ldd	r31, Z+7	; 0x07
     66e:	e0 2d       	mov	r30, r0
     670:	19 95       	eicall
     672:	20 91 0a 02 	lds	r18, 0x020A
     676:	99 27       	eor	r25, r25
     678:	22 23       	and	r18, r18
     67a:	d9 f0       	breq	.+54     	; 0x6b2 <_Z23current_bluetooth_statev+0x76>
     67c:	10 92 0a 02 	sts	0x020A, r1
     680:	8b 54       	subi	r24, 0x4B	; 75
     682:	91 09       	sbc	r25, r1
     684:	18 9f       	mul	r17, r24
     686:	90 01       	movw	r18, r0
     688:	19 9f       	mul	r17, r25
     68a:	30 0d       	add	r19, r0
     68c:	11 24       	eor	r1, r1
     68e:	30 93 cb 02 	sts	0x02CB, r19
     692:	20 93 ca 02 	sts	0x02CA, r18
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	8d e0       	ldi	r24, 0x0D	; 13
     69a:	0e 94 1f 12 	call	0x243e	; 0x243e <digitalWrite>
     69e:	bf ef       	ldi	r27, 0xFF	; 255
     6a0:	21 ee       	ldi	r18, 0xE1	; 225
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	b1 50       	subi	r27, 0x01	; 1
     6a6:	20 40       	sbci	r18, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <_Z23current_bluetooth_statev+0x68>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <_Z23current_bluetooth_statev+0x72>
     6ae:	00 00       	nop
     6b0:	0d c0       	rjmp	.+26     	; 0x6cc <_Z23current_bluetooth_statev+0x90>
     6b2:	c0 93 0a 02 	sts	0x020A, r28
     6b6:	8b 54       	subi	r24, 0x4B	; 75
     6b8:	91 09       	sbc	r25, r1
     6ba:	d8 9f       	mul	r29, r24
     6bc:	90 01       	movw	r18, r0
     6be:	d9 9f       	mul	r29, r25
     6c0:	30 0d       	add	r19, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	30 93 cd 02 	sts	0x02CD, r19
     6c8:	20 93 cc 02 	sts	0x02CC, r18
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	8d e0       	ldi	r24, 0x0D	; 13
     6d0:	0e 94 1f 12 	call	0x243e	; 0x243e <digitalWrite>
     6d4:	9f ef       	ldi	r25, 0xFF	; 255
     6d6:	a1 ee       	ldi	r26, 0xE1	; 225
     6d8:	b4 e0       	ldi	r27, 0x04	; 4
     6da:	91 50       	subi	r25, 0x01	; 1
     6dc:	a0 40       	sbci	r26, 0x00	; 0
     6de:	b0 40       	sbci	r27, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <_Z23current_bluetooth_statev+0x9e>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <_Z23current_bluetooth_statev+0xa8>
     6e4:	00 00       	nop
     6e6:	87 df       	rcall	.-242    	; 0x5f6 <_Z17handleRoombaInputv>
     6e8:	ac cf       	rjmp	.-168    	; 0x642 <_Z23current_bluetooth_statev+0x6>

000006ea <_Z16load_death_musicv>:
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	a2 97       	sbiw	r28, 0x22	; 34
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	1a 82       	std	Y+2, r1	; 0x02
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	80 91 99 02 	lds	r24, 0x0299
     708:	49 e0       	ldi	r20, 0x09	; 9
     70a:	81 11       	cpse	r24, r1
     70c:	2f c0       	rjmp	.+94     	; 0x76c <_Z16load_death_musicv+0x82>
     70e:	63 e5       	ldi	r22, 0x53	; 83
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	4a d6       	rcall	.+3220   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     716:	42 e1       	ldi	r20, 0x12	; 18
     718:	6a e5       	ldi	r22, 0x5A	; 90
     71a:	ce 01       	movw	r24, r28
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	45 d6       	rcall	.+3210   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     720:	49 e0       	ldi	r20, 0x09	; 9
     722:	69 e5       	ldi	r22, 0x59	; 89
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	40 d6       	rcall	.+3200   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     72a:	49 e0       	ldi	r20, 0x09	; 9
     72c:	69 e5       	ldi	r22, 0x59	; 89
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	3b d6       	rcall	.+3190   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     734:	49 e0       	ldi	r20, 0x09	; 9
     736:	68 e5       	ldi	r22, 0x58	; 88
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	36 d6       	rcall	.+3180   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     73e:	49 e0       	ldi	r20, 0x09	; 9
     740:	66 e5       	ldi	r22, 0x56	; 86
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	31 d6       	rcall	.+3170   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     748:	49 e0       	ldi	r20, 0x09	; 9
     74a:	64 e5       	ldi	r22, 0x54	; 84
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	2c d6       	rcall	.+3160   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     752:	49 e0       	ldi	r20, 0x09	; 9
     754:	68 e5       	ldi	r22, 0x58	; 88
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	27 d6       	rcall	.+3150   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     75c:	49 e0       	ldi	r20, 0x09	; 9
     75e:	68 e5       	ldi	r22, 0x58	; 88
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	22 d6       	rcall	.+3140   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     766:	49 e0       	ldi	r20, 0x09	; 9
     768:	64 e5       	ldi	r22, 0x54	; 84
     76a:	4c c0       	rjmp	.+152    	; 0x804 <_Z16load_death_musicv+0x11a>
     76c:	69 e5       	ldi	r22, 0x59	; 89
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	1b d6       	rcall	.+3126   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     774:	49 e0       	ldi	r20, 0x09	; 9
     776:	61 e5       	ldi	r22, 0x51	; 81
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	16 d6       	rcall	.+3116   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     77e:	49 e0       	ldi	r20, 0x09	; 9
     780:	63 e5       	ldi	r22, 0x53	; 83
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	11 d6       	rcall	.+3106   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     788:	49 e0       	ldi	r20, 0x09	; 9
     78a:	69 e5       	ldi	r22, 0x59	; 89
     78c:	ce 01       	movw	r24, r28
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	0c d6       	rcall	.+3096   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     792:	49 e0       	ldi	r20, 0x09	; 9
     794:	61 e5       	ldi	r22, 0x51	; 81
     796:	ce 01       	movw	r24, r28
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	07 d6       	rcall	.+3086   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     79c:	49 e0       	ldi	r20, 0x09	; 9
     79e:	63 e5       	ldi	r22, 0x53	; 83
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	02 d6       	rcall	.+3076   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7a6:	49 e0       	ldi	r20, 0x09	; 9
     7a8:	69 e5       	ldi	r22, 0x59	; 89
     7aa:	ce 01       	movw	r24, r28
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	fd d5       	rcall	.+3066   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7b0:	49 e0       	ldi	r20, 0x09	; 9
     7b2:	61 e5       	ldi	r22, 0x51	; 81
     7b4:	ce 01       	movw	r24, r28
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	f8 d5       	rcall	.+3056   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7ba:	49 e0       	ldi	r20, 0x09	; 9
     7bc:	63 e5       	ldi	r22, 0x53	; 83
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	f3 d5       	rcall	.+3046   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7c4:	49 e0       	ldi	r20, 0x09	; 9
     7c6:	64 e5       	ldi	r22, 0x54	; 84
     7c8:	ce 01       	movw	r24, r28
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	ee d5       	rcall	.+3036   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7ce:	49 e0       	ldi	r20, 0x09	; 9
     7d0:	68 e5       	ldi	r22, 0x58	; 88
     7d2:	ce 01       	movw	r24, r28
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	e9 d5       	rcall	.+3026   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7d8:	49 e0       	ldi	r20, 0x09	; 9
     7da:	63 e5       	ldi	r22, 0x53	; 83
     7dc:	ce 01       	movw	r24, r28
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	e4 d5       	rcall	.+3016   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7e2:	49 e0       	ldi	r20, 0x09	; 9
     7e4:	64 e5       	ldi	r22, 0x54	; 84
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	df d5       	rcall	.+3006   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7ec:	49 e0       	ldi	r20, 0x09	; 9
     7ee:	63 e5       	ldi	r22, 0x53	; 83
     7f0:	ce 01       	movw	r24, r28
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	da d5       	rcall	.+2996   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     7f6:	49 e0       	ldi	r20, 0x09	; 9
     7f8:	6b e5       	ldi	r22, 0x5B	; 91
     7fa:	ce 01       	movw	r24, r28
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	d5 d5       	rcall	.+2986   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     800:	49 e0       	ldi	r20, 0x09	; 9
     802:	68 e5       	ldi	r22, 0x58	; 88
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	d0 d5       	rcall	.+2976   	; 0x13aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	e4 d5       	rcall	.+3016   	; 0x13d8 <_Z22Roomba_Music_load_songP20_roomba_music_song_t>
     810:	a2 96       	adiw	r28, 0x22	; 34
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <_Z16handleStateInputP7_game_t>:
     822:	cf 93       	push	r28
     824:	20 91 99 02 	lds	r18, 0x0299
     828:	20 93 9c 02 	sts	0x029C, r18
     82c:	30 91 9a 02 	lds	r19, 0x029A
     830:	30 93 9d 02 	sts	0x029D, r19
     834:	fc 01       	movw	r30, r24
     836:	c3 85       	ldd	r28, Z+11	; 0x0b
     838:	c0 93 99 02 	sts	0x0299, r28
     83c:	84 85       	ldd	r24, Z+12	; 0x0c
     83e:	80 93 9a 02 	sts	0x029A, r24
     842:	c2 17       	cp	r28, r18
     844:	29 f0       	breq	.+10     	; 0x850 <_Z16handleStateInputP7_game_t+0x2e>
     846:	45 98       	cbi	0x08, 5	; 8
     848:	44 9a       	sbi	0x08, 4	; 8
     84a:	10 92 97 02 	sts	0x0297, r1
     84e:	2b c0       	rjmp	.+86     	; 0x8a6 <_Z16handleStateInputP7_game_t+0x84>
     850:	cc 23       	and	r28, r28
     852:	19 f0       	breq	.+6      	; 0x85a <_Z16handleStateInputP7_game_t+0x38>
     854:	c1 30       	cpi	r28, 0x01	; 1
     856:	a9 f0       	breq	.+42     	; 0x882 <_Z16handleStateInputP7_game_t+0x60>
     858:	26 c0       	rjmp	.+76     	; 0x8a6 <_Z16handleStateInputP7_game_t+0x84>
     85a:	80 91 97 02 	lds	r24, 0x0297
     85e:	81 11       	cpse	r24, r1
     860:	06 c0       	rjmp	.+12     	; 0x86e <_Z16handleStateInputP7_game_t+0x4c>
     862:	43 df       	rcall	.-378    	; 0x6ea <_Z16load_death_musicv>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	e5 d5       	rcall	.+3018   	; 0x1432 <_Z22Roomba_Music_play_songh>
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 97 02 	sts	0x0297, r24
     86e:	45 98       	cbi	0x08, 5	; 8
     870:	44 9a       	sbi	0x08, 4	; 8
     872:	80 91 9a 02 	lds	r24, 0x029A
     876:	88 23       	and	r24, r24
     878:	a9 f0       	breq	.+42     	; 0x8a4 <_Z16handleStateInputP7_game_t+0x82>
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <_Z16handleStateInputP7_game_t+0x84>
     87e:	43 98       	cbi	0x08, 3	; 8
     880:	12 c0       	rjmp	.+36     	; 0x8a6 <_Z16handleStateInputP7_game_t+0x84>
     882:	80 91 96 02 	lds	r24, 0x0296
     886:	81 11       	cpse	r24, r1
     888:	05 c0       	rjmp	.+10     	; 0x894 <_Z16handleStateInputP7_game_t+0x72>
     88a:	2f df       	rcall	.-418    	; 0x6ea <_Z16load_death_musicv>
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	d1 d5       	rcall	.+2978   	; 0x1432 <_Z22Roomba_Music_play_songh>
     890:	c0 93 96 02 	sts	0x0296, r28
     894:	10 92 97 02 	sts	0x0297, r1
     898:	44 98       	cbi	0x08, 4	; 8
     89a:	45 9a       	sbi	0x08, 5	; 8
     89c:	80 91 9a 02 	lds	r24, 0x029A
     8a0:	81 11       	cpse	r24, r1
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <_Z16handleStateInputP7_game_t+0x84>
     8a4:	43 9a       	sbi	0x08, 3	; 8
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <_Z16send_back_packetv>:
     8aa:	85 b1       	in	r24, 0x05	; 5
     8ac:	90 e2       	ldi	r25, 0x20	; 32
     8ae:	89 27       	eor	r24, r25
     8b0:	85 b9       	out	0x05, r24	; 5
     8b2:	10 92 a9 02 	sts	0x02A9, r1
     8b6:	20 91 0b 02 	lds	r18, 0x020B
     8ba:	ec ea       	ldi	r30, 0xAC	; 172
     8bc:	f2 e0       	ldi	r31, 0x02	; 2
     8be:	85 e0       	ldi	r24, 0x05	; 5
     8c0:	28 9f       	mul	r18, r24
     8c2:	90 01       	movw	r18, r0
     8c4:	11 24       	eor	r1, r1
     8c6:	2b 5e       	subi	r18, 0xEB	; 235
     8c8:	3d 4f       	sbci	r19, 0xFD	; 253
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	d9 01       	movw	r26, r18
     8d0:	a8 0f       	add	r26, r24
     8d2:	b9 1f       	adc	r27, r25
     8d4:	4c 91       	ld	r20, X
     8d6:	41 93       	st	Z+, r20
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	85 30       	cpi	r24, 0x05	; 5
     8dc:	91 05       	cpc	r25, r1
     8de:	b9 f7       	brne	.-18     	; 0x8ce <_Z16send_back_packetv+0x24>
     8e0:	80 91 98 02 	lds	r24, 0x0298
     8e4:	80 93 b6 02 	sts	0x02B6, r24
     8e8:	80 91 99 02 	lds	r24, 0x0299
     8ec:	80 93 b7 02 	sts	0x02B7, r24
     8f0:	80 91 9a 02 	lds	r24, 0x029A
     8f4:	80 93 b8 02 	sts	0x02B8, r24
     8f8:	80 91 9b 02 	lds	r24, 0x029B
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	81 11       	cpse	r24, r1
     900:	01 c0       	rjmp	.+2      	; 0x904 <_Z16send_back_packetv+0x5a>
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 b9 02 	sts	0x02B9, r25
     908:	80 93 ba 02 	sts	0x02BA, r24
     90c:	10 92 9b 02 	sts	0x029B, r1
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	89 ea       	ldi	r24, 0xA9	; 169
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	b8 c3       	rjmp	.+1904   	; 0x1088 <_Z14Radio_TransmitP3_rp14_radio_tx_wait>

00000918 <_Z19current_radio_statev>:
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	a2 97       	sbiw	r28, 0x22	; 34
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	be 01       	movw	r22, r28
     92e:	6f 5d       	subi	r22, 0xDF	; 223
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	80 91 d2 02 	lds	r24, 0x02D2
     936:	90 91 d3 02 	lds	r25, 0x02D3
     93a:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Service_Subscribe>
     93e:	ce 01       	movw	r24, r28
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	f6 d3       	rcall	.+2028   	; 0x1130 <_Z13Radio_ReceiveP3_rp>
     944:	18 2f       	mov	r17, r24
     946:	8d ef       	ldi	r24, 0xFD	; 253
     948:	81 0f       	add	r24, r17
     94a:	82 30       	cpi	r24, 0x02	; 2
     94c:	40 f4       	brcc	.+16     	; 0x95e <_Z19current_radio_statev+0x46>
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	81 11       	cpse	r24, r1
     952:	03 c0       	rjmp	.+6      	; 0x95a <_Z19current_radio_statev+0x42>
     954:	ce 01       	movw	r24, r28
     956:	04 96       	adiw	r24, 0x04	; 4
     958:	64 df       	rcall	.-312    	; 0x822 <_Z16handleStateInputP7_game_t>
     95a:	13 30       	cpi	r17, 0x03	; 3
     95c:	81 f3       	breq	.-32     	; 0x93e <_Z19current_radio_statev+0x26>
     95e:	a5 df       	rcall	.-182    	; 0x8aa <_Z16send_back_packetv>
     960:	e5 cf       	rjmp	.-54     	; 0x92c <_Z19current_radio_statev+0x14>

00000962 <_Z17power_cycle_radiov>:
     962:	ea e0       	ldi	r30, 0x0A	; 10
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	80 81       	ld	r24, Z
     968:	84 60       	ori	r24, 0x04	; 4
     96a:	80 83       	st	Z, r24
     96c:	eb e0       	ldi	r30, 0x0B	; 11
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	80 81       	ld	r24, Z
     972:	8b 7f       	andi	r24, 0xFB	; 251
     974:	80 83       	st	Z, r24
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	89 e6       	ldi	r24, 0x69	; 105
     97a:	98 e1       	ldi	r25, 0x18	; 24
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <_Z17power_cycle_radiov+0x1a>
     984:	00 c0       	rjmp	.+0      	; 0x986 <_Z17power_cycle_radiov+0x24>
     986:	00 00       	nop
     988:	80 81       	ld	r24, Z
     98a:	84 60       	ori	r24, 0x04	; 4
     98c:	80 83       	st	Z, r24
     98e:	2f ef       	ldi	r18, 0xFF	; 255
     990:	89 e6       	ldi	r24, 0x69	; 105
     992:	98 e1       	ldi	r25, 0x18	; 24
     994:	21 50       	subi	r18, 0x01	; 1
     996:	80 40       	sbci	r24, 0x00	; 0
     998:	90 40       	sbci	r25, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <_Z17power_cycle_radiov+0x32>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <_Z17power_cycle_radiov+0x3c>
     99e:	00 00       	nop
     9a0:	08 95       	ret

000009a2 <_Z17init_roomba_stateP12roomba_state>:
	TEAM_PORT &= ~(1<<TEAM_ZOMBIE_PIN);
	TEAM_PORT &= ~(1<<EFFECT_INDICATOR);
}

void init_roomba_state(ROOMBA_STATE* roomba)
{
     9a2:	fc 01       	movw	r30, r24
	roomba->player_id = PLAYER_IDS[roomba_num];
     9a4:	a0 91 0b 02 	lds	r26, 0x020B
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	af 5e       	subi	r26, 0xEF	; 239
     9ac:	bd 4f       	sbci	r27, 0xFD	; 253
     9ae:	8c 91       	ld	r24, X
     9b0:	80 83       	st	Z, r24
	roomba->team = ZOMBIE;
     9b2:	11 82       	std	Z+1, r1	; 0x01
	roomba->state = NORMAL;
     9b4:	12 82       	std	Z+2, r1	; 0x02
	roomba->last_ir_code= 0;
     9b6:	13 82       	std	Z+3, r1	; 0x03
	roomba->old_team = 0;
     9b8:	14 82       	std	Z+4, r1	; 0x04
	roomba->old_state = 0;
     9ba:	15 82       	std	Z+5, r1	; 0x05
	roomba->old_vx = 0;
     9bc:	17 82       	std	Z+7, r1	; 0x07
     9be:	16 82       	std	Z+6, r1	; 0x06
	roomba->old_vy = 0;
     9c0:	11 86       	std	Z+9, r1	; 0x09
     9c2:	10 86       	std	Z+8, r1	; 0x08
	roomba->old_button = 0;
     9c4:	13 86       	std	Z+11, r1	; 0x0b
     9c6:	12 86       	std	Z+10, r1	; 0x0a
	roomba->vx = 0;
     9c8:	15 86       	std	Z+13, r1	; 0x0d
     9ca:	14 86       	std	Z+12, r1	; 0x0c
	roomba->vy = 0;
     9cc:	17 86       	std	Z+15, r1	; 0x0f
     9ce:	16 86       	std	Z+14, r1	; 0x0e
	roomba->button = 0;
     9d0:	10 8a       	std	Z+16, r1	; 0x10
     9d2:	08 95       	ret

000009d4 <_Z6r_mainv>:
}

int r_main(void)
{
	//Initialize arduino
	init();
     9d4:	0e 94 31 11 	call	0x2262	; 0x2262 <init>
	
		pinMode(13, OUTPUT);
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	8d e0       	ldi	r24, 0x0D	; 13
     9dc:	0e 94 e6 11 	call	0x23cc	; 0x23cc <pinMode>
	
  	//Setup bluetooth
  	blue->setupBluetooth();
     9e0:	80 91 ce 02 	lds	r24, 0x02CE
     9e4:	90 91 cf 02 	lds	r25, 0x02CF
     9e8:	65 dc       	rcall	.-1846   	; 0x2b4 <_ZN9Bluetooth14setupBluetoothEv>
	
	power_cycle_radio();
     9ea:	bb df       	rcall	.-138    	; 0x962 <_Z17power_cycle_radiov>
	init_roomba_state(&roomba);
     9ec:	88 e9       	ldi	r24, 0x98	; 152
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	d8 df       	rcall	.-80     	; 0x9a2 <_Z17init_roomba_stateP12roomba_state>
	
	//Initialize radio
	Radio_Init();
     9f2:	1d d2       	rcall	.+1082   	; 0xe2e <_Z10Radio_Initv>
	IR_init();
     9f4:	47 d0       	rcall	.+142    	; 0xa84 <_Z7IR_initv>
	Radio_Configure_Rx(RADIO_PIPE_0, ROOMBA_ADDRESSES[roomba_num], ENABLE);
     9f6:	60 91 0b 02 	lds	r22, 0x020B
     9fa:	85 e0       	ldi	r24, 0x05	; 5
     9fc:	68 9f       	mul	r22, r24
     9fe:	b0 01       	movw	r22, r0
     a00:	11 24       	eor	r1, r1
     a02:	6b 5e       	subi	r22, 0xEB	; 235
     a04:	7d 4f       	sbci	r23, 0xFD	; 253
     a06:	41 e0       	ldi	r20, 0x01	; 1
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 d2       	rcall	.+1312   	; 0xf2c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>
	Radio_Configure(RADIO_1MBPS, RADIO_HIGHEST_POWER);
     a0c:	63 e0       	ldi	r22, 0x03	; 3
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	15 d3       	rcall	.+1578   	; 0x103c <_Z15Radio_Configure9_radio_dr15_radio_tx_power>
 
	//Create the services
	radio_receive_service = Service_Init();
     a12:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <Service_Init>
     a16:	90 93 d3 02 	sts	0x02D3, r25
     a1a:	80 93 d2 02 	sts	0x02D2, r24
	ir_receive_service = Service_Init();
     a1e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <Service_Init>
     a22:	90 93 d1 02 	sts	0x02D1, r25
     a26:	80 93 d0 02 	sts	0x02D0, r24

	//Create the tasks
	Task_Create_System(setup_roomba, 0);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	8b ea       	ldi	r24, 0xAB	; 171
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Task_Create_System>
	Task_Create_RR(current_bluetooth_state,0);
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	8e e1       	ldi	r24, 0x1E	; 30
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Task_Create_RR>
 	Task_Create_RR(current_radio_state,0);
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	8c e8       	ldi	r24, 0x8C	; 140
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Task_Create_RR>
 	Task_Create_RR(current_ir_state,0);
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	88 e9       	ldi	r24, 0x98	; 152
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Task_Create_RR>
	//Task_Create_RR(rr_task_hello_world,0);
	//Task_Create_Periodic(check_bump_sensor, 0, 80, 60, 1000);
 
	Task_Terminate();
     a5a:	18 d6       	rcall	.+3120   	; 0x168c <Task_Terminate>
	return 0 ;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	08 95       	ret

00000a62 <_GLOBAL__sub_I_radio_receive_service>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29

SERVICE* radio_receive_service;
SERVICE* ir_receive_service;

// bluetooth driver
Bluetooth *blue = new Bluetooth("RoombaBluetooth");
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	95 e0       	ldi	r25, 0x05	; 5
     a6a:	0e 94 29 14 	call	0x2852	; 0x2852 <_Znwj>
     a6e:	ec 01       	movw	r28, r24
     a70:	63 e7       	ldi	r22, 0x73	; 115
     a72:	72 e0       	ldi	r23, 0x02	; 2
     a74:	4f dd       	rcall	.-1378   	; 0x514 <_ZN9BluetoothC1EPc>
     a76:	d0 93 cf 02 	sts	0x02CF, r29
     a7a:	c0 93 ce 02 	sts	0x02CE, r28
	//Task_Create_RR(rr_task_hello_world,0);
	//Task_Create_Periodic(check_bump_sensor, 0, 80, 60, 1000);
 
	Task_Terminate();
	return 0 ;
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <_Z7IR_initv>:
//Input on pin 3 (PE5/INT5)
void IR_init() {

	// This block sets up the PWM timers for controlling
	// the IR transmitter
	DDRL |= (1 << PL3)  | ( 1 << PL5);
     a84:	ea e0       	ldi	r30, 0x0A	; 10
     a86:	f1 e0       	ldi	r31, 0x01	; 1
     a88:	80 81       	ld	r24, Z
     a8a:	88 62       	ori	r24, 0x28	; 40
     a8c:	80 83       	st	Z, r24
	TCCR5A = 0;
     a8e:	a0 e2       	ldi	r26, 0x20	; 32
     a90:	b1 e0       	ldi	r27, 0x01	; 1
     a92:	1c 92       	st	X, r1
	TCCR5B = 0;
     a94:	e1 e2       	ldi	r30, 0x21	; 33
     a96:	f1 e0       	ldi	r31, 0x01	; 1
     a98:	10 82       	st	Z, r1
	//TIMSK5 &= ~(1 << OCIE5C);
	// fast pwm
	TCCR5A |= (1<<WGM50) | (1<<WGM51);
     a9a:	8c 91       	ld	r24, X
     a9c:	83 60       	ori	r24, 0x03	; 3
     a9e:	8c 93       	st	X, r24
	TCCR5B |= (1<<WGM52) | (1<<WGM53);
     aa0:	80 81       	ld	r24, Z
     aa2:	88 61       	ori	r24, 0x18	; 24
     aa4:	80 83       	st	Z, r24
	// output to pin 44, for output C
	// but have the output turned off to begin with.
	TCCR5A &= ~(1 << COM5C1);
     aa6:	8c 91       	ld	r24, X
     aa8:	87 7f       	andi	r24, 0xF7	; 247
     aaa:	8c 93       	st	X, r24
	//TCCR5A |= (1 << COM5C1);
	// no prescaler
	TCCR5B |= (1 << CS50);
     aac:	80 81       	ld	r24, Z
     aae:	81 60       	ori	r24, 0x01	; 1
     ab0:	80 83       	st	Z, r24
	// set output compare counts
	OCR5A = 421; // 38 Khz
     ab2:	85 ea       	ldi	r24, 0xA5	; 165
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	90 93 29 01 	sts	0x0129, r25
     aba:	80 93 28 01 	sts	0x0128, r24
	OCR5C = 210; // 50 % duty
     abe:	82 ed       	ldi	r24, 0xD2	; 210
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	90 93 2d 01 	sts	0x012D, r25
     ac6:	80 93 2c 01 	sts	0x012C, r24

	// Interrupt Timer 3.
	//clear the control registers
	TCCR3A = 0;
     aca:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;
     ace:	e1 e9       	ldi	r30, 0x91	; 145
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	10 82       	st	Z, r1
	//Leave on normal mode.
	//No prescaller
	TCCR3B |= (1<<CS10);
     ad4:	80 81       	ld	r24, Z
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	80 83       	st	Z, r24
	//Make sure interrupt is disabled until external interrupt
	TIMSK3 &= ~(1<<OCIE3A);
     ada:	e1 e7       	ldi	r30, 0x71	; 113
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	8d 7f       	andi	r24, 0xFD	; 253
     ae2:	80 83       	st	Z, r24

	//Setup the input interrupt on pin 3 (PE5/INT5)
	// DDRE &= ~(1<<PE5);
	// EICRB |= (1<<ISC51) | (1<<ISC50);
	DDRE &= ~_BV(PE5);
     ae4:	6d 98       	cbi	0x0d, 5	; 13

	EICRB |= (1<<ISC51) | (1<<ISC50);
     ae6:	ea e6       	ldi	r30, 0x6A	; 106
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	8c 60       	ori	r24, 0x0C	; 12
     aee:	80 83       	st	Z, r24
	// EICRB |= _BV(ISC51);
	// EICRB &= ~_BV(ISC50);
	EIMSK |= _BV(INT5);
     af0:	ed 9a       	sbi	0x1d, 5	; 29
	EIFR |= _BV(INTF5);
     af2:	e5 9a       	sbi	0x1c, 5	; 28
     af4:	08 95       	ret

00000af6 <__vector_6>:
}


//Receiving a signal.
ISR(INT5_vect) {
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
	if(!is_receiving) {
     b04:	80 91 d8 02 	lds	r24, 0x02D8
     b08:	81 11       	cpse	r24, r1
     b0a:	17 c0       	rjmp	.+46     	; 0xb3a <__vector_6+0x44>
		//Start a new byte, start the timers.
		is_receiving = 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 d8 02 	sts	0x02D8, r24
		currentBit = 0;
     b12:	10 92 d6 02 	sts	0x02D6, r1
		currentByte = 0;
     b16:	10 92 d5 02 	sts	0x02D5, r1

		//Clear any existing timer interrupts.
		TIFR3 |= (1<<OCF3A);
     b1a:	c1 9a       	sbi	0x18, 1	; 24

		//Delay by 1.5 bit lengths.
		// i.e 8000 + 8000
		OCR3A = TCNT3 + 12000;
     b1c:	80 91 94 00 	lds	r24, 0x0094
     b20:	90 91 95 00 	lds	r25, 0x0095
     b24:	80 52       	subi	r24, 0x20	; 32
     b26:	91 4d       	sbci	r25, 0xD1	; 209
     b28:	90 93 99 00 	sts	0x0099, r25
     b2c:	80 93 98 00 	sts	0x0098, r24
		// enable timer 3 interrupts
		TIMSK3 |= (1<<OCIE3A);
     b30:	80 91 71 00 	lds	r24, 0x0071
     b34:	82 60       	ori	r24, 0x02	; 2
     b36:	80 93 71 00 	sts	0x0071, r24
	}
}
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	0f 90       	pop	r0
     b44:	1f 90       	pop	r1
     b46:	18 95       	reti

00000b48 <__vector_32>:

//Read a new arriving signal.
ISR(TIMER3_COMPA_vect) {
     b48:	1f 92       	push	r1
     b4a:	0f 92       	push	r0
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	0f 92       	push	r0
     b50:	11 24       	eor	r1, r1
     b52:	0b b6       	in	r0, 0x3b	; 59
     b54:	0f 92       	push	r0
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
	if(is_receiving) {
     b6e:	80 91 d8 02 	lds	r24, 0x02D8
     b72:	88 23       	and	r24, r24
     b74:	91 f1       	breq	.+100    	; 0xbda <__vector_32+0x92>

		// check to see if the input pin is HIGH ( digital pin 3)
		if(!(PINE & (1<<PE5)) ) {
     b76:	65 99       	sbic	0x0c, 5	; 12
     b78:	0e c0       	rjmp	.+28     	; 0xb96 <__vector_32+0x4e>
			currentByte |= (1<<currentBit);
     b7a:	30 91 d6 02 	lds	r19, 0x02D6
     b7e:	20 91 d5 02 	lds	r18, 0x02D5
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	03 2e       	mov	r0, r19
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <__vector_32+0x44>
     b8a:	88 0f       	add	r24, r24
     b8c:	0a 94       	dec	r0
     b8e:	ea f7       	brpl	.-6      	; 0xb8a <__vector_32+0x42>
     b90:	82 2b       	or	r24, r18
     b92:	80 93 d5 02 	sts	0x02D5, r24
		}


		++currentBit;
     b96:	80 91 d6 02 	lds	r24, 0x02D6
     b9a:	8f 5f       	subi	r24, 0xFF	; 255
     b9c:	80 93 d6 02 	sts	0x02D6, r24
		OCR3A += 8000;
     ba0:	80 91 98 00 	lds	r24, 0x0098
     ba4:	90 91 99 00 	lds	r25, 0x0099
     ba8:	80 5c       	subi	r24, 0xC0	; 192
     baa:	90 4e       	sbci	r25, 0xE0	; 224
     bac:	90 93 99 00 	sts	0x0099, r25
     bb0:	80 93 98 00 	sts	0x0098, r24

		if(currentBit >= 8) {
     bb4:	80 91 d6 02 	lds	r24, 0x02D6
     bb8:	88 30       	cpi	r24, 0x08	; 8
     bba:	88 f0       	brcs	.+34     	; 0xbde <__vector_32+0x96>
			is_receiving = 0;
     bbc:	10 92 d8 02 	sts	0x02D8, r1

			// disable further timer3 interrupts
			TIMSK3 &= ~(1<<OCIE3A);
     bc0:	80 91 71 00 	lds	r24, 0x0071
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	80 93 71 00 	sts	0x0071, r24

			// clear any pending timer3 interrupts
			TIFR3 |= (1<<OCF3A);
     bca:	c1 9a       	sbi	0x18, 1	; 24

			// clear the any interrupts waiting on the IR receiver
			EIFR |= (1<<INTF5);
     bcc:	e5 9a       	sbi	0x1c, 5	; 28

			// here we should call
			outputByte = currentByte;
     bce:	80 91 d5 02 	lds	r24, 0x02D5
     bd2:	80 93 d4 02 	sts	0x02D4, r24
			ir_rxhandler();
     bd6:	e0 dc       	rcall	.-1600   	; 0x598 <_Z12ir_rxhandlerv>
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <__vector_32+0x96>
		}
	}else if (is_transmitting) {
     bda:	80 91 d7 02 	lds	r24, 0x02D7

	}
}
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	0b be       	out	0x3b, r0	; 59
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <_Z16enable_interruptv>:


void enable_interrupt() {
	//Clears existing interrupts.
	EIFR  |= (1<<INTF5);
     c04:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK |= (1<<INT5);
     c06:	ed 9a       	sbi	0x1d, 5	; 29
     c08:	08 95       	ret

00000c0a <_Z17disable_interruptv>:
}

void disable_interrupt() {
	EIMSK &= ~(1<<INT5);
     c0a:	ed 98       	cbi	0x1d, 5	; 29
	TIMSK3 &= ~(1<<OCIE3A);
     c0c:	e1 e7       	ldi	r30, 0x71	; 113
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	8d 7f       	andi	r24, 0xFD	; 253
     c14:	80 83       	st	Z, r24
	TIFR3 |= (1<<OCF3A);
     c16:	c1 9a       	sbi	0x18, 1	; 24
	is_receiving = 0;
     c18:	10 92 d8 02 	sts	0x02D8, r1
     c1c:	08 95       	ret

00000c1e <_Z4markv>:
}

void mark() {
	TCCR5A |= (1<<COM5C1);
     c1e:	e0 e2       	ldi	r30, 0x20	; 32
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	80 81       	ld	r24, Z
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c28:	8f ec       	ldi	r24, 0xCF	; 207
     c2a:	97 e0       	ldi	r25, 0x07	; 7
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <_Z4markv+0xe>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <_Z4markv+0x14>
     c32:	00 00       	nop
     c34:	08 95       	ret

00000c36 <_Z5spacev>:
	_delay_us(500);
}
void space() {
	TCCR5A &= ~(1 << COM5C1);
     c36:	e0 e2       	ldi	r30, 0x20	; 32
     c38:	f1 e0       	ldi	r31, 0x01	; 1
     c3a:	80 81       	ld	r24, Z
     c3c:	87 7f       	andi	r24, 0xF7	; 247
     c3e:	80 83       	st	Z, r24
     c40:	8f ec       	ldi	r24, 0xCF	; 207
     c42:	97 e0       	ldi	r25, 0x07	; 7
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <_Z5spacev+0xe>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <_Z5spacev+0x14>
     c4a:	00 00       	nop
     c4c:	08 95       	ret

00000c4e <_Z11IR_transmith>:
	_delay_us(500);
}

void IR_transmit(uint8_t data) {
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	08 2f       	mov	r16, r24
	uint8_t sreg = SREG;
     c5a:	ff b6       	in	r15, 0x3f	; 63
	cli();
     c5c:	f8 94       	cli

	disable_interrupt();
     c5e:	d5 df       	rcall	.-86     	; 0xc0a <_Z17disable_interruptv>
	TCCR5A |= (1<<COM5C1);
     c60:	90 91 20 01 	lds	r25, 0x0120
     c64:	98 60       	ori	r25, 0x08	; 8
     c66:	90 93 20 01 	sts	0x0120, r25
	mark();
     c6a:	d9 df       	rcall	.-78     	; 0xc1e <_Z4markv>
	space();
     c6c:	e4 df       	rcall	.-56     	; 0xc36 <_Z5spacev>
	for(int i = 0; i < 8; i++) {
     c6e:	c0 e0       	ldi	r28, 0x00	; 0
     c70:	d0 e0       	ldi	r29, 0x00	; 0
		if(((data >> i) & 0x1)) {
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	c8 01       	movw	r24, r16
     c76:	0c 2e       	mov	r0, r28
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <_Z11IR_transmith+0x30>
     c7a:	95 95       	asr	r25
     c7c:	87 95       	ror	r24
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <_Z11IR_transmith+0x2c>
     c82:	80 ff       	sbrs	r24, 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <_Z11IR_transmith+0x3c>
			mark();
     c86:	cb df       	rcall	.-106    	; 0xc1e <_Z4markv>
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <_Z11IR_transmith+0x3e>
		} else {
			space();
     c8a:	d5 df       	rcall	.-86     	; 0xc36 <_Z5spacev>

	disable_interrupt();
	TCCR5A |= (1<<COM5C1);
	mark();
	space();
	for(int i = 0; i < 8; i++) {
     c8c:	21 96       	adiw	r28, 0x01	; 1
     c8e:	c8 30       	cpi	r28, 0x08	; 8
     c90:	d1 05       	cpc	r29, r1
     c92:	81 f7       	brne	.-32     	; 0xc74 <_Z11IR_transmith+0x26>
			mark();
		} else {
			space();
		}
	}
	space();
     c94:	d0 df       	rcall	.-96     	; 0xc36 <_Z5spacev>
	enable_interrupt();
     c96:	b6 df       	rcall	.-148    	; 0xc04 <_Z16enable_interruptv>

	SREG = sreg; // sei();
     c98:	ff be       	out	0x3f, r15	; 63
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	08 95       	ret

00000ca6 <_Z10IR_getLastv>:

uint8_t IR_getLast(){
	return outputByte;
     ca6:	80 91 d4 02 	lds	r24, 0x02D4
     caa:	08 95       	ret

00000cac <_ZL10get_statusv>:
}

void Radio_Flush()
{
	send_instruction(FLUSH_TX, NULL, NULL, 0);
	send_instruction(FLUSH_RX, NULL, NULL, 0);
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	c2 e0       	ldi	r28, 0x02	; 2
     cb2:	d1 e0       	ldi	r29, 0x01	; 1
     cb4:	88 81       	ld	r24, Y
     cb6:	8f 7b       	andi	r24, 0xBF	; 191
     cb8:	88 83       	st	Y, r24
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	1e d3       	rcall	.+1596   	; 0x12fa <_Z14SPI_Write_Byteh>
     cbe:	98 81       	ld	r25, Y
     cc0:	90 64       	ori	r25, 0x40	; 64
     cc2:	98 83       	st	Y, r25
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <_ZL12set_registerhPhh>:
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	1f 92       	push	r1
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	8b 01       	movw	r16, r22
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	c9 2e       	mov	r12, r25
     ce4:	dd 24       	eor	r13, r13
     ce6:	d3 94       	inc	r13
     ce8:	f6 01       	movw	r30, r12
     cea:	90 81       	ld	r25, Z
     cec:	9f 7b       	andi	r25, 0xBF	; 191
     cee:	90 83       	st	Z, r25
     cf0:	8f 71       	andi	r24, 0x1F	; 31
     cf2:	80 62       	ori	r24, 0x20	; 32
     cf4:	49 83       	std	Y+1, r20	; 0x01
     cf6:	01 d3       	rcall	.+1538   	; 0x12fa <_Z14SPI_Write_Byteh>
     cf8:	f8 2e       	mov	r15, r24
     cfa:	49 81       	ldd	r20, Y+1	; 0x01
     cfc:	64 2f       	mov	r22, r20
     cfe:	c8 01       	movw	r24, r16
     d00:	ef d2       	rcall	.+1502   	; 0x12e0 <_Z15SPI_Write_BlockPhh>
     d02:	f6 01       	movw	r30, r12
     d04:	90 81       	ld	r25, Z
     d06:	90 64       	ori	r25, 0x40	; 64
     d08:	90 83       	st	Z, r25
     d0a:	8f 2d       	mov	r24, r15
     d0c:	0f 90       	pop	r0
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	08 95       	ret

00000d1e <_ZL16send_instructionhPhS_h>:
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	1f 92       	push	r1
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	7b 01       	movw	r14, r22
     d32:	8a 01       	movw	r16, r20
     d34:	90 91 02 01 	lds	r25, 0x0102
     d38:	9f 7b       	andi	r25, 0xBF	; 191
     d3a:	90 93 02 01 	sts	0x0102, r25
     d3e:	29 83       	std	Y+1, r18	; 0x01
     d40:	dc d2       	rcall	.+1464   	; 0x12fa <_Z14SPI_Write_Byteh>
     d42:	29 81       	ldd	r18, Y+1	; 0x01
     d44:	22 23       	and	r18, r18
     d46:	59 f0       	breq	.+22     	; 0xd5e <_ZL16send_instructionhPhS_h+0x40>
     d48:	01 15       	cp	r16, r1
     d4a:	11 05       	cpc	r17, r1
     d4c:	21 f4       	brne	.+8      	; 0xd56 <_ZL16send_instructionhPhS_h+0x38>
     d4e:	62 2f       	mov	r22, r18
     d50:	c7 01       	movw	r24, r14
     d52:	c6 d2       	rcall	.+1420   	; 0x12e0 <_Z15SPI_Write_BlockPhh>
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <_ZL16send_instructionhPhS_h+0x40>
     d56:	42 2f       	mov	r20, r18
     d58:	b8 01       	movw	r22, r16
     d5a:	c7 01       	movw	r24, r14
     d5c:	b0 d2       	rcall	.+1376   	; 0x12be <_Z19SPI_ReadWrite_BlockPhS_h>
     d5e:	80 91 02 01 	lds	r24, 0x0102
     d62:	80 64       	ori	r24, 0x40	; 64
     d64:	80 93 02 01 	sts	0x0102, r24
     d68:	0f 90       	pop	r0
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	08 95       	ret

00000d78 <_ZL19reset_pipe0_addressv>:
     d78:	80 91 36 02 	lds	r24, 0x0236
     d7c:	88 23       	and	r24, r24
     d7e:	29 f0       	breq	.+10     	; 0xd8a <_ZL19reset_pipe0_addressv+0x12>
     d80:	45 e0       	ldi	r20, 0x05	; 5
     d82:	6c e2       	ldi	r22, 0x2C	; 44
     d84:	72 e0       	ldi	r23, 0x02	; 2
     d86:	8a e0       	ldi	r24, 0x0A	; 10
     d88:	a0 cf       	rjmp	.-192    	; 0xcca <_ZL12set_registerhPhh>
     d8a:	08 95       	ret

00000d8c <_ZL12get_registerhPhh.constprop.1>:
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	1f 92       	push	r1
     d98:	1f 92       	push	r1
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	9f ef       	ldi	r25, 0xFF	; 255
     da0:	fb 01       	movw	r30, r22
     da2:	90 83       	st	Z, r25
     da4:	22 e0       	ldi	r18, 0x02	; 2
     da6:	e2 2e       	mov	r14, r18
     da8:	ff 24       	eor	r15, r15
     daa:	f3 94       	inc	r15
     dac:	f7 01       	movw	r30, r14
     dae:	90 81       	ld	r25, Z
     db0:	9f 7b       	andi	r25, 0xBF	; 191
     db2:	90 83       	st	Z, r25
     db4:	8f 71       	andi	r24, 0x1F	; 31
     db6:	69 83       	std	Y+1, r22	; 0x01
     db8:	7a 83       	std	Y+2, r23	; 0x02
     dba:	9f d2       	rcall	.+1342   	; 0x12fa <_Z14SPI_Write_Byteh>
     dbc:	18 2f       	mov	r17, r24
     dbe:	41 e0       	ldi	r20, 0x01	; 1
     dc0:	69 81       	ldd	r22, Y+1	; 0x01
     dc2:	7a 81       	ldd	r23, Y+2	; 0x02
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	7a d2       	rcall	.+1268   	; 0x12be <_Z19SPI_ReadWrite_BlockPhS_h>
     dca:	f7 01       	movw	r30, r14
     dcc:	90 81       	ld	r25, Z
     dce:	90 64       	ori	r25, 0x40	; 64
     dd0:	90 83       	st	Z, r25
     dd2:	81 2f       	mov	r24, r17
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <_ZL11set_rx_modev>:
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	1f 92       	push	r1
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	ca df       	rcall	.-108    	; 0xd8c <_ZL12get_registerhPhh.constprop.1>
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	80 fd       	sbrc	r24, 0
     dfc:	14 c0       	rjmp	.+40     	; 0xe26 <_ZL11set_rx_modev+0x42>
     dfe:	81 60       	ori	r24, 0x01	; 1
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	be 01       	movw	r22, r28
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	5e df       	rcall	.-324    	; 0xcca <_ZL12set_registerhPhh>
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <_ZL11set_rx_modev+0x2e>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <_ZL11set_rx_modev+0x34>
     e18:	00 00       	nop
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <_ZL11set_rx_modev+0x3a>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <_ZL11set_rx_modev+0x40>
     e24:	00 00       	nop
     e26:	0f 90       	pop	r0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <_Z10Radio_Initv>:
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	1f 92       	push	r1
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	10 92 d9 02 	sts	0x02D9, r1
     e3e:	e1 e0       	ldi	r30, 0x01	; 1
     e40:	f1 e0       	ldi	r31, 0x01	; 1
     e42:	80 81       	ld	r24, Z
     e44:	88 61       	ori	r24, 0x18	; 24
     e46:	80 83       	st	Z, r24
     e48:	a2 e0       	ldi	r26, 0x02	; 2
     e4a:	b1 e0       	ldi	r27, 0x01	; 1
     e4c:	8c 91       	ld	r24, X
     e4e:	8f 7e       	andi	r24, 0xEF	; 239
     e50:	8c 93       	st	X, r24
     e52:	8c 91       	ld	r24, X
     e54:	87 7f       	andi	r24, 0xF7	; 247
     e56:	8c 93       	st	X, r24
     e58:	8c 91       	ld	r24, X
     e5a:	8f 7d       	andi	r24, 0xDF	; 223
     e5c:	8c 93       	st	X, r24
     e5e:	80 81       	ld	r24, Z
     e60:	80 62       	ori	r24, 0x20	; 32
     e62:	80 83       	st	Z, r24
     e64:	80 81       	ld	r24, Z
     e66:	80 64       	ori	r24, 0x40	; 64
     e68:	80 83       	st	Z, r24
     e6a:	6c 98       	cbi	0x0d, 4	; 13
     e6c:	ea e6       	ldi	r30, 0x6A	; 106
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	80 83       	st	Z, r24
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	80 83       	st	Z, r24
     e7c:	ec 9a       	sbi	0x1d, 4	; 29
     e7e:	e4 9a       	sbi	0x1c, 4	; 28
     e80:	8f ed       	ldi	r24, 0xDF	; 223
     e82:	9b ea       	ldi	r25, 0xAB	; 171
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <_Z10Radio_Initv+0x56>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <_Z10Radio_Initv+0x5c>
     e8a:	00 00       	nop
     e8c:	0b d2       	rcall	.+1046   	; 0x12a4 <_Z8SPI_Initv>
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	41 e0       	ldi	r20, 0x01	; 1
     e94:	be 01       	movw	r22, r28
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	17 df       	rcall	.-466    	; 0xcca <_ZL12set_registerhPhh>
     e9c:	85 e1       	ldi	r24, 0x15	; 21
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	be 01       	movw	r22, r28
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	84 e0       	ldi	r24, 0x04	; 4
     eaa:	0f df       	rcall	.-482    	; 0xcca <_ZL12set_registerhPhh>
     eac:	10 e7       	ldi	r17, 0x70	; 112
     eae:	19 83       	std	Y+1, r17	; 0x01
     eb0:	41 e0       	ldi	r20, 0x01	; 1
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	85 e0       	ldi	r24, 0x05	; 5
     eba:	07 df       	rcall	.-498    	; 0xcca <_ZL12set_registerhPhh>
     ebc:	89 e0       	ldi	r24, 0x09	; 9
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	be 01       	movw	r22, r28
     ec4:	6f 5f       	subi	r22, 0xFF	; 255
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	86 e0       	ldi	r24, 0x06	; 6
     eca:	ff de       	rcall	.-514    	; 0xcca <_ZL12set_registerhPhh>
     ecc:	8f e0       	ldi	r24, 0x0F	; 15
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	be 01       	movw	r22, r28
     ed4:	6f 5f       	subi	r22, 0xFF	; 255
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	f7 de       	rcall	.-530    	; 0xcca <_ZL12set_registerhPhh>
     edc:	19 83       	std	Y+1, r17	; 0x01
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	be 01       	movw	r22, r28
     ee2:	6f 5f       	subi	r22, 0xFF	; 255
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	87 e0       	ldi	r24, 0x07	; 7
     ee8:	f0 de       	rcall	.-544    	; 0xcca <_ZL12set_registerhPhh>
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	81 ee       	ldi	r24, 0xE1	; 225
     ef6:	13 df       	rcall	.-474    	; 0xd1e <_ZL16send_instructionhPhS_h>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	82 ee       	ldi	r24, 0xE2	; 226
     f04:	0c df       	rcall	.-488    	; 0xd1e <_ZL16send_instructionhPhS_h>
     f06:	8f e3       	ldi	r24, 0x3F	; 63
     f08:	9f e1       	ldi	r25, 0x1F	; 31
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <_Z10Radio_Initv+0xdc>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <_Z10Radio_Initv+0xe2>
     f10:	00 00       	nop
     f12:	e2 e0       	ldi	r30, 0x02	; 2
     f14:	f1 e0       	ldi	r31, 0x01	; 1
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	80 83       	st	Z, r24
     f1c:	80 81       	ld	r24, Z
     f1e:	80 61       	ori	r24, 0x10	; 16
     f20:	80 83       	st	Z, r24
     f22:	0f 90       	pop	r0
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	08 95       	ret

00000f2c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>:
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	1f 92       	push	r1
     f3c:	1f 92       	push	r1
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	98 2f       	mov	r25, r24
     f44:	fb 01       	movw	r30, r22
     f46:	d4 2e       	mov	r13, r20
     f48:	86 30       	cpi	r24, 0x06	; 6
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x22>
     f4c:	59 c0       	rjmp	.+178    	; 0x1000 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xd4>
     f4e:	81 11       	cpse	r24, r1
     f50:	10 c0       	rjmp	.+32     	; 0xf72 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x46>
     f52:	80 81       	ld	r24, Z
     f54:	80 93 2c 02 	sts	0x022C, r24
     f58:	81 81       	ldd	r24, Z+1	; 0x01
     f5a:	80 93 2d 02 	sts	0x022D, r24
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	80 93 2e 02 	sts	0x022E, r24
     f64:	83 81       	ldd	r24, Z+3	; 0x03
     f66:	80 93 2f 02 	sts	0x022F, r24
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	80 93 30 02 	sts	0x0230, r24
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x4e>
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	11 f0       	breq	.+4      	; 0xf7a <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x4e>
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x50>
     f7a:	45 e0       	ldi	r20, 0x05	; 5
     f7c:	bf 01       	movw	r22, r30
     f7e:	8a e0       	ldi	r24, 0x0A	; 10
     f80:	89 0f       	add	r24, r25
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	a2 de       	rcall	.-700    	; 0xcca <_ZL12set_registerhPhh>
     f86:	be 01       	movw	r22, r28
     f88:	6f 5f       	subi	r22, 0xFF	; 255
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	fe de       	rcall	.-516    	; 0xd8c <_ZL12get_registerhPhh.constprop.1>
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	e9 2e       	mov	r14, r25
     f94:	f1 2c       	mov	r15, r1
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	10 e0       	ldi	r17, 0x00	; 0
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x72>
     f9c:	00 0f       	add	r16, r16
     f9e:	9a 95       	dec	r25
     fa0:	ea f7       	brpl	.-6      	; 0xf9c <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x70>
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	80 2b       	or	r24, r16
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	be 01       	movw	r22, r28
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	8b de       	rcall	.-746    	; 0xcca <_ZL12set_registerhPhh>
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	dd 20       	and	r13, r13
     fb8:	11 f0       	breq	.+4      	; 0xfbe <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x92>
     fba:	80 e2       	ldi	r24, 0x20	; 32
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x94>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	be 01       	movw	r22, r28
     fc6:	6f 5f       	subi	r22, 0xFF	; 255
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	81 e1       	ldi	r24, 0x11	; 17
     fcc:	89 0f       	add	r24, r25
     fce:	7d de       	rcall	.-774    	; 0xcca <_ZL12set_registerhPhh>
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	f7 01       	movw	r30, r14
     fd4:	ea 5c       	subi	r30, 0xCA	; 202
     fd6:	fd 4f       	sbci	r31, 0xFD	; 253
     fd8:	80 83       	st	Z, r24
     fda:	be 01       	movw	r22, r28
     fdc:	6f 5f       	subi	r22, 0xFF	; 255
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	d4 de       	rcall	.-600    	; 0xd8c <_ZL12get_registerhPhh.constprop.1>
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	dd 20       	and	r13, r13
     fe8:	11 f0       	breq	.+4      	; 0xfee <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xc2>
     fea:	08 2b       	or	r16, r24
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xc6>
     fee:	00 95       	com	r16
     ff0:	08 23       	and	r16, r24
     ff2:	09 83       	std	Y+1, r16	; 0x01
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	be 01       	movw	r22, r28
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	65 de       	rcall	.-822    	; 0xcca <_ZL12set_registerhPhh>
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	08 95       	ret

00001014 <_Z17Radio_Set_Tx_AddrPh>:
    1014:	fc 01       	movw	r30, r24
    1016:	80 81       	ld	r24, Z
    1018:	80 93 31 02 	sts	0x0231, r24
    101c:	81 81       	ldd	r24, Z+1	; 0x01
    101e:	80 93 32 02 	sts	0x0232, r24
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	80 93 33 02 	sts	0x0233, r24
    1028:	83 81       	ldd	r24, Z+3	; 0x03
    102a:	80 93 34 02 	sts	0x0234, r24
    102e:	84 81       	ldd	r24, Z+4	; 0x04
    1030:	80 93 35 02 	sts	0x0235, r24
    1034:	45 e0       	ldi	r20, 0x05	; 5
    1036:	bf 01       	movw	r22, r30
    1038:	80 e1       	ldi	r24, 0x10	; 16
    103a:	47 ce       	rjmp	.-882    	; 0xcca <_ZL12set_registerhPhh>

0000103c <_Z15Radio_Configure9_radio_dr15_radio_tx_power>:
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	1f 92       	push	r1
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	18 2f       	mov	r17, r24
    104c:	06 2f       	mov	r16, r22
    104e:	64 30       	cpi	r22, 0x04	; 4
    1050:	a8 f4       	brcc	.+42     	; 0x107c <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x40>
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	98 f4       	brcc	.+38     	; 0x107c <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x40>
    1056:	be 01       	movw	r22, r28
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	86 e0       	ldi	r24, 0x06	; 6
    105e:	96 de       	rcall	.-724    	; 0xd8c <_ZL12get_registerhPhh.constprop.1>
    1060:	60 2f       	mov	r22, r16
    1062:	66 0f       	add	r22, r22
    1064:	99 81       	ldd	r25, Y+1	; 0x01
    1066:	96 60       	ori	r25, 0x06	; 6
    1068:	69 23       	and	r22, r25
    106a:	11 11       	cpse	r17, r1
    106c:	68 60       	ori	r22, 0x08	; 8
    106e:	69 83       	std	Y+1, r22	; 0x01
    1070:	41 e0       	ldi	r20, 0x01	; 1
    1072:	be 01       	movw	r22, r28
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	86 e0       	ldi	r24, 0x06	; 6
    107a:	27 de       	rcall	.-946    	; 0xcca <_ZL12set_registerhPhh>
    107c:	0f 90       	pop	r0
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <_Z14Radio_TransmitP3_rp14_radio_tx_wait>:
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	1f 92       	push	r1
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8c 01       	movw	r16, r24
    109a:	f6 2e       	mov	r15, r22
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 d9 02 	sts	0x02D9, r24
    10a2:	80 91 02 01 	lds	r24, 0x0102
    10a6:	8f 7d       	andi	r24, 0xDF	; 223
    10a8:	80 93 02 01 	sts	0x0102, r24
    10ac:	be 01       	movw	r22, r28
    10ae:	6f 5f       	subi	r22, 0xFF	; 255
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	6b de       	rcall	.-810    	; 0xd8c <_ZL12get_registerhPhh.constprop.1>
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	80 ff       	sbrs	r24, 0
    10ba:	14 c0       	rjmp	.+40     	; 0x10e4 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x5c>
    10bc:	8e 7f       	andi	r24, 0xFE	; 254
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	be 01       	movw	r22, r28
    10c4:	6f 5f       	subi	r22, 0xFF	; 255
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	ff dd       	rcall	.-1026   	; 0xcca <_ZL12set_registerhPhh>
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x48>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x4e>
    10d6:	00 00       	nop
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x54>
    10e0:	00 c0       	rjmp	.+0      	; 0x10e2 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x5a>
    10e2:	00 00       	nop
    10e4:	45 e0       	ldi	r20, 0x05	; 5
    10e6:	61 e3       	ldi	r22, 0x31	; 49
    10e8:	72 e0       	ldi	r23, 0x02	; 2
    10ea:	8a e0       	ldi	r24, 0x0A	; 10
    10ec:	ee dd       	rcall	.-1060   	; 0xcca <_ZL12set_registerhPhh>
    10ee:	80 91 02 01 	lds	r24, 0x0102
    10f2:	88 60       	ori	r24, 0x08	; 8
    10f4:	80 93 02 01 	sts	0x0102, r24
    10f8:	20 e2       	ldi	r18, 0x20	; 32
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	b8 01       	movw	r22, r16
    1100:	80 ea       	ldi	r24, 0xA0	; 160
    1102:	0d de       	rcall	.-998    	; 0xd1e <_ZL16send_instructionhPhS_h>
    1104:	80 91 02 01 	lds	r24, 0x0102
    1108:	80 62       	ori	r24, 0x20	; 32
    110a:	80 93 02 01 	sts	0x0102, r24
    110e:	f1 10       	cpse	r15, r1
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x98>
    1112:	80 91 d9 02 	lds	r24, 0x02D9
    1116:	81 11       	cpse	r24, r1
    1118:	fc cf       	rjmp	.-8      	; 0x1112 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x8a>
    111a:	80 91 29 02 	lds	r24, 0x0229
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <_Z14Radio_TransmitP3_rp14_radio_tx_wait+0x9a>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	0f 90       	pop	r0
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	08 95       	ret

00001130 <_Z13Radio_ReceiveP3_rp>:
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	ec 01       	movw	r28, r24
    1136:	10 92 d9 02 	sts	0x02D9, r1
    113a:	80 91 02 01 	lds	r24, 0x0102
    113e:	8f 7d       	andi	r24, 0xDF	; 223
    1140:	80 93 02 01 	sts	0x0102, r24
    1144:	b3 dd       	rcall	.-1178   	; 0xcac <_ZL10get_statusv>
    1146:	8e 70       	andi	r24, 0x0E	; 14
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	35 95       	asr	r19
    114e:	27 95       	ror	r18
    1150:	f9 01       	movw	r30, r18
    1152:	ea 5c       	subi	r30, 0xCA	; 202
    1154:	fd 4f       	sbci	r31, 0xFD	; 253
    1156:	80 81       	ld	r24, Z
    1158:	81 32       	cpi	r24, 0x21	; 33
    115a:	68 f4       	brcc	.+26     	; 0x1176 <_Z13Radio_ReceiveP3_rp+0x46>
    115c:	27 30       	cpi	r18, 0x07	; 7
    115e:	69 f0       	breq	.+26     	; 0x117a <_Z13Radio_ReceiveP3_rp+0x4a>
    1160:	20 81       	ld	r18, Z
    1162:	ae 01       	movw	r20, r28
    1164:	be 01       	movw	r22, r28
    1166:	81 e6       	ldi	r24, 0x61	; 97
    1168:	da dd       	rcall	.-1100   	; 0xd1e <_ZL16send_instructionhPhS_h>
    116a:	a0 dd       	rcall	.-1216   	; 0xcac <_ZL10get_statusv>
    116c:	8e 70       	andi	r24, 0x0E	; 14
    116e:	8e 30       	cpi	r24, 0x0E	; 14
    1170:	31 f0       	breq	.+12     	; 0x117e <_Z13Radio_ReceiveP3_rp+0x4e>
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <_Z13Radio_ReceiveP3_rp+0x50>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <_Z13Radio_ReceiveP3_rp+0x50>
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <_Z13Radio_ReceiveP3_rp+0x50>
    117e:	84 e0       	ldi	r24, 0x04	; 4
    1180:	90 91 02 01 	lds	r25, 0x0102
    1184:	90 62       	ori	r25, 0x20	; 32
    1186:	90 93 02 01 	sts	0x0102, r25
    118a:	10 92 d9 02 	sts	0x02D9, r1
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <__vector_5>:
}


// Interrupt handler
ISR(INT4_vect)
{
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	0b b6       	in	r0, 0x3b	; 59
    11a0:	0f 92       	push	r0
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	1f 92       	push	r1
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

	DEBUG_2_LOW;
    11c4:	80 91 02 01 	lds	r24, 0x0102
    11c8:	8f 7e       	andi	r24, 0xEF	; 239
    11ca:	80 93 02 01 	sts	0x0102, r24
    CE_LOW();
    11ce:	80 91 02 01 	lds	r24, 0x0102
    11d2:	8f 7d       	andi	r24, 0xDF	; 223
    11d4:	80 93 02 01 	sts	0x0102, r24

    status = get_status();
    11d8:	69 dd       	rcall	.-1326   	; 0xcac <_ZL10get_statusv>
    11da:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR))
    11dc:	86 ff       	sbrs	r24, 6
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <__vector_5+0x52>
    {
    	pipe_number =  (status & 0xE) >> 1;
    11e0:	8e 70       	andi	r24, 0x0E	; 14
    	radio_rxhandler(pipe_number);
    11e2:	86 95       	lsr	r24
    11e4:	cd d9       	rcall	.-3174   	; 0x580 <_Z15radio_rxhandlerh>
    }
    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS))
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	85 ff       	sbrs	r24, 5
    11ea:	1b c0       	rjmp	.+54     	; 0x1222 <__vector_5+0x8e>
    {
        // if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    11ec:	10 92 d9 02 	sts	0x02D9, r1
        reset_pipe0_address();
    11f0:	c3 dd       	rcall	.-1146   	; 0xd78 <_ZL19reset_pipe0_addressv>
        set_rx_mode();
    11f2:	f8 dd       	rcall	.-1040   	; 0xde4 <_ZL11set_rx_modev>

    	// indicate in the history that a packet was transmitted successfully by appending a 1.
    	tx_history <<= 1;
    11f4:	80 91 2a 02 	lds	r24, 0x022A
    11f8:	90 91 2b 02 	lds	r25, 0x022B
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	90 93 2b 02 	sts	0x022B, r25
    1204:	80 93 2a 02 	sts	0x022A, r24
    	tx_history |= 1;
    1208:	80 91 2a 02 	lds	r24, 0x022A
    120c:	90 91 2b 02 	lds	r25, 0x022B
    1210:	81 60       	ori	r24, 0x01	; 1
    1212:	90 93 2b 02 	sts	0x022B, r25
    1216:	80 93 2a 02 	sts	0x022A, r24

    	tx_last_status = RADIO_TX_SUCCESS;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	80 93 29 02 	sts	0x0229, r24
    1220:	19 c0       	rjmp	.+50     	; 0x1254 <__vector_5+0xc0>
    }
    else if (status & _BV(MAX_RT))
    1222:	84 ff       	sbrs	r24, 4
    1224:	17 c0       	rjmp	.+46     	; 0x1254 <__vector_5+0xc0>
    {
        send_instruction(FLUSH_TX, NULL, NULL, 0);
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	81 ee       	ldi	r24, 0xE1	; 225
    1232:	75 dd       	rcall	.-1302   	; 0xd1e <_ZL16send_instructionhPhS_h>

    	transmit_lock = 0;
    1234:	10 92 d9 02 	sts	0x02D9, r1
    	reset_pipe0_address();
    1238:	9f dd       	rcall	.-1218   	; 0xd78 <_ZL19reset_pipe0_addressv>
		set_rx_mode();
    123a:	d4 dd       	rcall	.-1112   	; 0xde4 <_ZL11set_rx_modev>
    	// indicate in the history that a packet was dropped by appending a 0.
    	tx_history <<= 1;
    123c:	80 91 2a 02 	lds	r24, 0x022A
    1240:	90 91 2b 02 	lds	r25, 0x022B
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	90 93 2b 02 	sts	0x022B, r25
    124c:	80 93 2a 02 	sts	0x022A, r24

    	tx_last_status = RADIO_TX_MAX_RT;
    1250:	10 92 29 02 	sts	0x0229, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1254:	80 e7       	ldi	r24, 0x70	; 112
    1256:	89 83       	std	Y+1, r24	; 0x01
	set_register(STATUS, &status, 1);
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	be 01       	movw	r22, r28
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	87 e0       	ldi	r24, 0x07	; 7
    1262:	33 dd       	rcall	.-1434   	; 0xcca <_ZL12set_registerhPhh>
	DEBUG_2_HIGH;
    1264:	80 91 02 01 	lds	r24, 0x0102
    1268:	80 61       	ori	r24, 0x10	; 16
    126a:	80 93 02 01 	sts	0x0102, r24

    CE_HIGH();
    126e:	80 91 02 01 	lds	r24, 0x0102
    1272:	80 62       	ori	r24, 0x20	; 32
    1274:	80 93 02 01 	sts	0x0102, r24
}
    1278:	0f 90       	pop	r0
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0b be       	out	0x3b, r0	; 59
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	0f 90       	pop	r0
    12a0:	1f 90       	pop	r1
    12a2:	18 95       	reti

000012a4 <_Z8SPI_Initv>:
	// The DDR operations are pretty fragile and doing this less awkwardly breaks SPI.  I don't care enough
	// to figure out why right now.  Note that SPI_SS is the actual SPI port's SS pin, which is not necessarily
	// the SS pin that's used for a given slave.  Anything that uses this driver must handle its own slave selection.
	// It must set its SS pin direction to output, set the pin low before doing an SPI operation, and set it high
	// when the SPI operation is complete.
    SPI_DDR &= ~(_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SS)|_BV(SPI_SCK));
    12a4:	84 b1       	in	r24, 0x04	; 4
    12a6:	80 7f       	andi	r24, 0xF0	; 240
    12a8:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= (_BV(SPI_MOSI) | _BV(SPI_SS) | _BV(SPI_SCK));
    12aa:	84 b1       	in	r24, 0x04	; 4
    12ac:	87 60       	ori	r24, 0x07	; 7
    12ae:	84 b9       	out	0x04, r24	; 4
	 * SPR1 | SPR0 - Determines SCK frequency along with the SPI2X bit in SPSR.  See Table 17-4 in hardware manual [p178].
	 * bit 0
	 */

    // Set the AT90's SS pin high during config (this disables the Flash RAM or something)
    SPI_PORT |= _BV(SPI_SS);
    12b0:	28 9a       	sbi	0x05, 0	; 5

	SPCR = _BV(SPE) | _BV(MSTR);	// enable SPI, set as master, set prescaler to f(osc)/4
    12b2:	80 e5       	ldi	r24, 0x50	; 80
    12b4:	8c bd       	out	0x2c, r24	; 44

	SPSR = _BV(SPI2X);							// Double SCK to f(osc)/2 (4 MHz)
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	8d bd       	out	0x2d, r24	; 45

	SPI_PORT &= ~_BV(SPI_SS);
    12ba:	28 98       	cbi	0x05, 0	; 5
    12bc:	08 95       	ret

000012be <_Z19SPI_ReadWrite_BlockPhS_h>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    12be:	26 2f       	mov	r18, r22
    uint8_t i;
    for (i = 0; i < len; i++) {
    12c0:	fb 01       	movw	r30, r22
    12c2:	3e 2f       	mov	r19, r30
    12c4:	32 1b       	sub	r19, r18
    12c6:	34 17       	cp	r19, r20
    12c8:	50 f4       	brcc	.+20     	; 0x12de <_Z19SPI_ReadWrite_BlockPhS_h+0x20>
          SPDR = data[i];
    12ca:	dc 01       	movw	r26, r24
    12cc:	3d 91       	ld	r19, X+
    12ce:	cd 01       	movw	r24, r26
    12d0:	3e bd       	out	0x2e, r19	; 46
          SPI_WAIT();
    12d2:	0d b4       	in	r0, 0x2d	; 45
    12d4:	07 fe       	sbrs	r0, 7
    12d6:	fd cf       	rjmp	.-6      	; 0x12d2 <_Z19SPI_ReadWrite_BlockPhS_h+0x14>
          buffer[i] = SPDR;
    12d8:	3e b5       	in	r19, 0x2e	; 46
    12da:	31 93       	st	Z+, r19
    12dc:	f2 cf       	rjmp	.-28     	; 0x12c2 <_Z19SPI_ReadWrite_BlockPhS_h+0x4>
    }
}
    12de:	08 95       	ret

000012e0 <_Z15SPI_Write_BlockPhh>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    12e0:	28 2f       	mov	r18, r24
    uint8_t i;
    for (i = 0; i < len; i++) {
    12e2:	fc 01       	movw	r30, r24
    12e4:	8e 2f       	mov	r24, r30
    12e6:	82 1b       	sub	r24, r18
    12e8:	86 17       	cp	r24, r22
    12ea:	30 f4       	brcc	.+12     	; 0x12f8 <_Z15SPI_Write_BlockPhh+0x18>
          SPDR = data[i];
    12ec:	81 91       	ld	r24, Z+
    12ee:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    12f0:	0d b4       	in	r0, 0x2d	; 45
    12f2:	07 fe       	sbrs	r0, 7
    12f4:	fd cf       	rjmp	.-6      	; 0x12f0 <_Z15SPI_Write_BlockPhh+0x10>
    12f6:	f6 cf       	rjmp	.-20     	; 0x12e4 <_Z15SPI_Write_BlockPhh+0x4>
    }
}
    12f8:	08 95       	ret

000012fa <_Z14SPI_Write_Byteh>:

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    12fa:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    12fc:	0d b4       	in	r0, 0x2d	; 45
    12fe:	07 fe       	sbrs	r0, 7
    1300:	fd cf       	rjmp	.-6      	; 0x12fc <_Z14SPI_Write_Byteh+0x2>
    return SPDR;
    1302:	8e b5       	in	r24, 0x2e	; 46
}
    1304:	08 95       	ret

00001306 <_Z11Roomba_Initv>:
		sensor_packet->light_front_right.bytes.low_byte = uart_get_byte(9);
		sensor_packet->light_right.bytes.high_byte = uart_get_byte(10);
		sensor_packet->light_right.bytes.low_byte = uart_get_byte(11);
		break;
	}
	uart_reset_receive();
    1306:	51 9a       	sbi	0x0a, 1	; 10
    1308:	59 98       	cbi	0x0b, 1	; 11
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	c5 d6       	rcall	.+3466   	; 0x2098 <_Z16Roomba_UART_Init9_uart_bps>
    130e:	80 e8       	ldi	r24, 0x80	; 128
    1310:	bc d6       	rcall	.+3448   	; 0x208a <_Z16Roomba_Send_Byteh>
    1312:	2f ef       	ldi	r18, 0xFF	; 255
    1314:	89 ef       	ldi	r24, 0xF9	; 249
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	21 50       	subi	r18, 0x01	; 1
    131a:	80 40       	sbci	r24, 0x00	; 0
    131c:	90 40       	sbci	r25, 0x00	; 0
    131e:	e1 f7       	brne	.-8      	; 0x1318 <_Z11Roomba_Initv+0x12>
    1320:	00 c0       	rjmp	.+0      	; 0x1322 <_Z11Roomba_Initv+0x1c>
    1322:	00 00       	nop
    1324:	81 e8       	ldi	r24, 0x81	; 129
    1326:	b1 d6       	rcall	.+3426   	; 0x208a <_Z16Roomba_Send_Byteh>
    1328:	87 e0       	ldi	r24, 0x07	; 7
    132a:	af d6       	rcall	.+3422   	; 0x208a <_Z16Roomba_Send_Byteh>
    132c:	2f ef       	ldi	r18, 0xFF	; 255
    132e:	81 ee       	ldi	r24, 0xE1	; 225
    1330:	94 e0       	ldi	r25, 0x04	; 4
    1332:	21 50       	subi	r18, 0x01	; 1
    1334:	80 40       	sbci	r24, 0x00	; 0
    1336:	90 40       	sbci	r25, 0x00	; 0
    1338:	e1 f7       	brne	.-8      	; 0x1332 <_Z11Roomba_Initv+0x2c>
    133a:	00 c0       	rjmp	.+0      	; 0x133c <_Z11Roomba_Initv+0x36>
    133c:	00 00       	nop
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	ab d6       	rcall	.+3414   	; 0x2098 <_Z16Roomba_UART_Init9_uart_bps>
    1342:	80 e8       	ldi	r24, 0x80	; 128
    1344:	a2 d6       	rcall	.+3396   	; 0x208a <_Z16Roomba_Send_Byteh>
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	89 ef       	ldi	r24, 0xF9	; 249
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	21 50       	subi	r18, 0x01	; 1
    134e:	80 40       	sbci	r24, 0x00	; 0
    1350:	90 40       	sbci	r25, 0x00	; 0
    1352:	e1 f7       	brne	.-8      	; 0x134c <_Z11Roomba_Initv+0x46>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <_Z11Roomba_Initv+0x50>
    1356:	00 00       	nop
    1358:	83 e8       	ldi	r24, 0x83	; 131
    135a:	97 d6       	rcall	.+3374   	; 0x208a <_Z16Roomba_Send_Byteh>
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	89 ef       	ldi	r24, 0xF9	; 249
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	80 40       	sbci	r24, 0x00	; 0
    1366:	90 40       	sbci	r25, 0x00	; 0
    1368:	e1 f7       	brne	.-8      	; 0x1362 <_Z11Roomba_Initv+0x5c>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <_Z11Roomba_Initv+0x66>
    136c:	00 00       	nop
    136e:	08 95       	ret

00001370 <_Z12Roomba_Driveii>:
}

//Used to stop the Roomba when it gets shot.
void Roomba_Drive( int16_t velocity, int16_t radius )
{
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	00 d0       	rcall	.+0      	; 0x1378 <_Z12Roomba_Driveii+0x8>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	18 2f       	mov	r17, r24
	Roomba_Send_Byte(DRIVE);
    137e:	89 e8       	ldi	r24, 0x89	; 137
    1380:	6b 83       	std	Y+3, r22	; 0x03
    1382:	7a 83       	std	Y+2, r23	; 0x02
    1384:	99 83       	std	Y+1, r25	; 0x01
    1386:	81 d6       	rcall	.+3330   	; 0x208a <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(HIGH_BYTE(velocity));
    1388:	99 81       	ldd	r25, Y+1	; 0x01
    138a:	89 2f       	mov	r24, r25
    138c:	7e d6       	rcall	.+3324   	; 0x208a <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(LOW_BYTE(velocity));
    138e:	81 2f       	mov	r24, r17
    1390:	7c d6       	rcall	.+3320   	; 0x208a <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(HIGH_BYTE(radius));
    1392:	7a 81       	ldd	r23, Y+2	; 0x02
    1394:	87 2f       	mov	r24, r23
    1396:	79 d6       	rcall	.+3314   	; 0x208a <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(LOW_BYTE(radius));
    1398:	6b 81       	ldd	r22, Y+3	; 0x03
    139a:	86 2f       	mov	r24, r22
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
{
	Roomba_Send_Byte(DRIVE);
	Roomba_Send_Byte(HIGH_BYTE(velocity));
	Roomba_Send_Byte(LOW_BYTE(velocity));
	Roomba_Send_Byte(HIGH_BYTE(radius));
	Roomba_Send_Byte(LOW_BYTE(radius));
    13a8:	70 c6       	rjmp	.+3296   	; 0x208a <_Z16Roomba_Send_Byteh>

000013aa <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh>:
    for(i = 0;i < song->len; ++i){
        song_len += song->notes[i][1];
    }
    // return (song_len*64)/1000;
    return ((song_len*100)/64)*10;
}
    13aa:	fc 01       	movw	r30, r24
    13ac:	51 81       	ldd	r21, Z+1	; 0x01
    13ae:	50 31       	cpi	r21, 0x10	; 16
    13b0:	90 f4       	brcc	.+36     	; 0x13d6 <_Z21Roomba_Music_add_noteP20_roomba_music_song_thh+0x2c>
    13b2:	25 2f       	mov	r18, r21
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	f9 01       	movw	r30, r18
    13b8:	31 96       	adiw	r30, 0x01	; 1
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	e8 0f       	add	r30, r24
    13c0:	f9 1f       	adc	r31, r25
    13c2:	60 83       	st	Z, r22
    13c4:	f9 01       	movw	r30, r18
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	e8 0f       	add	r30, r24
    13cc:	f9 1f       	adc	r31, r25
    13ce:	43 83       	std	Z+3, r20	; 0x03
    13d0:	5f 5f       	subi	r21, 0xFF	; 255
    13d2:	fc 01       	movw	r30, r24
    13d4:	51 83       	std	Z+1, r21	; 0x01
    13d6:	08 95       	ret

000013d8 <_Z22Roomba_Music_load_songP20_roomba_music_song_t>:

/*
*   Load the given roomba song into the roomba.
*/
void Roomba_Music_load_song(roomba_music_song_t* song){
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	ec 01       	movw	r28, r24
    Roomba_Send_Byte(ROOMBA_MUSIC_LOAD_SONG_OPCODE);
    13e4:	8c e8       	ldi	r24, 0x8C	; 140
    13e6:	51 d6       	rcall	.+3234   	; 0x208a <_Z16Roomba_Send_Byteh>
    Roomba_Send_Byte(song->song_num);
    13e8:	88 81       	ld	r24, Y
    13ea:	4f d6       	rcall	.+3230   	; 0x208a <_Z16Roomba_Send_Byteh>
    Roomba_Send_Byte(song->len);
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	4d d6       	rcall	.+3226   	; 0x208a <_Z16Roomba_Send_Byteh>
    int8_t i = 0;
    for(i = 0;i < song->len;++i){
    13f0:	f1 2c       	mov	r15, r1
    13f2:	0f 2d       	mov	r16, r15
    13f4:	11 27       	eor	r17, r17
    13f6:	07 fd       	sbrc	r16, 7
    13f8:	10 95       	com	r17
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	08 17       	cp	r16, r24
    1400:	19 07       	cpc	r17, r25
    1402:	8c f4       	brge	.+34     	; 0x1426 <_Z22Roomba_Music_load_songP20_roomba_music_song_t+0x4e>
        Roomba_Send_Byte(song->notes[i][0]);
    1404:	f8 01       	movw	r30, r16
    1406:	31 96       	adiw	r30, 0x01	; 1
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	ec 0f       	add	r30, r28
    140e:	fd 1f       	adc	r31, r29
    1410:	80 81       	ld	r24, Z
    1412:	3b d6       	rcall	.+3190   	; 0x208a <_Z16Roomba_Send_Byteh>
        Roomba_Send_Byte(song->notes[i][1]);
    1414:	f8 01       	movw	r30, r16
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	ec 0f       	add	r30, r28
    141c:	fd 1f       	adc	r31, r29
    141e:	83 81       	ldd	r24, Z+3	; 0x03
    1420:	34 d6       	rcall	.+3176   	; 0x208a <_Z16Roomba_Send_Byteh>
    1422:	f3 94       	inc	r15
    1424:	e6 cf       	rjmp	.-52     	; 0x13f2 <_Z22Roomba_Music_load_songP20_roomba_music_song_t+0x1a>
    }
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	08 95       	ret

00001432 <_Z22Roomba_Music_play_songh>:

void Roomba_Music_play_song(uint8_t song_num)
{
    1432:	cf 93       	push	r28
    1434:	c8 2f       	mov	r28, r24
    Roomba_Send_Byte(ROOMBA_MUSIC_PLAY_SONG_OPCODE);
    1436:	8d e8       	ldi	r24, 0x8D	; 141
    1438:	28 d6       	rcall	.+3152   	; 0x208a <_Z16Roomba_Send_Byteh>
    Roomba_Send_Byte(song_num);
    143a:	8c 2f       	mov	r24, r28
}
    143c:	cf 91       	pop	r28
}

void Roomba_Music_play_song(uint8_t song_num)
{
    Roomba_Send_Byte(ROOMBA_MUSIC_PLAY_SONG_OPCODE);
    Roomba_Send_Byte(song_num);
    143e:	25 c6       	rjmp	.+3146   	; 0x208a <_Z16Roomba_Send_Byteh>

00001440 <_ZL4idlev>:

uint16_t Now()
{
//    return ticks_from_start * TICK + (TCNT1 + HALF_MS) / (CYCLES_PER_MS)
    return ticks_from_start * TICK + ((TCNT1 - current_timer_val)/(F_CPU/TIMER_PRESCALER/1000));
}
    1440:	ff cf       	rjmp	.-2      	; 0x1440 <_ZL4idlev>

00001442 <_ZL11exit_kernelv>:
    1442:	ff 93       	push	r31
    1444:	fc b7       	in	r31, 0x3c	; 60
    1446:	ff 93       	push	r31
    1448:	ff b7       	in	r31, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	ff 93       	push	r31
    144e:	ef 93       	push	r30
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	bf 93       	push	r27
    1456:	af 93       	push	r26
    1458:	9f 93       	push	r25
    145a:	8f 93       	push	r24
    145c:	7f 93       	push	r23
    145e:	6f 93       	push	r22
    1460:	5f 93       	push	r21
    1462:	4f 93       	push	r20
    1464:	3f 93       	push	r19
    1466:	2f 93       	push	r18
    1468:	1f 93       	push	r17
    146a:	0f 93       	push	r16
    146c:	ff 92       	push	r15
    146e:	ef 92       	push	r14
    1470:	df 92       	push	r13
    1472:	cf 92       	push	r12
    1474:	bf 92       	push	r11
    1476:	af 92       	push	r10
    1478:	9f 92       	push	r9
    147a:	8f 92       	push	r8
    147c:	7f 92       	push	r7
    147e:	6f 92       	push	r6
    1480:	5f 92       	push	r5
    1482:	4f 92       	push	r4
    1484:	3f 92       	push	r3
    1486:	2f 92       	push	r2
    1488:	1f 92       	push	r1
    148a:	0f 92       	push	r0
    148c:	8d b7       	in	r24, 0x3d	; 61
    148e:	9e b7       	in	r25, 0x3e	; 62
    1490:	90 93 f4 0c 	sts	0x0CF4, r25
    1494:	80 93 f3 0c 	sts	0x0CF3, r24
    1498:	e0 91 f9 0c 	lds	r30, 0x0CF9
    149c:	f0 91 fa 0c 	lds	r31, 0x0CFA
    14a0:	f3 95       	inc	r31
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	9e bf       	out	0x3e, r25	; 62
    14a8:	8d bf       	out	0x3d, r24	; 61
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	2f 90       	pop	r2
    14b0:	3f 90       	pop	r3
    14b2:	4f 90       	pop	r4
    14b4:	5f 90       	pop	r5
    14b6:	6f 90       	pop	r6
    14b8:	7f 90       	pop	r7
    14ba:	8f 90       	pop	r8
    14bc:	9f 90       	pop	r9
    14be:	af 90       	pop	r10
    14c0:	bf 90       	pop	r11
    14c2:	cf 90       	pop	r12
    14c4:	df 90       	pop	r13
    14c6:	ef 90       	pop	r14
    14c8:	ff 90       	pop	r15
    14ca:	0f 91       	pop	r16
    14cc:	1f 91       	pop	r17
    14ce:	2f 91       	pop	r18
    14d0:	3f 91       	pop	r19
    14d2:	4f 91       	pop	r20
    14d4:	5f 91       	pop	r21
    14d6:	6f 91       	pop	r22
    14d8:	7f 91       	pop	r23
    14da:	8f 91       	pop	r24
    14dc:	9f 91       	pop	r25
    14de:	af 91       	pop	r26
    14e0:	bf 91       	pop	r27
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	ef 91       	pop	r30
    14e8:	ff 91       	pop	r31
    14ea:	ff bf       	out	0x3f, r31	; 63
    14ec:	ff 91       	pop	r31
    14ee:	fc bf       	out	0x3c, r31	; 60
    14f0:	ff 91       	pop	r31
    14f2:	08 95       	ret

000014f4 <_ZL12enter_kernelv>:
    14f4:	ff 93       	push	r31
    14f6:	fc b7       	in	r31, 0x3c	; 60
    14f8:	ff 93       	push	r31
    14fa:	ff b7       	in	r31, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	ff 93       	push	r31
    1500:	ef 93       	push	r30
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	bf 93       	push	r27
    1508:	af 93       	push	r26
    150a:	9f 93       	push	r25
    150c:	8f 93       	push	r24
    150e:	7f 93       	push	r23
    1510:	6f 93       	push	r22
    1512:	5f 93       	push	r21
    1514:	4f 93       	push	r20
    1516:	3f 93       	push	r19
    1518:	2f 93       	push	r18
    151a:	1f 93       	push	r17
    151c:	0f 93       	push	r16
    151e:	ff 92       	push	r15
    1520:	ef 92       	push	r14
    1522:	df 92       	push	r13
    1524:	cf 92       	push	r12
    1526:	bf 92       	push	r11
    1528:	af 92       	push	r10
    152a:	9f 92       	push	r9
    152c:	8f 92       	push	r8
    152e:	7f 92       	push	r7
    1530:	6f 92       	push	r6
    1532:	5f 92       	push	r5
    1534:	4f 92       	push	r4
    1536:	3f 92       	push	r3
    1538:	2f 92       	push	r2
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	e0 91 f9 0c 	lds	r30, 0x0CF9
    1542:	f0 91 fa 0c 	lds	r31, 0x0CFA
    1546:	8d b7       	in	r24, 0x3d	; 61
    1548:	9e b7       	in	r25, 0x3e	; 62
    154a:	f3 95       	inc	r31
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	80 83       	st	Z, r24
    1550:	80 91 f3 0c 	lds	r24, 0x0CF3
    1554:	90 91 f4 0c 	lds	r25, 0x0CF4
    1558:	9e bf       	out	0x3e, r25	; 62
    155a:	8d bf       	out	0x3d, r24	; 61
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	2f 90       	pop	r2
    1562:	3f 90       	pop	r3
    1564:	4f 90       	pop	r4
    1566:	5f 90       	pop	r5
    1568:	6f 90       	pop	r6
    156a:	7f 90       	pop	r7
    156c:	8f 90       	pop	r8
    156e:	9f 90       	pop	r9
    1570:	af 90       	pop	r10
    1572:	bf 90       	pop	r11
    1574:	cf 90       	pop	r12
    1576:	df 90       	pop	r13
    1578:	ef 90       	pop	r14
    157a:	ff 90       	pop	r15
    157c:	0f 91       	pop	r16
    157e:	1f 91       	pop	r17
    1580:	2f 91       	pop	r18
    1582:	3f 91       	pop	r19
    1584:	4f 91       	pop	r20
    1586:	5f 91       	pop	r21
    1588:	6f 91       	pop	r22
    158a:	7f 91       	pop	r23
    158c:	8f 91       	pop	r24
    158e:	9f 91       	pop	r25
    1590:	af 91       	pop	r26
    1592:	bf 91       	pop	r27
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	ef 91       	pop	r30
    159a:	ff 91       	pop	r31
    159c:	ff bf       	out	0x3f, r31	; 63
    159e:	ff 91       	pop	r31
    15a0:	fc bf       	out	0x3c, r31	; 60
    15a2:	ff 91       	pop	r31
    15a4:	08 95       	ret

000015a6 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>:
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	dc 01       	movw	r26, r24
    15b0:	fb 01       	movw	r30, r22
    15b2:	cd 91       	ld	r28, X+
    15b4:	dc 91       	ld	r29, X
    15b6:	11 97       	sbiw	r26, 0x01	; 1
    15b8:	20 97       	sbiw	r28, 0x00	; 0
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x1e>
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	7c 93       	st	X, r23
    15c0:	6e 93       	st	-X, r22
    15c2:	31 c0       	rjmp	.+98     	; 0x1626 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x80>
    15c4:	46 81       	ldd	r20, Z+6	; 0x06
    15c6:	57 81       	ldd	r21, Z+7	; 0x07
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	20 91 dc 02 	lds	r18, 0x02DC
    15d0:	30 91 dd 02 	lds	r19, 0x02DD
    15d4:	00 91 dc 02 	lds	r16, 0x02DC
    15d8:	10 91 dd 02 	lds	r17, 0x02DD
    15dc:	ba 01       	movw	r22, r20
    15de:	62 1b       	sub	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	2e 81       	ldd	r18, Y+6	; 0x06
    15e4:	3f 81       	ldd	r19, Y+7	; 0x07
    15e6:	20 1b       	sub	r18, r16
    15e8:	31 0b       	sbc	r19, r17
    15ea:	62 17       	cp	r22, r18
    15ec:	73 07       	cpc	r23, r19
    15ee:	68 f4       	brcc	.+26     	; 0x160a <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x64>
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	31 f0       	breq	.+12     	; 0x1600 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x5a>
    15f4:	dc 01       	movw	r26, r24
    15f6:	19 96       	adiw	r26, 0x09	; 9
    15f8:	fc 93       	st	X, r31
    15fa:	ee 93       	st	-X, r30
    15fc:	18 97       	sbiw	r26, 0x08	; 8
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x5e>
    1600:	ed 93       	st	X+, r30
    1602:	fc 93       	st	X, r31
    1604:	d1 87       	std	Z+9, r29	; 0x09
    1606:	c0 87       	std	Z+8, r28	; 0x08
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x8c>
    160a:	28 85       	ldd	r18, Y+8	; 0x08
    160c:	39 85       	ldd	r19, Y+9	; 0x09
    160e:	21 15       	cp	r18, r1
    1610:	31 05       	cpc	r19, r1
    1612:	19 f0       	breq	.+6      	; 0x161a <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x74>
    1614:	ce 01       	movw	r24, r28
    1616:	e9 01       	movw	r28, r18
    1618:	d9 cf       	rjmp	.-78     	; 0x15cc <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct+0x26>
    161a:	12 96       	adiw	r26, 0x02	; 2
    161c:	cd 91       	ld	r28, X+
    161e:	dc 91       	ld	r29, X
    1620:	13 97       	sbiw	r26, 0x03	; 3
    1622:	f9 87       	std	Y+9, r31	; 0x09
    1624:	e8 87       	std	Y+8, r30	; 0x08
    1626:	13 96       	adiw	r26, 0x03	; 3
    1628:	fc 93       	st	X, r31
    162a:	ee 93       	st	-X, r30
    162c:	12 97       	sbiw	r26, 0x02	; 2
    162e:	11 86       	std	Z+9, r1	; 0x09
    1630:	10 86       	std	Z+8, r1	; 0x08
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	08 95       	ret

0000163c <_ZL7enqueueP12task_queue_tP9td_struct>:
    163c:	fc 01       	movw	r30, r24
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	89 2b       	or	r24, r25
    1644:	19 f4       	brne	.+6      	; 0x164c <_ZL7enqueueP12task_queue_tP9td_struct+0x10>
    1646:	71 83       	std	Z+1, r23	; 0x01
    1648:	60 83       	st	Z, r22
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <_ZL7enqueueP12task_queue_tP9td_struct+0x1c>
    164c:	a2 81       	ldd	r26, Z+2	; 0x02
    164e:	b3 81       	ldd	r27, Z+3	; 0x03
    1650:	a6 5f       	subi	r26, 0xF6	; 246
    1652:	be 4f       	sbci	r27, 0xFE	; 254
    1654:	6d 93       	st	X+, r22
    1656:	7c 93       	st	X, r23
    1658:	73 83       	std	Z+3, r23	; 0x03
    165a:	62 83       	std	Z+2, r22	; 0x02
    165c:	08 95       	ret

0000165e <_ZL7dequeueP12task_queue_t>:
    165e:	fc 01       	movw	r30, r24
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	89 f0       	breq	.+34     	; 0x168a <_ZL7dequeueP12task_queue_t+0x2c>
    1668:	22 81       	ldd	r18, Z+2	; 0x02
    166a:	33 81       	ldd	r19, Z+3	; 0x03
    166c:	82 17       	cp	r24, r18
    166e:	93 07       	cpc	r25, r19
    1670:	29 f4       	brne	.+10     	; 0x167c <_ZL7dequeueP12task_queue_t+0x1e>
    1672:	13 82       	std	Z+3, r1	; 0x03
    1674:	12 82       	std	Z+2, r1	; 0x02
    1676:	11 82       	std	Z+1, r1	; 0x01
    1678:	10 82       	st	Z, r1
    167a:	08 95       	ret
    167c:	dc 01       	movw	r26, r24
    167e:	a6 5f       	subi	r26, 0xF6	; 246
    1680:	be 4f       	sbci	r27, 0xFE	; 254
    1682:	2d 91       	ld	r18, X+
    1684:	3c 91       	ld	r19, X
    1686:	31 83       	std	Z+1, r19	; 0x01
    1688:	20 83       	st	Z, r18
    168a:	08 95       	ret

0000168c <Task_Terminate>:
    168c:	cf 93       	push	r28
    168e:	cf b7       	in	r28, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	80 93 5e 03 	sts	0x035E, r24
    1698:	2d df       	rcall	.-422    	; 0x14f4 <_ZL12enter_kernelv>
    169a:	cf bf       	out	0x3f, r28	; 63
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <_ZL18kernel_create_taskv>:
    16a0:	80 91 3f 03 	lds	r24, 0x033F
    16a4:	90 91 40 03 	lds	r25, 0x0340
    16a8:	89 2b       	or	r24, r25
    16aa:	69 f0       	breq	.+26     	; 0x16c6 <_ZL18kernel_create_taskv+0x26>
    16ac:	80 91 5d 03 	lds	r24, 0x035D
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	61 f4       	brne	.+24     	; 0x16cc <_ZL18kernel_create_taskv+0x2c>
    16b4:	80 91 3b 03 	lds	r24, 0x033B
    16b8:	90 91 3c 03 	lds	r25, 0x033C
    16bc:	89 2b       	or	r24, r25
    16be:	31 f4       	brne	.+12     	; 0x16cc <_ZL18kernel_create_taskv+0x2c>
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	08 95       	ret
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	80 91 5d 03 	lds	r24, 0x035D
    16d0:	8f 3f       	cpi	r24, 0xFF	; 255
    16d2:	29 f0       	breq	.+10     	; 0x16de <_ZL18kernel_create_taskv+0x3e>
    16d4:	8f e3       	ldi	r24, 0x3F	; 63
    16d6:	93 e0       	ldi	r25, 0x03	; 3
    16d8:	c2 df       	rcall	.-124    	; 0x165e <_ZL7dequeueP12task_queue_t>
    16da:	bc 01       	movw	r22, r24
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <_ZL18kernel_create_taskv+0x42>
    16de:	67 ee       	ldi	r22, 0xE7	; 231
    16e0:	7b e0       	ldi	r23, 0x0B	; 11
    16e2:	fb 01       	movw	r30, r22
    16e4:	e7 52       	subi	r30, 0x27	; 39
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	10 82       	st	Z, r1
    16ea:	80 e8       	ldi	r24, 0x80	; 128
    16ec:	7e 96       	adiw	r30, 0x1e	; 30
    16ee:	80 83       	st	Z, r24
    16f0:	33 96       	adiw	r30, 0x03	; 3
    16f2:	10 82       	st	Z, r1
    16f4:	80 91 59 03 	lds	r24, 0x0359
    16f8:	90 91 5a 03 	lds	r25, 0x035A
    16fc:	31 96       	adiw	r30, 0x01	; 1
    16fe:	90 83       	st	Z, r25
    1700:	80 91 59 03 	lds	r24, 0x0359
    1704:	90 91 5a 03 	lds	r25, 0x035A
    1708:	31 96       	adiw	r30, 0x01	; 1
    170a:	80 83       	st	Z, r24
    170c:	31 96       	adiw	r30, 0x01	; 1
    170e:	10 82       	st	Z, r1
    1710:	86 e4       	ldi	r24, 0x46	; 70
    1712:	9b e0       	ldi	r25, 0x0B	; 11
    1714:	31 96       	adiw	r30, 0x01	; 1
    1716:	90 83       	st	Z, r25
    1718:	31 96       	adiw	r30, 0x01	; 1
    171a:	80 83       	st	Z, r24
    171c:	31 96       	adiw	r30, 0x01	; 1
    171e:	cb 01       	movw	r24, r22
    1720:	89 52       	subi	r24, 0x29	; 41
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	35 96       	adiw	r30, 0x05	; 5
    172c:	80 83       	st	Z, r24
    172e:	80 91 5b 03 	lds	r24, 0x035B
    1732:	90 91 5c 03 	lds	r25, 0x035C
    1736:	31 96       	adiw	r30, 0x01	; 1
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	80 83       	st	Z, r24
    173c:	80 91 5d 03 	lds	r24, 0x035D
    1740:	34 97       	sbiw	r30, 0x04	; 4
    1742:	80 83       	st	Z, r24
    1744:	80 91 5d 03 	lds	r24, 0x035D
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	41 f0       	breq	.+16     	; 0x175c <_ZL18kernel_create_taskv+0xbc>
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	09 f4       	brne	.+2      	; 0x1752 <_ZL18kernel_create_taskv+0xb2>
    1750:	3f c0       	rjmp	.+126    	; 0x17d0 <_ZL18kernel_create_taskv+0x130>
    1752:	81 11       	cpse	r24, r1
    1754:	40 c0       	rjmp	.+128    	; 0x17d6 <_ZL18kernel_create_taskv+0x136>
    1756:	8f e2       	ldi	r24, 0x2F	; 47
    1758:	93 e0       	ldi	r25, 0x03	; 3
    175a:	3c c0       	rjmp	.+120    	; 0x17d4 <_ZL18kernel_create_taskv+0x134>
    175c:	e0 91 3b 03 	lds	r30, 0x033B
    1760:	f0 91 3c 03 	lds	r31, 0x033C
    1764:	30 97       	sbiw	r30, 0x00	; 0
    1766:	b1 f0       	breq	.+44     	; 0x1794 <_ZL18kernel_create_taskv+0xf4>
    1768:	80 91 3d 03 	lds	r24, 0x033D
    176c:	90 91 3e 03 	lds	r25, 0x033E
    1770:	e8 17       	cp	r30, r24
    1772:	f9 07       	cpc	r31, r25
    1774:	49 f4       	brne	.+18     	; 0x1788 <_ZL18kernel_create_taskv+0xe8>
    1776:	10 92 3e 03 	sts	0x033E, r1
    177a:	10 92 3d 03 	sts	0x033D, r1
    177e:	10 92 3c 03 	sts	0x033C, r1
    1782:	10 92 3b 03 	sts	0x033B, r1
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <_ZL18kernel_create_taskv+0xf4>
    1788:	80 85       	ldd	r24, Z+8	; 0x08
    178a:	91 85       	ldd	r25, Z+9	; 0x09
    178c:	90 93 3c 03 	sts	0x033C, r25
    1790:	80 93 3b 03 	sts	0x033B, r24
    1794:	80 91 55 03 	lds	r24, 0x0355
    1798:	90 91 56 03 	lds	r25, 0x0356
    179c:	97 83       	std	Z+7, r25	; 0x07
    179e:	86 83       	std	Z+6, r24	; 0x06
    17a0:	80 91 51 03 	lds	r24, 0x0351
    17a4:	90 91 52 03 	lds	r25, 0x0352
    17a8:	93 83       	std	Z+3, r25	; 0x03
    17aa:	82 83       	std	Z+2, r24	; 0x02
    17ac:	80 91 53 03 	lds	r24, 0x0353
    17b0:	90 91 54 03 	lds	r25, 0x0354
    17b4:	95 83       	std	Z+5, r25	; 0x05
    17b6:	84 83       	std	Z+4, r24	; 0x04
    17b8:	71 83       	std	Z+1, r23	; 0x01
    17ba:	60 83       	st	Z, r22
    17bc:	db 01       	movw	r26, r22
    17be:	ad 5f       	subi	r26, 0xFD	; 253
    17c0:	be 4f       	sbci	r27, 0xFE	; 254
    17c2:	ed 93       	st	X+, r30
    17c4:	fc 93       	st	X, r31
    17c6:	bf 01       	movw	r22, r30
    17c8:	83 e3       	ldi	r24, 0x33	; 51
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	ec de       	rcall	.-552    	; 0x15a6 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <_ZL18kernel_create_taskv+0x136>
    17d0:	87 e3       	ldi	r24, 0x37	; 55
    17d2:	93 e0       	ldi	r25, 0x03	; 3
    17d4:	33 df       	rcall	.-410    	; 0x163c <_ZL7enqueueP12task_queue_tP9td_struct>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	08 95       	ret

000017dc <__vector_17>:
    17dc:	ff 93       	push	r31
    17de:	fc b7       	in	r31, 0x3c	; 60
    17e0:	ff 93       	push	r31
    17e2:	ff b7       	in	r31, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	f0 68       	ori	r31, 0x80	; 128
    17e8:	ff 93       	push	r31
    17ea:	ef 93       	push	r30
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	bf 93       	push	r27
    17f2:	af 93       	push	r26
    17f4:	9f 93       	push	r25
    17f6:	8f 93       	push	r24
    17f8:	7f 93       	push	r23
    17fa:	6f 93       	push	r22
    17fc:	5f 93       	push	r21
    17fe:	4f 93       	push	r20
    1800:	3f 93       	push	r19
    1802:	2f 93       	push	r18
    1804:	1f 93       	push	r17
    1806:	0f 93       	push	r16
    1808:	ff 92       	push	r15
    180a:	ef 92       	push	r14
    180c:	df 92       	push	r13
    180e:	cf 92       	push	r12
    1810:	bf 92       	push	r11
    1812:	af 92       	push	r10
    1814:	9f 92       	push	r9
    1816:	8f 92       	push	r8
    1818:	7f 92       	push	r7
    181a:	6f 92       	push	r6
    181c:	5f 92       	push	r5
    181e:	4f 92       	push	r4
    1820:	3f 92       	push	r3
    1822:	2f 92       	push	r2
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	e0 91 f9 0c 	lds	r30, 0x0CF9
    182c:	f0 91 fa 0c 	lds	r31, 0x0CFA
    1830:	8d b7       	in	r24, 0x3d	; 61
    1832:	9e b7       	in	r25, 0x3e	; 62
    1834:	f3 95       	inc	r31
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	80 91 f3 0c 	lds	r24, 0x0CF3
    183e:	90 91 f4 0c 	lds	r25, 0x0CF4
    1842:	9e bf       	out	0x3e, r25	; 62
    1844:	8d bf       	out	0x3d, r24	; 61
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 5e 03 	sts	0x035E, r24
    184c:	e8 e8       	ldi	r30, 0x88	; 136
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	80 5f       	subi	r24, 0xF0	; 240
    1856:	98 4d       	sbci	r25, 0xD8	; 216
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	80 91 f3 0c 	lds	r24, 0x0CF3
    1860:	90 91 f4 0c 	lds	r25, 0x0CF4
    1864:	9e bf       	out	0x3e, r25	; 62
    1866:	8d bf       	out	0x3d, r24	; 61
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	2f 90       	pop	r2
    186e:	3f 90       	pop	r3
    1870:	4f 90       	pop	r4
    1872:	5f 90       	pop	r5
    1874:	6f 90       	pop	r6
    1876:	7f 90       	pop	r7
    1878:	8f 90       	pop	r8
    187a:	9f 90       	pop	r9
    187c:	af 90       	pop	r10
    187e:	bf 90       	pop	r11
    1880:	cf 90       	pop	r12
    1882:	df 90       	pop	r13
    1884:	ef 90       	pop	r14
    1886:	ff 90       	pop	r15
    1888:	0f 91       	pop	r16
    188a:	1f 91       	pop	r17
    188c:	2f 91       	pop	r18
    188e:	3f 91       	pop	r19
    1890:	4f 91       	pop	r20
    1892:	5f 91       	pop	r21
    1894:	6f 91       	pop	r22
    1896:	7f 91       	pop	r23
    1898:	8f 91       	pop	r24
    189a:	9f 91       	pop	r25
    189c:	af 91       	pop	r26
    189e:	bf 91       	pop	r27
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	ef 91       	pop	r30
    18a6:	ff 91       	pop	r31
    18a8:	ff bf       	out	0x3f, r31	; 63
    18aa:	ff 91       	pop	r31
    18ac:	fc bf       	out	0x3c, r31	; 60
    18ae:	ff 91       	pop	r31
    18b0:	08 95       	ret

000018b2 <_Z11kernel_initv>:
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	80 91 81 00 	lds	r24, 0x0081
    18ba:	82 60       	ori	r24, 0x02	; 2
    18bc:	80 93 81 00 	sts	0x0081, r24
    18c0:	ec e8       	ldi	r30, 0x8C	; 140
    18c2:	f4 e0       	ldi	r31, 0x04	; 4
    18c4:	10 82       	st	Z, r1
    18c6:	cf 01       	movw	r24, r30
    18c8:	07 96       	adiw	r24, 0x07	; 7
    18ca:	96 83       	std	Z+6, r25	; 0x06
    18cc:	85 83       	std	Z+5, r24	; 0x05
    18ce:	df 01       	movw	r26, r30
    18d0:	12 97       	sbiw	r26, 0x02	; 2
    18d2:	1d 92       	st	X+, r1
    18d4:	1c 92       	st	X, r1
    18d6:	e4 5f       	subi	r30, 0xF4	; 244
    18d8:	fe 4f       	sbci	r31, 0xFE	; 254
    18da:	2c e0       	ldi	r18, 0x0C	; 12
    18dc:	ec 3e       	cpi	r30, 0xEC	; 236
    18de:	f2 07       	cpc	r31, r18
    18e0:	89 f7       	brne	.-30     	; 0x18c4 <_Z11kernel_initv+0x12>
    18e2:	10 92 f2 0c 	sts	0x0CF2, r1
    18e6:	10 92 f1 0c 	sts	0x0CF1, r1
    18ea:	10 92 e6 0b 	sts	0x0BE6, r1
    18ee:	10 92 e5 0b 	sts	0x0BE5, r1
    18f2:	10 92 ec 0c 	sts	0x0CEC, r1
    18f6:	10 92 eb 0c 	sts	0x0CEB, r1
    18fa:	10 92 ea 0c 	sts	0x0CEA, r1
    18fe:	ef e5       	ldi	r30, 0x5F	; 95
    1900:	f3 e0       	ldi	r31, 0x03	; 3
    1902:	17 82       	std	Z+7, r1	; 0x07
    1904:	16 82       	std	Z+6, r1	; 0x06
    1906:	15 82       	std	Z+5, r1	; 0x05
    1908:	14 82       	std	Z+4, r1	; 0x04
    190a:	13 82       	std	Z+3, r1	; 0x03
    190c:	12 82       	std	Z+2, r1	; 0x02
    190e:	11 82       	std	Z+1, r1	; 0x01
    1910:	10 82       	st	Z, r1
    1912:	cf 01       	movw	r24, r30
    1914:	0a 96       	adiw	r24, 0x0a	; 10
    1916:	91 87       	std	Z+9, r25	; 0x09
    1918:	80 87       	std	Z+8, r24	; 0x08
    191a:	23 e0       	ldi	r18, 0x03	; 3
    191c:	8d 37       	cpi	r24, 0x7D	; 125
    191e:	92 07       	cpc	r25, r18
    1920:	11 f0       	breq	.+4      	; 0x1926 <_Z11kernel_initv+0x74>
    1922:	fc 01       	movw	r30, r24
    1924:	ee cf       	rjmp	.-36     	; 0x1902 <_Z11kernel_initv+0x50>
    1926:	10 92 7e 03 	sts	0x037E, r1
    192a:	10 92 7d 03 	sts	0x037D, r1
    192e:	10 92 86 03 	sts	0x0386, r1
    1932:	10 92 85 03 	sts	0x0385, r1
    1936:	10 92 84 03 	sts	0x0384, r1
    193a:	10 92 83 03 	sts	0x0383, r1
    193e:	10 92 82 03 	sts	0x0382, r1
    1942:	10 92 81 03 	sts	0x0381, r1
    1946:	10 92 80 03 	sts	0x0380, r1
    194a:	10 92 7f 03 	sts	0x037F, r1
    194e:	c7 e8       	ldi	r28, 0x87	; 135
    1950:	d3 e0       	ldi	r29, 0x03	; 3
    1952:	d0 93 40 03 	sts	0x0340, r29
    1956:	c0 93 3f 03 	sts	0x033F, r28
    195a:	2b ed       	ldi	r18, 0xDB	; 219
    195c:	3a e0       	ldi	r19, 0x0A	; 10
    195e:	30 93 42 03 	sts	0x0342, r19
    1962:	20 93 41 03 	sts	0x0341, r18
    1966:	2f e5       	ldi	r18, 0x5F	; 95
    1968:	33 e0       	ldi	r19, 0x03	; 3
    196a:	30 93 3c 03 	sts	0x033C, r19
    196e:	20 93 3b 03 	sts	0x033B, r18
    1972:	90 93 3e 03 	sts	0x033E, r25
    1976:	80 93 3d 03 	sts	0x033D, r24
    197a:	10 92 34 03 	sts	0x0334, r1
    197e:	10 92 33 03 	sts	0x0333, r1
    1982:	10 92 36 03 	sts	0x0336, r1
    1986:	10 92 35 03 	sts	0x0335, r1
    198a:	10 92 38 03 	sts	0x0338, r1
    198e:	10 92 37 03 	sts	0x0337, r1
    1992:	10 92 3a 03 	sts	0x033A, r1
    1996:	10 92 39 03 	sts	0x0339, r1
    199a:	10 92 30 03 	sts	0x0330, r1
    199e:	10 92 2f 03 	sts	0x032F, r1
    19a2:	10 92 32 03 	sts	0x0332, r1
    19a6:	10 92 31 03 	sts	0x0331, r1
    19aa:	80 e2       	ldi	r24, 0x20	; 32
    19ac:	9a e0       	ldi	r25, 0x0A	; 10
    19ae:	90 93 5a 03 	sts	0x035A, r25
    19b2:	80 93 59 03 	sts	0x0359, r24
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	80 93 5d 03 	sts	0x035D, r24
    19bc:	10 92 5c 03 	sts	0x035C, r1
    19c0:	10 92 5b 03 	sts	0x035B, r1
    19c4:	6d de       	rcall	.-806    	; 0x16a0 <_ZL18kernel_create_taskv>
    19c6:	8a ee       	ldi	r24, 0xEA	; 234
    19c8:	94 e0       	ldi	r25, 0x04	; 4
    19ca:	90 93 5a 03 	sts	0x035A, r25
    19ce:	80 93 59 03 	sts	0x0359, r24
    19d2:	10 92 5d 03 	sts	0x035D, r1
    19d6:	10 92 5c 03 	sts	0x035C, r1
    19da:	10 92 5b 03 	sts	0x035B, r1
    19de:	60 de       	rcall	.-832    	; 0x16a0 <_ZL18kernel_create_taskv>
    19e0:	d0 93 fa 0c 	sts	0x0CFA, r29
    19e4:	c0 93 f9 0c 	sts	0x0CF9, r28
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 8c 04 	sts	0x048C, r24
    19ee:	8f e2       	ldi	r24, 0x2F	; 47
    19f0:	93 e0       	ldi	r25, 0x03	; 3
    19f2:	35 de       	rcall	.-918    	; 0x165e <_ZL7dequeueP12task_queue_t>
    19f4:	80 91 6f 00 	lds	r24, 0x006F
    19f8:	82 60       	ori	r24, 0x02	; 2
    19fa:	80 93 6f 00 	sts	0x006F, r24
    19fe:	80 91 84 00 	lds	r24, 0x0084
    1a02:	90 91 85 00 	lds	r25, 0x0085
    1a06:	80 5f       	subi	r24, 0xF0	; 240
    1a08:	98 4d       	sbci	r25, 0xD8	; 216
    1a0a:	90 93 89 00 	sts	0x0089, r25
    1a0e:	80 93 88 00 	sts	0x0088, r24
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	86 bb       	out	0x16, r24	; 22
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <OS_Abort>:
    1a1c:	f8 94       	cli
    1a1e:	80 e8       	ldi	r24, 0x80	; 128
    1a20:	84 b9       	out	0x04, r24	; 4
    1a22:	80 91 3c 02 	lds	r24, 0x023C
    1a26:	81 11       	cpse	r24, r1
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <OS_Abort+0x16>
    1a2a:	80 91 3c 02 	lds	r24, 0x023C
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <OS_Abort+0x1c>
    1a32:	80 91 3c 02 	lds	r24, 0x023C
    1a36:	81 50       	subi	r24, 0x01	; 1
    1a38:	30 e8       	ldi	r19, 0x80	; 128
    1a3a:	35 b9       	out	0x05, r19	; 5
    1a3c:	94 e6       	ldi	r25, 0x64	; 100
    1a3e:	2f e7       	ldi	r18, 0x7F	; 127
    1a40:	48 e3       	ldi	r20, 0x38	; 56
    1a42:	51 e0       	ldi	r21, 0x01	; 1
    1a44:	21 50       	subi	r18, 0x01	; 1
    1a46:	40 40       	sbci	r20, 0x00	; 0
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	e1 f7       	brne	.-8      	; 0x1a44 <OS_Abort+0x28>
    1a4c:	00 c0       	rjmp	.+0      	; 0x1a4e <OS_Abort+0x32>
    1a4e:	00 00       	nop
    1a50:	91 50       	subi	r25, 0x01	; 1
    1a52:	a9 f7       	brne	.-22     	; 0x1a3e <OS_Abort+0x22>
    1a54:	15 b8       	out	0x05, r1	; 5
    1a56:	98 e2       	ldi	r25, 0x28	; 40
    1a58:	6f e7       	ldi	r22, 0x7F	; 127
    1a5a:	28 e3       	ldi	r18, 0x38	; 56
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	61 50       	subi	r22, 0x01	; 1
    1a60:	20 40       	sbci	r18, 0x00	; 0
    1a62:	40 40       	sbci	r20, 0x00	; 0
    1a64:	e1 f7       	brne	.-8      	; 0x1a5e <OS_Abort+0x42>
    1a66:	00 c0       	rjmp	.+0      	; 0x1a68 <OS_Abort+0x4c>
    1a68:	00 00       	nop
    1a6a:	91 50       	subi	r25, 0x01	; 1
    1a6c:	a9 f7       	brne	.-22     	; 0x1a58 <OS_Abort+0x3c>
    1a6e:	98 17       	cp	r25, r24
    1a70:	e1 f0       	breq	.+56     	; 0x1aaa <OS_Abort+0x8e>
    1a72:	35 b9       	out	0x05, r19	; 5
    1a74:	2a e0       	ldi	r18, 0x0A	; 10
    1a76:	5f e7       	ldi	r21, 0x7F	; 127
    1a78:	68 e3       	ldi	r22, 0x38	; 56
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	51 50       	subi	r21, 0x01	; 1
    1a7e:	60 40       	sbci	r22, 0x00	; 0
    1a80:	40 40       	sbci	r20, 0x00	; 0
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <OS_Abort+0x60>
    1a84:	00 c0       	rjmp	.+0      	; 0x1a86 <OS_Abort+0x6a>
    1a86:	00 00       	nop
    1a88:	21 50       	subi	r18, 0x01	; 1
    1a8a:	a9 f7       	brne	.-22     	; 0x1a76 <OS_Abort+0x5a>
    1a8c:	15 b8       	out	0x05, r1	; 5
    1a8e:	2a e0       	ldi	r18, 0x0A	; 10
    1a90:	5f e7       	ldi	r21, 0x7F	; 127
    1a92:	68 e3       	ldi	r22, 0x38	; 56
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	51 50       	subi	r21, 0x01	; 1
    1a98:	60 40       	sbci	r22, 0x00	; 0
    1a9a:	40 40       	sbci	r20, 0x00	; 0
    1a9c:	e1 f7       	brne	.-8      	; 0x1a96 <OS_Abort+0x7a>
    1a9e:	00 c0       	rjmp	.+0      	; 0x1aa0 <OS_Abort+0x84>
    1aa0:	00 00       	nop
    1aa2:	21 50       	subi	r18, 0x01	; 1
    1aa4:	a9 f7       	brne	.-22     	; 0x1a90 <OS_Abort+0x74>
    1aa6:	9f 5f       	subi	r25, 0xFF	; 255
    1aa8:	e2 cf       	rjmp	.-60     	; 0x1a6e <OS_Abort+0x52>
    1aaa:	94 e1       	ldi	r25, 0x14	; 20
    1aac:	5f e7       	ldi	r21, 0x7F	; 127
    1aae:	68 e3       	ldi	r22, 0x38	; 56
    1ab0:	21 e0       	ldi	r18, 0x01	; 1
    1ab2:	51 50       	subi	r21, 0x01	; 1
    1ab4:	60 40       	sbci	r22, 0x00	; 0
    1ab6:	20 40       	sbci	r18, 0x00	; 0
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <OS_Abort+0x96>
    1aba:	00 c0       	rjmp	.+0      	; 0x1abc <OS_Abort+0xa0>
    1abc:	00 00       	nop
    1abe:	91 50       	subi	r25, 0x01	; 1
    1ac0:	a9 f7       	brne	.-22     	; 0x1aac <OS_Abort+0x90>
    1ac2:	bb cf       	rjmp	.-138    	; 0x1a3a <OS_Abort+0x1e>

00001ac4 <_Z19periodic_task_readyv>:
    1ac4:	e0 91 33 03 	lds	r30, 0x0333
    1ac8:	f0 91 34 03 	lds	r31, 0x0334
    1acc:	30 97       	sbiw	r30, 0x00	; 0
    1ace:	e9 f0       	breq	.+58     	; 0x1b0a <_Z19periodic_task_readyv+0x46>
    1ad0:	80 91 35 03 	lds	r24, 0x0335
    1ad4:	90 91 36 03 	lds	r25, 0x0336
    1ad8:	26 81       	ldd	r18, Z+6	; 0x06
    1ada:	37 81       	ldd	r19, Z+7	; 0x07
    1adc:	e8 17       	cp	r30, r24
    1ade:	f9 07       	cpc	r31, r25
    1ae0:	61 f0       	breq	.+24     	; 0x1afa <_Z19periodic_task_readyv+0x36>
    1ae2:	00 84       	ldd	r0, Z+8	; 0x08
    1ae4:	f1 85       	ldd	r31, Z+9	; 0x09
    1ae6:	e0 2d       	mov	r30, r0
    1ae8:	86 81       	ldd	r24, Z+6	; 0x06
    1aea:	97 81       	ldd	r25, Z+7	; 0x07
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	21 f4       	brne	.+8      	; 0x1afa <_Z19periodic_task_readyv+0x36>
    1af2:	86 e0       	ldi	r24, 0x06	; 6
    1af4:	80 93 3c 02 	sts	0x023C, r24
    1af8:	91 df       	rcall	.-222    	; 0x1a1c <OS_Abort>
    1afa:	40 91 dc 02 	lds	r20, 0x02DC
    1afe:	50 91 dd 02 	lds	r21, 0x02DD
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	24 17       	cp	r18, r20
    1b06:	35 07       	cpc	r19, r21
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <_Z19periodic_task_readyv+0x48>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	08 95       	ret

00001b10 <_ZL21kernel_should_preemptv>:
    1b10:	80 91 4d 03 	lds	r24, 0x034D
    1b14:	90 91 4e 03 	lds	r25, 0x034E
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	69 f1       	breq	.+90     	; 0x1b76 <_ZL21kernel_should_preemptv+0x66>
    1b1c:	80 91 2f 03 	lds	r24, 0x032F
    1b20:	90 91 30 03 	lds	r25, 0x0330
    1b24:	89 2b       	or	r24, r25
    1b26:	49 f0       	breq	.+18     	; 0x1b3a <_ZL21kernel_should_preemptv+0x2a>
    1b28:	e0 91 f9 0c 	lds	r30, 0x0CF9
    1b2c:	f0 91 fa 0c 	lds	r31, 0x0CFA
    1b30:	ee 5f       	subi	r30, 0xFE	; 254
    1b32:	fe 4f       	sbci	r31, 0xFE	; 254
    1b34:	80 81       	ld	r24, Z
    1b36:	81 11       	cpse	r24, r1
    1b38:	1b c0       	rjmp	.+54     	; 0x1b70 <_ZL21kernel_should_preemptv+0x60>
    1b3a:	c4 df       	rcall	.-120    	; 0x1ac4 <_Z19periodic_task_readyv>
    1b3c:	89 2b       	or	r24, r25
    1b3e:	49 f0       	breq	.+18     	; 0x1b52 <_ZL21kernel_should_preemptv+0x42>
    1b40:	e0 91 f9 0c 	lds	r30, 0x0CF9
    1b44:	f0 91 fa 0c 	lds	r31, 0x0CFA
    1b48:	ee 5f       	subi	r30, 0xFE	; 254
    1b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4c:	80 81       	ld	r24, Z
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	7c f4       	brge	.+30     	; 0x1b70 <_ZL21kernel_should_preemptv+0x60>
    1b52:	80 91 37 03 	lds	r24, 0x0337
    1b56:	90 91 38 03 	lds	r25, 0x0338
    1b5a:	89 2b       	or	r24, r25
    1b5c:	61 f0       	breq	.+24     	; 0x1b76 <_ZL21kernel_should_preemptv+0x66>
    1b5e:	e0 91 f9 0c 	lds	r30, 0x0CF9
    1b62:	f0 91 fa 0c 	lds	r31, 0x0CFA
    1b66:	ee 5f       	subi	r30, 0xFE	; 254
    1b68:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6a:	80 81       	ld	r24, Z
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	1c f0       	brlt	.+6      	; 0x1b76 <_ZL21kernel_should_preemptv+0x66>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	08 95       	ret
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	08 95       	ret

00001b7c <_Z20kernel_create_helperPFvvEi15task_priority_t>:
    1b7c:	cf 93       	push	r28
    1b7e:	cf b7       	in	r28, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	90 93 5a 03 	sts	0x035A, r25
    1b86:	80 93 59 03 	sts	0x0359, r24
    1b8a:	70 93 5c 03 	sts	0x035C, r23
    1b8e:	60 93 5b 03 	sts	0x035B, r22
    1b92:	40 93 5d 03 	sts	0x035D, r20
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	80 93 5e 03 	sts	0x035E, r24
    1b9c:	ab dc       	rcall	.-1706   	; 0x14f4 <_ZL12enter_kernelv>
    1b9e:	80 91 4b 03 	lds	r24, 0x034B
    1ba2:	90 91 4c 03 	lds	r25, 0x034C
    1ba6:	cf bf       	out	0x3f, r28	; 63
    1ba8:	cf 91       	pop	r28
    1baa:	08 95       	ret

00001bac <Task_Create_System>:
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	e6 cf       	rjmp	.-52     	; 0x1b7c <_Z20kernel_create_helperPFvvEi15task_priority_t>
    1bb0:	08 95       	ret

00001bb2 <Task_Create_RR>:
    1bb2:	42 e0       	ldi	r20, 0x02	; 2
    1bb4:	e3 cf       	rjmp	.-58     	; 0x1b7c <_Z20kernel_create_helperPFvvEi15task_priority_t>
    1bb6:	08 95       	ret

00001bb8 <Service_Init>:
    1bb8:	cf 93       	push	r28
    1bba:	cf b7       	in	r28, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	86 e0       	ldi	r24, 0x06	; 6
    1bc0:	80 93 5e 03 	sts	0x035E, r24
    1bc4:	97 dc       	rcall	.-1746   	; 0x14f4 <_ZL12enter_kernelv>
    1bc6:	80 91 49 03 	lds	r24, 0x0349
    1bca:	90 91 4a 03 	lds	r25, 0x034A
    1bce:	cf bf       	out	0x3f, r28	; 63
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <Service_Subscribe>:
    1bd4:	cf 93       	push	r28
    1bd6:	cf b7       	in	r28, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	90 93 48 03 	sts	0x0348, r25
    1bde:	80 93 47 03 	sts	0x0347, r24
    1be2:	70 93 46 03 	sts	0x0346, r23
    1be6:	60 93 45 03 	sts	0x0345, r22
    1bea:	87 e0       	ldi	r24, 0x07	; 7
    1bec:	80 93 5e 03 	sts	0x035E, r24
    1bf0:	81 dc       	rcall	.-1790   	; 0x14f4 <_ZL12enter_kernelv>
    1bf2:	cf bf       	out	0x3f, r28	; 63
    1bf4:	cf 91       	pop	r28
    1bf6:	08 95       	ret

00001bf8 <Service_Publish>:
    1bf8:	cf 93       	push	r28
    1bfa:	cf b7       	in	r28, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	90 93 48 03 	sts	0x0348, r25
    1c02:	80 93 47 03 	sts	0x0347, r24
    1c06:	70 93 44 03 	sts	0x0344, r23
    1c0a:	60 93 43 03 	sts	0x0343, r22
    1c0e:	88 e0       	ldi	r24, 0x08	; 8
    1c10:	80 93 5e 03 	sts	0x035E, r24
    1c14:	6f dc       	rcall	.-1826   	; 0x14f4 <_ZL12enter_kernelv>
    1c16:	cf bf       	out	0x3f, r28	; 63
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <main>:
 * and will be called after the OS is initialized.
 */
int main()
{
    //EnableProfileSample1();
	kernel_init();
    1c1c:	4a de       	rcall	.-876    	; 0x18b2 <_Z11kernel_initv>
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }
        cur_task->state = RUNNING;
    1c1e:	ee 24       	eor	r14, r14
    1c20:	e3 94       	inc	r14
            cur_task = (task_descriptor_t*)dequeue(&roundrobin_task_queue);
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
    1c22:	c7 ee       	ldi	r28, 0xE7	; 231
    1c24:	db e0       	ldi	r29, 0x0B	; 11
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
        {
            t = (task_descriptor_t *) dequeue(&(s->task_queue));
			*(t->data) = (int16_t) kernel_request_service_pub_data;
            t->state = READY;
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	f8 2e       	mov	r15, r24
        SERVICE * s = (SERVICE *) kernel_request_service_descriptor;
        cur_task->data = (int16_t *) kernel_request_service_sub_data;
	    enqueue(&(s->task_queue), cur_task);

        // Block the task until someone publishes to the service
        cur_task->state = WAITING;
    1c2a:	93 e0       	ldi	r25, 0x03	; 3
    1c2c:	d9 2e       	mov	r13, r25
static void kernel_dispatch(void)
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */
    if (cur_task == NULL)
    1c2e:	80 91 f9 0c 	lds	r24, 0x0CF9
    1c32:	90 91 fa 0c 	lds	r25, 0x0CFA
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	11 f4       	brne	.+4      	; 0x1c3e <main+0x22>
    {
		error_msg = ERR_RUN_7_RTOS_INTERNAL_ERROR;
    1c3a:	88 e0       	ldi	r24, 0x08	; 8
    1c3c:	6c c0       	rjmp	.+216    	; 0x1d16 <main+0xfa>
		OS_Abort();
        return;
    }
    if(cur_task->state != RUNNING || (cur_task == idle_task && !kernel_preemption_disabled))
    1c3e:	fc 01       	movw	r30, r24
    1c40:	eb 5f       	subi	r30, 0xFB	; 251
    1c42:	fe 4f       	sbci	r31, 0xFE	; 254
    1c44:	20 81       	ld	r18, Z
    1c46:	21 30       	cpi	r18, 0x01	; 1
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <main+0x30>
    1c4a:	7e c1       	rjmp	.+764    	; 0x1f48 <main+0x32c>
    1c4c:	87 5e       	subi	r24, 0xE7	; 231
    1c4e:	9b 40       	sbci	r25, 0x0B	; 11
    1c50:	51 f5       	brne	.+84     	; 0x1ca6 <main+0x8a>
    1c52:	80 91 4d 03 	lds	r24, 0x034D
    1c56:	90 91 4e 03 	lds	r25, 0x034E
    1c5a:	89 2b       	or	r24, r25
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <main+0x44>
    1c5e:	74 c1       	rjmp	.+744    	; 0x1f48 <main+0x32c>
    1c60:	22 c0       	rjmp	.+68     	; 0x1ca6 <main+0x8a>
		if(system_task_queue.head != NULL)
        {
            cur_task = (task_descriptor_t*)dequeue(&system_task_queue);
        }
		//Else if a period tasks is ready...
        else if(periodic_task_ready())
    1c62:	30 df       	rcall	.-416    	; 0x1ac4 <_Z19periodic_task_readyv>
    1c64:	89 2b       	or	r24, r25
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <main+0x4e>
    1c68:	90 c1       	rjmp	.+800    	; 0x1f8a <main+0x36e>
 *
 * @return The available metadata, or NULL if none available.
 */
static periodic_task_metadata_t* periodic_dequeue(periodic_task_queue_t* queue_ptr)
{
	periodic_task_metadata_t* task_ptr = queue_ptr->head;
    1c6a:	e0 91 33 03 	lds	r30, 0x0333
    1c6e:	f0 91 34 03 	lds	r31, 0x0334

	//If queue is not empty.
	if(queue_ptr->head != NULL)
    1c72:	30 97       	sbiw	r30, 0x00	; 0
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <main+0x5c>
    1c76:	72 c1       	rjmp	.+740    	; 0x1f5c <main+0x340>
        }
		//Else if a period tasks is ready...
        else if(periodic_task_ready())
        {
            /* Keep running the current PERIODIC task. */
			cur_per_metadata = periodic_dequeue(&periodic_task_queue);
    1c78:	f0 93 f8 0c 	sts	0x0CF8, r31
    1c7c:	e0 93 f7 0c 	sts	0x0CF7, r30
            cur_task = cur_per_metadata->task;
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	90 93 fa 0c 	sts	0x0CFA, r25
    1c88:	80 93 f9 0c 	sts	0x0CF9, r24
			periodic_task_remticks = cur_per_metadata->wcet;
    1c8c:	84 81       	ldd	r24, Z+4	; 0x04
    1c8e:	95 81       	ldd	r25, Z+5	; 0x05
    1c90:	90 93 f6 0c 	sts	0x0CF6, r25
    1c94:	80 93 f5 0c 	sts	0x0CF5, r24
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }
        cur_task->state = RUNNING;
    1c98:	e0 91 f9 0c 	lds	r30, 0x0CF9
    1c9c:	f0 91 fa 0c 	lds	r31, 0x0CFA
    1ca0:	eb 5f       	subi	r30, 0xFB	; 251
    1ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca4:	e0 82       	st	Z, r14
static void kernel_main_loop(void)
{
    for(;;)
    {
        kernel_dispatch();
		kernel_preemption_disabled = 0; //Disable it after each call to OS
    1ca6:	10 92 4e 03 	sts	0x034E, r1
    1caa:	10 92 4d 03 	sts	0x034D, r1
        exit_kernel();
    1cae:	c9 db       	rcall	.-2158   	; 0x1442 <_ZL11exit_kernelv>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waiting queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
    1cb0:	80 91 5e 03 	lds	r24, 0x035E
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	89 30       	cpi	r24, 0x09	; 9
    1cb8:	91 05       	cpc	r25, r1
    1cba:	08 f0       	brcs	.+2      	; 0x1cbe <main+0xa2>
    1cbc:	3a c1       	rjmp	.+628    	; 0x1f32 <main+0x316>
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	ee 58       	subi	r30, 0x8E	; 142
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	39 c6       	rjmp	.+3186   	; 0x2938 <__tablejump2__>
 */
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */

	ticks_from_start += 1;
    1cc6:	80 91 dc 02 	lds	r24, 0x02DC
    1cca:	90 91 dd 02 	lds	r25, 0x02DD
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	90 93 dd 02 	sts	0x02DD, r25
    1cd4:	80 93 dc 02 	sts	0x02DC, r24
    current_timer_val = TCNT1;
    1cd8:	80 91 84 00 	lds	r24, 0x0084
    1cdc:	90 91 85 00 	lds	r25, 0x0085
    1ce0:	90 93 db 02 	sts	0x02DB, r25
    1ce4:	80 93 da 02 	sts	0x02DA, r24

    if(cur_task->priority == PERIODIC)
    1ce8:	60 91 f9 0c 	lds	r22, 0x0CF9
    1cec:	70 91 fa 0c 	lds	r23, 0x0CFA
    1cf0:	fb 01       	movw	r30, r22
    1cf2:	ee 5f       	subi	r30, 0xFE	; 254
    1cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf6:	80 81       	ld	r24, Z
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	81 f4       	brne	.+32     	; 0x1d1c <main+0x100>
    {
		periodic_task_remticks--;
    1cfc:	80 91 f5 0c 	lds	r24, 0x0CF5
    1d00:	90 91 f6 0c 	lds	r25, 0x0CF6
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	90 93 f6 0c 	sts	0x0CF6, r25
    1d0a:	80 93 f5 0c 	sts	0x0CF5, r24
        if(periodic_task_remticks == 0)
    1d0e:	89 2b       	or	r24, r25
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <main+0xf8>
    1d12:	17 c1       	rjmp	.+558    	; 0x1f42 <main+0x326>
        {
			error_msg = ERR_RUN_4_PERIODIC_TOOK_TOO_LONG;
    1d14:	85 e0       	ldi	r24, 0x05	; 5
    1d16:	80 93 3c 02 	sts	0x023C, r24
			OS_Abort();
    1d1a:	80 de       	rcall	.-768    	; 0x1a1c <OS_Abort>

    case TIMER_EXPIRED:
        kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->priority == ROUND_ROBIN && cur_task->state == RUNNING)
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <main+0x106>
    1d20:	10 c1       	rjmp	.+544    	; 0x1f42 <main+0x326>
    1d22:	fb 01       	movw	r30, r22
    1d24:	eb 5f       	subi	r30, 0xFB	; 251
    1d26:	fe 4f       	sbci	r31, 0xFE	; 254
    1d28:	90 81       	ld	r25, Z
    1d2a:	91 30       	cpi	r25, 0x01	; 1
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <main+0x114>
    1d2e:	09 c1       	rjmp	.+530    	; 0x1f42 <main+0x326>
        {
            cur_task->state = READY;
    1d30:	80 83       	st	Z, r24
    1d32:	50 c0       	rjmp	.+160    	; 0x1dd4 <main+0x1b8>
            enqueue(&roundrobin_task_queue, cur_task);
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();
    1d34:	b5 dc       	rcall	.-1686   	; 0x16a0 <_ZL18kernel_create_taskv>
    1d36:	90 93 4c 03 	sts	0x034C, r25
    1d3a:	80 93 4b 03 	sts	0x034B, r24

        /* Check if new task has higher priority, and that it wasn't an ISR
         * making the request.
         */

        if(!kernel_request_retval && kernel_should_preempt())
    1d3e:	80 91 4b 03 	lds	r24, 0x034B
    1d42:	90 91 4c 03 	lds	r25, 0x034C
    1d46:	89 2b       	or	r24, r25
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <main+0x130>
    1d4a:	ec c0       	rjmp	.+472    	; 0x1f24 <main+0x308>
    1d4c:	e1 de       	rcall	.-574    	; 0x1b10 <_ZL21kernel_should_preemptv>
    1d4e:	89 2b       	or	r24, r25
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <main+0x138>
    1d52:	36 c1       	rjmp	.+620    	; 0x1fc0 <main+0x3a4>
    1d54:	e7 c0       	rjmp	.+462    	; 0x1f24 <main+0x308>
		}

        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
    1d56:	00 91 f9 0c 	lds	r16, 0x0CF9
    1d5a:	10 91 fa 0c 	lds	r17, 0x0CFA
    1d5e:	3b e0       	ldi	r19, 0x0B	; 11
    1d60:	07 3e       	cpi	r16, 0xE7	; 231
    1d62:	13 07       	cpc	r17, r19
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <main+0x14c>
    1d66:	ed c0       	rjmp	.+474    	; 0x1f42 <main+0x326>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
    1d68:	f8 01       	movw	r30, r16
    1d6a:	eb 5f       	subi	r30, 0xFB	; 251
    1d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6e:	10 82       	st	Z, r1
    if(cur_task->priority == PERIODIC && cur_task->periodic_desc != NULL)
    1d70:	33 97       	sbiw	r30, 0x03	; 3
    1d72:	80 81       	ld	r24, Z
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	61 f4       	brne	.+24     	; 0x1d90 <main+0x174>
    1d78:	31 96       	adiw	r30, 0x01	; 1
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	61 15       	cp	r22, r1
    1d80:	71 05       	cpc	r23, r1
    1d82:	31 f0       	breq	.+12     	; 0x1d90 <main+0x174>
    {
		//TODO: Remove from our construct.
		cur_task->periodic_desc->task = NULL;
    1d84:	fb 01       	movw	r30, r22
    1d86:	11 82       	std	Z+1, r1	; 0x01
    1d88:	10 82       	st	Z, r1
		periodic_enqueue(&periodic_dead_pool_queue, cur_task->periodic_desc);
    1d8a:	8b e3       	ldi	r24, 0x3B	; 59
    1d8c:	93 e0       	ldi	r25, 0x03	; 3
    1d8e:	0b dc       	rcall	.-2026   	; 0x15a6 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>
    }
    enqueue(&dead_pool_queue, cur_task);
    1d90:	b8 01       	movw	r22, r16
    1d92:	8f e3       	ldi	r24, 0x3F	; 63
    1d94:	93 e0       	ldi	r25, 0x03	; 3
    1d96:	a1 c0       	rjmp	.+322    	; 0x1eda <main+0x2be>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		cur_task->state = READY;
    1d98:	60 91 f9 0c 	lds	r22, 0x0CF9
    1d9c:	70 91 fa 0c 	lds	r23, 0x0CFA
    1da0:	fb 01       	movw	r30, r22
    1da2:	eb 5f       	subi	r30, 0xFB	; 251
    1da4:	fe 4f       	sbci	r31, 0xFE	; 254
    1da6:	f0 82       	st	Z, r15
		switch(cur_task->priority)
    1da8:	33 97       	sbiw	r30, 0x03	; 3
    1daa:	80 81       	ld	r24, Z
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	21 f0       	breq	.+8      	; 0x1db8 <main+0x19c>
    1db0:	82 30       	cpi	r24, 0x02	; 2
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <main+0x19a>
    1db4:	8e c0       	rjmp	.+284    	; 0x1ed2 <main+0x2b6>
    1db6:	0e c0       	rjmp	.+28     	; 0x1dd4 <main+0x1b8>
				enqueue(&system_task_queue, cur_task);
				break;

			case PERIODIC:
				//If we did execute in time
				cur_per_metadata->next += cur_per_metadata->period;
    1db8:	e0 91 f7 0c 	lds	r30, 0x0CF7
    1dbc:	f0 91 f8 0c 	lds	r31, 0x0CF8
    1dc0:	86 81       	ldd	r24, Z+6	; 0x06
    1dc2:	97 81       	ldd	r25, Z+7	; 0x07
    1dc4:	22 81       	ldd	r18, Z+2	; 0x02
    1dc6:	33 81       	ldd	r19, Z+3	; 0x03
    1dc8:	82 0f       	add	r24, r18
    1dca:	93 1f       	adc	r25, r19
    1dcc:	97 83       	std	Z+7, r25	; 0x07
    1dce:	86 83       	std	Z+6, r24	; 0x06
				periodic_enqueue(&periodic_task_queue, cur_per_metadata);
    1dd0:	bf 01       	movw	r22, r30
    1dd2:	89 c0       	rjmp	.+274    	; 0x1ee6 <main+0x2ca>
				break;

			case ROUND_ROBIN:
				//If the task calls Task_Next() it is yielding, and is moved to the back.
				enqueue(&roundrobin_task_queue, cur_task);
    1dd4:	87 e3       	ldi	r24, 0x37	; 55
    1dd6:	93 e0       	ldi	r25, 0x03	; 3
    1dd8:	80 c0       	rjmp	.+256    	; 0x1eda <main+0x2be>
 * kernel_request_service_init_retval pointer. Set the
 * pointer to 0 to imply a failure
 */
static void kernel_service_init()
{
	if (num_services < MAXSERVICES)
    1dda:	20 91 de 02 	lds	r18, 0x02DE
    1dde:	2a 30       	cpi	r18, 0x0A	; 10
    1de0:	70 f4       	brcc	.+28     	; 0x1dfe <main+0x1e2>
	{
		kernel_request_service_init_retval = &(service_list[num_services]);
    1de2:	f8 e0       	ldi	r31, 0x08	; 8
    1de4:	2f 9f       	mul	r18, r31
    1de6:	c0 01       	movw	r24, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	81 52       	subi	r24, 0x21	; 33
    1dec:	9d 4f       	sbci	r25, 0xFD	; 253
    1dee:	90 93 4a 03 	sts	0x034A, r25
    1df2:	80 93 49 03 	sts	0x0349, r24
		num_services += 1;
    1df6:	2f 5f       	subi	r18, 0xFF	; 255
    1df8:	20 93 de 02 	sts	0x02DE, r18
    1dfc:	a2 c0       	rjmp	.+324    	; 0x1f42 <main+0x326>
	}
	else
	{
		error_msg = ERR_RUN_8_SERVICE_CAPACITY_REACHED;
    1dfe:	89 e0       	ldi	r24, 0x09	; 9
    1e00:	8a cf       	rjmp	.-236    	; 0x1d16 <main+0xfa>
/**
 * Subscribe a task to a given service
 */
static void kernel_service_sub()
{
	if (kernel_request_service_descriptor == NULL)
    1e02:	80 91 47 03 	lds	r24, 0x0347
    1e06:	90 91 48 03 	lds	r25, 0x0348
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	19 f1       	breq	.+70     	; 0x1e54 <main+0x238>
	{
		error_msg = ERR_RUN_9_INVALID_SERVICE;
        OS_Abort();
	}
    else if (cur_task->priority == PERIODIC)
    1e0e:	00 91 f9 0c 	lds	r16, 0x0CF9
    1e12:	10 91 fa 0c 	lds	r17, 0x0CFA
    1e16:	f8 01       	movw	r30, r16
    1e18:	ee 5f       	subi	r30, 0xFE	; 254
    1e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1c:	20 81       	ld	r18, Z
    1e1e:	21 30       	cpi	r18, 0x01	; 1
    1e20:	11 f4       	brne	.+4      	; 0x1e26 <main+0x20a>
    {
        error_msg = ERR_RUN_10_PERIODIC_SUBSCRIBE;
    1e22:	8b e0       	ldi	r24, 0x0B	; 11
    1e24:	78 cf       	rjmp	.-272    	; 0x1d16 <main+0xfa>
        OS_Abort();
    }
    else
    {
        SERVICE * s = (SERVICE *) kernel_request_service_descriptor;
        cur_task->data = (int16_t *) kernel_request_service_sub_data;
    1e26:	f8 01       	movw	r30, r16
    1e28:	e8 5f       	subi	r30, 0xF8	; 248
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	20 91 45 03 	lds	r18, 0x0345
    1e30:	30 91 46 03 	lds	r19, 0x0346
    1e34:	31 83       	std	Z+1, r19	; 0x01
    1e36:	20 83       	st	Z, r18
	    enqueue(&(s->task_queue), cur_task);
    1e38:	b8 01       	movw	r22, r16
    1e3a:	00 dc       	rcall	.-2048   	; 0x163c <_ZL7enqueueP12task_queue_tP9td_struct>

        // Block the task until someone publishes to the service
        cur_task->state = WAITING;
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	eb 5f       	subi	r30, 0xFB	; 251
    1e40:	fe 4f       	sbci	r31, 0xFE	; 254
    1e42:	d0 82       	st	Z, r13
    1e44:	7e c0       	rjmp	.+252    	; 0x1f42 <main+0x326>
/**
 * Publish a value to a service
 */
static void kernel_service_pub()
{
	if (kernel_request_service_descriptor == NULL)
    1e46:	00 91 47 03 	lds	r16, 0x0347
    1e4a:	10 91 48 03 	lds	r17, 0x0348
    1e4e:	01 15       	cp	r16, r1
    1e50:	11 05       	cpc	r17, r1
    1e52:	01 f5       	brne	.+64     	; 0x1e94 <main+0x278>
	{
    	error_msg = ERR_RUN_9_INVALID_SERVICE;
    1e54:	8a e0       	ldi	r24, 0x0A	; 10
    1e56:	5f cf       	rjmp	.-322    	; 0x1d16 <main+0xfa>

        // Release the tasks! TODO: Place them in the expected ready queues
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
        {
            t = (task_descriptor_t *) dequeue(&(s->task_queue));
    1e58:	c8 01       	movw	r24, r16
    1e5a:	01 dc       	rcall	.-2046   	; 0x165e <_ZL7dequeueP12task_queue_t>
    1e5c:	bc 01       	movw	r22, r24
			*(t->data) = (int16_t) kernel_request_service_pub_data;
    1e5e:	80 91 43 03 	lds	r24, 0x0343
    1e62:	90 91 44 03 	lds	r25, 0x0344
    1e66:	fb 01       	movw	r30, r22
    1e68:	e8 5f       	subi	r30, 0xF8	; 248
    1e6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6c:	01 90       	ld	r0, Z+
    1e6e:	f0 81       	ld	r31, Z
    1e70:	e0 2d       	mov	r30, r0
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
            t->state = READY;
    1e76:	fb 01       	movw	r30, r22
    1e78:	eb 5f       	subi	r30, 0xFB	; 251
    1e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7c:	f0 82       	st	Z, r15
            switch(t->priority)
    1e7e:	33 97       	sbiw	r30, 0x03	; 3
    1e80:	80 81       	ld	r24, Z
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	69 f0       	breq	.+26     	; 0x1ea0 <main+0x284>
    1e86:	82 30       	cpi	r24, 0x02	; 2
    1e88:	69 f0       	breq	.+26     	; 0x1ea4 <main+0x288>
    1e8a:	81 11       	cpse	r24, r1
    1e8c:	0e c0       	rjmp	.+28     	; 0x1eaa <main+0x28e>
            {
                case SYSTEM:
                    enqueue(&system_task_queue, t);
    1e8e:	8f e2       	ldi	r24, 0x2F	; 47
    1e90:	93 e0       	ldi	r25, 0x03	; 3
                    // This should have never happened. Error out
                    error_msg = ERR_RUN_11_PERIODIC_FOUND_WHEN_PUBLISHING;
                    OS_Abort();
                    break;
                case ROUND_ROBIN:
                    enqueue(&roundrobin_task_queue, t);
    1e92:	d4 db       	rcall	.-2136   	; 0x163c <_ZL7enqueueP12task_queue_tP9td_struct>
    {
        SERVICE * s = (SERVICE *) kernel_request_service_descriptor;

        // Release the tasks! TODO: Place them in the expected ready queues
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
    1e94:	f8 01       	movw	r30, r16
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	89 2b       	or	r24, r25
    1e9c:	e9 f6       	brne	.-70     	; 0x1e58 <main+0x23c>
    1e9e:	07 c0       	rjmp	.+14     	; 0x1eae <main+0x292>
                case SYSTEM:
                    enqueue(&system_task_queue, t);
                    break;
                case PERIODIC:
                    // This should have never happened. Error out
                    error_msg = ERR_RUN_11_PERIODIC_FOUND_WHEN_PUBLISHING;
    1ea0:	8c e0       	ldi	r24, 0x0C	; 12
    1ea2:	39 cf       	rjmp	.-398    	; 0x1d16 <main+0xfa>
                    OS_Abort();
                    break;
                case ROUND_ROBIN:
                    enqueue(&roundrobin_task_queue, t);
    1ea4:	87 e3       	ldi	r24, 0x37	; 55
    1ea6:	93 e0       	ldi	r25, 0x03	; 3
    1ea8:	f4 cf       	rjmp	.-24     	; 0x1e92 <main+0x276>
                    break;
                default:
                    error_msg = ERR_RUN_12_TASK_WITHOUT_PRIORITY;
    1eaa:	8d e0       	ldi	r24, 0x0D	; 13
    1eac:	34 cf       	rjmp	.-408    	; 0x1d16 <main+0xfa>
        kernel_service_sub();
        break;

    case SERVICE_PUB:
        kernel_service_pub();
		if(kernel_should_preempt())
    1eae:	30 de       	rcall	.-928    	; 0x1b10 <_ZL21kernel_should_preemptv>
    1eb0:	89 2b       	or	r24, r25
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <main+0x29a>
    1eb4:	46 c0       	rjmp	.+140    	; 0x1f42 <main+0x326>
		{
			cur_task->state = READY;
    1eb6:	60 91 f9 0c 	lds	r22, 0x0CF9
    1eba:	70 91 fa 0c 	lds	r23, 0x0CFA
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	eb 5f       	subi	r30, 0xFB	; 251
    1ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec4:	f0 82       	st	Z, r15
			switch(cur_task->priority)
    1ec6:	33 97       	sbiw	r30, 0x03	; 3
    1ec8:	80 81       	ld	r24, Z
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	41 f0       	breq	.+16     	; 0x1ede <main+0x2c2>
    1ece:	82 30       	cpi	r24, 0x02	; 2
    1ed0:	71 f0       	breq	.+28     	; 0x1eee <main+0x2d2>
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	36 c0       	rjmp	.+108    	; 0x1f42 <main+0x326>
			{
				case SYSTEM:
				enqueue(&system_task_queue, cur_task);
    1ed6:	8f e2       	ldi	r24, 0x2F	; 47
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	b0 db       	rcall	.-2208   	; 0x163c <_ZL7enqueueP12task_queue_tP9td_struct>
    1edc:	32 c0       	rjmp	.+100    	; 0x1f42 <main+0x326>
				break;

				case PERIODIC:
				//Assume we did not finish out run.
				periodic_enqueue(&periodic_task_queue, cur_per_metadata);
    1ede:	60 91 f7 0c 	lds	r22, 0x0CF7
    1ee2:	70 91 f8 0c 	lds	r23, 0x0CF8
    1ee6:	83 e3       	ldi	r24, 0x33	; 51
    1ee8:	93 e0       	ldi	r25, 0x03	; 3
    1eea:	5d db       	rcall	.-2374   	; 0x15a6 <_ZL16periodic_enqueueP21periodic_task_queue_tP19ptd_metadata_struct>
    1eec:	2a c0       	rjmp	.+84     	; 0x1f42 <main+0x326>
}


static void budgequeue(task_queue_t* queue_ptr, task_descriptor_t* to_add)
{
	if(queue_ptr->head == NULL)
    1eee:	80 91 37 03 	lds	r24, 0x0337
    1ef2:	90 91 38 03 	lds	r25, 0x0338
    1ef6:	fb 01       	movw	r30, r22
    1ef8:	e6 5f       	subi	r30, 0xF6	; 246
    1efa:	fe 4f       	sbci	r31, 0xFE	; 254
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	59 f4       	brne	.+22     	; 0x1f16 <main+0x2fa>
	{
		queue_ptr->head = queue_ptr->tail = to_add;
    1f00:	70 93 3a 03 	sts	0x033A, r23
    1f04:	60 93 39 03 	sts	0x0339, r22
    1f08:	70 93 38 03 	sts	0x0338, r23
    1f0c:	60 93 37 03 	sts	0x0337, r22
		to_add->next = NULL;
    1f10:	11 82       	std	Z+1, r1	; 0x01
    1f12:	10 82       	st	Z, r1
    1f14:	16 c0       	rjmp	.+44     	; 0x1f42 <main+0x326>
	}
	else
	{
		to_add->next = queue_ptr->head;
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
		queue_ptr->head = to_add;
    1f1a:	70 93 38 03 	sts	0x0338, r23
    1f1e:	60 93 37 03 	sts	0x0337, r22
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <main+0x326>
				//If we are a periodic which as been pre-empted, place us back in the
				//waiting queue without updating our next stamp, so we remain at the front.
				periodic_enqueue(&periodic_task_queue, cur_task->periodic_desc);
			}
        }
		else if(kernel_request_retval == 1)
    1f24:	80 91 4b 03 	lds	r24, 0x034B
    1f28:	90 91 4c 03 	lds	r25, 0x034C
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <main+0x316>
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <main+0x394>
		}
        break;

    default:
        /* Should never happen */
        error_msg = 2; // TODO: FIXME //ERR_RUN_8_RTOS_INTERNAL_ERROR;
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	f0 ce       	rjmp	.-544    	; 0x1d16 <main+0xfa>
		queue_ptr->head = queue_ptr->tail = to_add;
		to_add->next = NULL;
	}
	else
	{
		to_add->next = queue_ptr->head;
    1f36:	31 83       	std	Z+1, r19	; 0x01
    1f38:	20 83       	st	Z, r18
		queue_ptr->head = to_add;
    1f3a:	90 93 38 03 	sts	0x0338, r25
    1f3e:	80 93 37 03 	sts	0x0337, r24
        error_msg = 2; // TODO: FIXME //ERR_RUN_8_RTOS_INTERNAL_ERROR;
        OS_Abort();
        break;
    }

    kernel_request = NONE;
    1f42:	10 92 5e 03 	sts	0x035E, r1
    1f46:	73 ce       	rjmp	.-794    	; 0x1c2e <main+0x12>
		OS_Abort();
        return;
    }
    if(cur_task->state != RUNNING || (cur_task == idle_task && !kernel_preemption_disabled))
    {
		if(system_task_queue.head != NULL)
    1f48:	80 91 2f 03 	lds	r24, 0x032F
    1f4c:	90 91 30 03 	lds	r25, 0x0330
    1f50:	89 2b       	or	r24, r25
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <main+0x33a>
    1f54:	86 ce       	rjmp	.-756    	; 0x1c62 <main+0x46>
        {
            cur_task = (task_descriptor_t*)dequeue(&system_task_queue);
    1f56:	8f e2       	ldi	r24, 0x2F	; 47
    1f58:	93 e0       	ldi	r25, 0x03	; 3
    1f5a:	1f c0       	rjmp	.+62     	; 0x1f9a <main+0x37e>
	periodic_task_metadata_t* task_ptr = queue_ptr->head;

	//If queue is not empty.
	if(queue_ptr->head != NULL)
	{
		if(queue_ptr->head == queue_ptr->tail)
    1f5c:	80 91 35 03 	lds	r24, 0x0335
    1f60:	90 91 36 03 	lds	r25, 0x0336
    1f64:	e8 17       	cp	r30, r24
    1f66:	f9 07       	cpc	r31, r25
    1f68:	49 f4       	brne	.+18     	; 0x1f7c <main+0x360>
		{
			//Last item in the queue.
			queue_ptr->head = queue_ptr->tail = NULL;
    1f6a:	10 92 36 03 	sts	0x0336, r1
    1f6e:	10 92 35 03 	sts	0x0335, r1
    1f72:	10 92 34 03 	sts	0x0334, r1
    1f76:	10 92 33 03 	sts	0x0333, r1
    1f7a:	7e ce       	rjmp	.-772    	; 0x1c78 <main+0x5c>
		}
		else
		{
			queue_ptr->head = queue_ptr->head->nextT;
    1f7c:	80 85       	ldd	r24, Z+8	; 0x08
    1f7e:	91 85       	ldd	r25, Z+9	; 0x09
    1f80:	90 93 34 03 	sts	0x0334, r25
    1f84:	80 93 33 03 	sts	0x0333, r24
    1f88:	77 ce       	rjmp	.-786    	; 0x1c78 <main+0x5c>
			cur_per_metadata = periodic_dequeue(&periodic_task_queue);
            cur_task = cur_per_metadata->task;
			periodic_task_remticks = cur_per_metadata->wcet;
        }
		//Else if, use the time to complete round robin.
        else if(roundrobin_task_queue.head != NULL)
    1f8a:	80 91 37 03 	lds	r24, 0x0337
    1f8e:	90 91 38 03 	lds	r25, 0x0338
    1f92:	89 2b       	or	r24, r25
    1f94:	41 f0       	breq	.+16     	; 0x1fa6 <main+0x38a>
        {
            cur_task = (task_descriptor_t*)dequeue(&roundrobin_task_queue);
    1f96:	87 e3       	ldi	r24, 0x37	; 55
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	61 db       	rcall	.-2366   	; 0x165e <_ZL7dequeueP12task_queue_t>
    1f9c:	90 93 fa 0c 	sts	0x0CFA, r25
    1fa0:	80 93 f9 0c 	sts	0x0CF9, r24
    1fa4:	79 ce       	rjmp	.-782    	; 0x1c98 <main+0x7c>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
    1fa6:	d0 93 fa 0c 	sts	0x0CFA, r29
    1faa:	c0 93 f9 0c 	sts	0x0CF9, r28
    1fae:	74 ce       	rjmp	.-792    	; 0x1c98 <main+0x7c>
			//Too many tasks.
			error_msg = ERR_RUN_1_TOO_MANY_TASKS;
			OS_Abort();

		}
		else if(kernel_request_retval == 2)
    1fb0:	80 91 4b 03 	lds	r24, 0x034B
    1fb4:	90 91 4c 03 	lds	r25, 0x034C
    1fb8:	02 97       	sbiw	r24, 0x02	; 2
    1fba:	19 f6       	brne	.-122    	; 0x1f42 <main+0x326>
		{
			//Too many periodic tasks.
			error_msg = ERR_RUN_2_TOO_MANY_PERIODIC_TASKS;
    1fbc:	83 e0       	ldi	r24, 0x03	; 3
    1fbe:	ab ce       	rjmp	.-682    	; 0x1d16 <main+0xfa>
         * making the request.
         */

        if(!kernel_request_retval && kernel_should_preempt())
        {
			cur_task->state = READY;
    1fc0:	80 91 f9 0c 	lds	r24, 0x0CF9
    1fc4:	90 91 fa 0c 	lds	r25, 0x0CFA
    1fc8:	fc 01       	movw	r30, r24
    1fca:	eb 5f       	subi	r30, 0xFB	; 251
    1fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fce:	f0 82       	st	Z, r15
			//If we have been paused and are round robin, enqueue at the front
			//to run next time.
            if(cur_task->priority == ROUND_ROBIN)
    1fd0:	33 97       	sbiw	r30, 0x03	; 3
    1fd2:	20 81       	ld	r18, Z
    1fd4:	22 30       	cpi	r18, 0x02	; 2
    1fd6:	a1 f4       	brne	.+40     	; 0x2000 <main+0x3e4>
}


static void budgequeue(task_queue_t* queue_ptr, task_descriptor_t* to_add)
{
	if(queue_ptr->head == NULL)
    1fd8:	20 91 37 03 	lds	r18, 0x0337
    1fdc:	30 91 38 03 	lds	r19, 0x0338
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	e6 5f       	subi	r30, 0xF6	; 246
    1fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe6:	21 15       	cp	r18, r1
    1fe8:	31 05       	cpc	r19, r1
    1fea:	09 f0       	breq	.+2      	; 0x1fee <main+0x3d2>
    1fec:	a4 cf       	rjmp	.-184    	; 0x1f36 <main+0x31a>
	{
		queue_ptr->head = queue_ptr->tail = to_add;
    1fee:	90 93 3a 03 	sts	0x033A, r25
    1ff2:	80 93 39 03 	sts	0x0339, r24
    1ff6:	90 93 38 03 	sts	0x0338, r25
    1ffa:	80 93 37 03 	sts	0x0337, r24
    1ffe:	88 cf       	rjmp	.-240    	; 0x1f10 <main+0x2f4>
			//to run next time.
            if(cur_task->priority == ROUND_ROBIN)
            {
                budgequeue(&roundrobin_task_queue, cur_task);
            }
			else if(cur_task->priority == PERIODIC)
    2000:	21 30       	cpi	r18, 0x01	; 1
    2002:	09 f0       	breq	.+2      	; 0x2006 <main+0x3ea>
    2004:	9e cf       	rjmp	.-196    	; 0x1f42 <main+0x326>
			{
				//If we are a periodic which as been pre-empted, place us back in the
				//waiting queue without updating our next stamp, so we remain at the front.
				periodic_enqueue(&periodic_task_queue, cur_task->periodic_desc);
    2006:	fc 01       	movw	r30, r24
    2008:	ed 5f       	subi	r30, 0xFD	; 253
    200a:	fe 4f       	sbci	r31, 0xFE	; 254
    200c:	60 81       	ld	r22, Z
    200e:	71 81       	ldd	r23, Z+1	; 0x01
    2010:	6a cf       	rjmp	.-300    	; 0x1ee6 <main+0x2ca>

00002012 <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
    2012:	1f 92       	push	r1
    2014:	0f 92       	push	r0
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	0f 92       	push	r0
    201a:	11 24       	eor	r1, r1
    201c:	0b b6       	in	r0, 0x3b	; 59
    201e:	0f 92       	push	r0
    2020:	5f 93       	push	r21
    2022:	6f 93       	push	r22
    2024:	7f 93       	push	r23
    2026:	8f 93       	push	r24
    2028:	9f 93       	push	r25
    202a:	af 93       	push	r26
    202c:	bf 93       	push	r27
    202e:	ef 93       	push	r30
    2030:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
    2032:	80 91 c0 00 	lds	r24, 0x00C0
    2036:	87 ff       	sbrs	r24, 7
    2038:	fc cf       	rjmp	.-8      	; 0x2032 <__vector_25+0x20>

	//PORTB ^= _BV(PB7);

	rx[rxn] = UDR0;
    203a:	e0 91 60 0d 	lds	r30, 0x0D60
    203e:	f0 91 61 0d 	lds	r31, 0x0D61
    2042:	80 91 c6 00 	lds	r24, 0x00C6
    2046:	e4 50       	subi	r30, 0x04	; 4
    2048:	f3 4f       	sbci	r31, 0xF3	; 243
    204a:	80 83       	st	Z, r24
	rxn = (rxn + 1) % TRACE_UART_BUFFER_SIZE;
    204c:	80 91 60 0d 	lds	r24, 0x0D60
    2050:	90 91 61 0d 	lds	r25, 0x0D61
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	64 e6       	ldi	r22, 0x64	; 100
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	39 d4       	rcall	.+2162   	; 0x28ce <__divmodhi4>
    205c:	90 93 61 0d 	sts	0x0D61, r25
    2060:	80 93 60 0d 	sts	0x0D60, r24
	uart_rx = 1; // notify main of receipt of data.
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 93 fb 0c 	sts	0x0CFB, r24
	//PORTB = PORTB | _BV(PINB1);
}
    206a:	ff 91       	pop	r31
    206c:	ef 91       	pop	r30
    206e:	bf 91       	pop	r27
    2070:	af 91       	pop	r26
    2072:	9f 91       	pop	r25
    2074:	8f 91       	pop	r24
    2076:	7f 91       	pop	r23
    2078:	6f 91       	pop	r22
    207a:	5f 91       	pop	r21
    207c:	0f 90       	pop	r0
    207e:	0b be       	out	0x3b, r0	; 59
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <_Z16Roomba_Send_Byteh>:
	return uart_buffer_index;
}

void uart_reset_receive(void)
{
	uart_buffer_index = 0;
    208a:	90 91 c8 00 	lds	r25, 0x00C8
    208e:	95 ff       	sbrs	r25, 5
    2090:	fc cf       	rjmp	.-8      	; 0x208a <_Z16Roomba_Send_Byteh>
    2092:	80 93 ce 00 	sts	0x00CE, r24
    2096:	08 95       	ret

00002098 <_Z16Roomba_UART_Init9_uart_bps>:
    2098:	2f b7       	in	r18, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	90 91 65 00 	lds	r25, 0x0065
    20a0:	9e 7f       	andi	r25, 0xFE	; 254
    20a2:	90 93 65 00 	sts	0x0065, r25
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	59 f0       	breq	.+22     	; 0x20c0 <_Z16Roomba_UART_Init9_uart_bps+0x28>
    20aa:	38 f0       	brcs	.+14     	; 0x20ba <_Z16Roomba_UART_Init9_uart_bps+0x22>
    20ac:	82 30       	cpi	r24, 0x02	; 2
    20ae:	59 f0       	breq	.+22     	; 0x20c6 <_Z16Roomba_UART_Init9_uart_bps+0x2e>
    20b0:	83 30       	cpi	r24, 0x03	; 3
    20b2:	49 f4       	brne	.+18     	; 0x20c6 <_Z16Roomba_UART_Init9_uart_bps+0x2e>
    20b4:	88 e0       	ldi	r24, 0x08	; 8
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	08 c0       	rjmp	.+16     	; 0x20ca <_Z16Roomba_UART_Init9_uart_bps+0x32>
    20ba:	83 e3       	ldi	r24, 0x33	; 51
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <_Z16Roomba_UART_Init9_uart_bps+0x32>
    20c0:	89 e1       	ldi	r24, 0x19	; 25
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <_Z16Roomba_UART_Init9_uart_bps+0x32>
    20c6:	80 e1       	ldi	r24, 0x10	; 16
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	90 93 cd 00 	sts	0x00CD, r25
    20ce:	80 93 cc 00 	sts	0x00CC, r24
    20d2:	80 ec       	ldi	r24, 0xC0	; 192
    20d4:	80 93 c8 00 	sts	0x00C8, r24
    20d8:	88 e9       	ldi	r24, 0x98	; 152
    20da:	80 93 c9 00 	sts	0x00C9, r24
    20de:	8e e0       	ldi	r24, 0x0E	; 14
    20e0:	80 93 ca 00 	sts	0x00CA, r24
    20e4:	80 91 c8 00 	lds	r24, 0x00C8
    20e8:	8d 7f       	andi	r24, 0xFD	; 253
    20ea:	80 93 c8 00 	sts	0x00C8, r24
    20ee:	2f bf       	out	0x3f, r18	; 63
    20f0:	08 95       	ret

000020f2 <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    20f2:	1f 92       	push	r1
    20f4:	0f 92       	push	r0
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	0f 92       	push	r0
    20fa:	11 24       	eor	r1, r1
    20fc:	0b b6       	in	r0, 0x3b	; 59
    20fe:	0f 92       	push	r0
    2100:	8f 93       	push	r24
    2102:	9f 93       	push	r25
    2104:	ef 93       	push	r30
    2106:	ff 93       	push	r31
	// FEn - frame error
	// DORn - data overrun
	// UPEn - uart pairty error
    uart_buffer[uart_buffer_index] = UDR1;
    2108:	e0 91 62 0d 	lds	r30, 0x0D62
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 91 ce 00 	lds	r24, 0x00CE
    2112:	ed 59       	subi	r30, 0x9D	; 157
    2114:	f2 4f       	sbci	r31, 0xF2	; 242
    2116:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    2118:	80 91 62 0d 	lds	r24, 0x0D62
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	8f 71       	andi	r24, 0x1F	; 31
    2122:	99 27       	eor	r25, r25
    2124:	80 93 62 0d 	sts	0x0D62, r24
}
    2128:	ff 91       	pop	r31
    212a:	ef 91       	pop	r30
    212c:	9f 91       	pop	r25
    212e:	8f 91       	pop	r24
    2130:	0f 90       	pop	r0
    2132:	0b be       	out	0x3b, r0	; 59
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	2f 93       	push	r18
    214a:	3f 93       	push	r19
    214c:	8f 93       	push	r24
    214e:	9f 93       	push	r25
    2150:	af 93       	push	r26
    2152:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2154:	80 91 84 0d 	lds	r24, 0x0D84
    2158:	90 91 85 0d 	lds	r25, 0x0D85
    215c:	a0 91 86 0d 	lds	r26, 0x0D86
    2160:	b0 91 87 0d 	lds	r27, 0x0D87
	unsigned char f = timer0_fract;
    2164:	30 91 83 0d 	lds	r19, 0x0D83

	m += MILLIS_INC;
	f += FRACT_INC;
    2168:	23 e0       	ldi	r18, 0x03	; 3
    216a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    216c:	2d 37       	cpi	r18, 0x7D	; 125
    216e:	20 f4       	brcc	.+8      	; 0x2178 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	a1 1d       	adc	r26, r1
    2174:	b1 1d       	adc	r27, r1
    2176:	05 c0       	rjmp	.+10     	; 0x2182 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2178:	26 e8       	ldi	r18, 0x86	; 134
    217a:	23 0f       	add	r18, r19
		m += 1;
    217c:	02 96       	adiw	r24, 0x02	; 2
    217e:	a1 1d       	adc	r26, r1
    2180:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2182:	20 93 83 0d 	sts	0x0D83, r18
	timer0_millis = m;
    2186:	80 93 84 0d 	sts	0x0D84, r24
    218a:	90 93 85 0d 	sts	0x0D85, r25
    218e:	a0 93 86 0d 	sts	0x0D86, r26
    2192:	b0 93 87 0d 	sts	0x0D87, r27
	timer0_overflow_count++;
    2196:	80 91 88 0d 	lds	r24, 0x0D88
    219a:	90 91 89 0d 	lds	r25, 0x0D89
    219e:	a0 91 8a 0d 	lds	r26, 0x0D8A
    21a2:	b0 91 8b 0d 	lds	r27, 0x0D8B
    21a6:	01 96       	adiw	r24, 0x01	; 1
    21a8:	a1 1d       	adc	r26, r1
    21aa:	b1 1d       	adc	r27, r1
    21ac:	80 93 88 0d 	sts	0x0D88, r24
    21b0:	90 93 89 0d 	sts	0x0D89, r25
    21b4:	a0 93 8a 0d 	sts	0x0D8A, r26
    21b8:	b0 93 8b 0d 	sts	0x0D8B, r27
}
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	3f 91       	pop	r19
    21c6:	2f 91       	pop	r18
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f 90       	pop	r0
    21ce:	1f 90       	pop	r1
    21d0:	18 95       	reti

000021d2 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    21d2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    21d4:	f8 94       	cli
	m = timer0_overflow_count;
    21d6:	80 91 88 0d 	lds	r24, 0x0D88
    21da:	90 91 89 0d 	lds	r25, 0x0D89
    21de:	a0 91 8a 0d 	lds	r26, 0x0D8A
    21e2:	b0 91 8b 0d 	lds	r27, 0x0D8B
#if defined(TCNT0)
	t = TCNT0;
    21e6:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    21e8:	a8 9b       	sbis	0x15, 0	; 21
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <micros+0x24>
    21ec:	2f 3f       	cpi	r18, 0xFF	; 255
    21ee:	19 f0       	breq	.+6      	; 0x21f6 <micros+0x24>
		m++;
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	a1 1d       	adc	r26, r1
    21f4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    21f6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    21f8:	66 27       	eor	r22, r22
    21fa:	78 2f       	mov	r23, r24
    21fc:	89 2f       	mov	r24, r25
    21fe:	9a 2f       	mov	r25, r26
    2200:	62 0f       	add	r22, r18
    2202:	71 1d       	adc	r23, r1
    2204:	81 1d       	adc	r24, r1
    2206:	91 1d       	adc	r25, r1
    2208:	42 e0       	ldi	r20, 0x02	; 2
    220a:	66 0f       	add	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	4a 95       	dec	r20
    2214:	d1 f7       	brne	.-12     	; 0x220a <__stack+0xb>
}
    2216:	08 95       	ret

00002218 <delay>:

void delay(unsigned long ms)
{
    2218:	cf 92       	push	r12
    221a:	df 92       	push	r13
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	6b 01       	movw	r12, r22
    2226:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    2228:	d4 df       	rcall	.-88     	; 0x21d2 <micros>
    222a:	eb 01       	movw	r28, r22
    222c:	c1 14       	cp	r12, r1

	while (ms > 0) {
    222e:	d1 04       	cpc	r13, r1
    2230:	e1 04       	cpc	r14, r1
    2232:	f1 04       	cpc	r15, r1
    2234:	79 f0       	breq	.+30     	; 0x2254 <delay+0x3c>
    2236:	36 d3       	rcall	.+1644   	; 0x28a4 <yield>
		yield();
    2238:	cc df       	rcall	.-104    	; 0x21d2 <micros>
    223a:	6c 1b       	sub	r22, r28
		if (((uint16_t)micros() - start) >= 1000) {
    223c:	7d 0b       	sbc	r23, r29
    223e:	68 3e       	cpi	r22, 0xE8	; 232
    2240:	73 40       	sbci	r23, 0x03	; 3
    2242:	a0 f3       	brcs	.-24     	; 0x222c <delay+0x14>
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	c8 1a       	sub	r12, r24
    2248:	d1 08       	sbc	r13, r1
			ms--;
    224a:	e1 08       	sbc	r14, r1
    224c:	f1 08       	sbc	r15, r1
    224e:	c8 51       	subi	r28, 0x18	; 24
    2250:	dc 4f       	sbci	r29, 0xFC	; 252
    2252:	ec cf       	rjmp	.-40     	; 0x222c <delay+0x14>
			start += 1000;
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	ff 90       	pop	r15
		}
	}
}
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	08 95       	ret

00002262 <init>:
    2262:	78 94       	sei
    2264:	84 b5       	in	r24, 0x24	; 36
    2266:	82 60       	ori	r24, 0x02	; 2
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2268:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    226a:	84 b5       	in	r24, 0x24	; 36
    226c:	81 60       	ori	r24, 0x01	; 1
    226e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2270:	85 b5       	in	r24, 0x25	; 37
    2272:	82 60       	ori	r24, 0x02	; 2
    2274:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2276:	85 b5       	in	r24, 0x25	; 37
    2278:	81 60       	ori	r24, 0x01	; 1
    227a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    227c:	ee e6       	ldi	r30, 0x6E	; 110
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	81 60       	ori	r24, 0x01	; 1
    2284:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2286:	e1 e8       	ldi	r30, 0x81	; 129
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    228c:	80 81       	ld	r24, Z
    228e:	82 60       	ori	r24, 0x02	; 2
    2290:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2292:	80 81       	ld	r24, Z
    2294:	81 60       	ori	r24, 0x01	; 1
    2296:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2298:	e0 e8       	ldi	r30, 0x80	; 128
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	81 60       	ori	r24, 0x01	; 1
    22a0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    22a2:	e1 eb       	ldi	r30, 0xB1	; 177
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	84 60       	ori	r24, 0x04	; 4
    22aa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    22ac:	e0 eb       	ldi	r30, 0xB0	; 176
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	81 60       	ori	r24, 0x01	; 1
    22b4:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    22b6:	e1 e9       	ldi	r30, 0x91	; 145
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	82 60       	ori	r24, 0x02	; 2
    22be:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    22c0:	80 81       	ld	r24, Z
    22c2:	81 60       	ori	r24, 0x01	; 1
    22c4:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    22c6:	e0 e9       	ldi	r30, 0x90	; 144
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	81 60       	ori	r24, 0x01	; 1
    22ce:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    22d0:	e1 ea       	ldi	r30, 0xA1	; 161
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	82 60       	ori	r24, 0x02	; 2
    22d8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    22da:	80 81       	ld	r24, Z
    22dc:	81 60       	ori	r24, 0x01	; 1
    22de:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    22e0:	e0 ea       	ldi	r30, 0xA0	; 160
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	81 60       	ori	r24, 0x01	; 1
    22e8:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    22ea:	e1 e2       	ldi	r30, 0x21	; 33
    22ec:	f1 e0       	ldi	r31, 0x01	; 1
    22ee:	80 81       	ld	r24, Z
    22f0:	82 60       	ori	r24, 0x02	; 2
    22f2:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    22f4:	80 81       	ld	r24, Z
    22f6:	81 60       	ori	r24, 0x01	; 1
    22f8:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    22fa:	e0 e2       	ldi	r30, 0x20	; 32
    22fc:	f1 e0       	ldi	r31, 0x01	; 1
    22fe:	80 81       	ld	r24, Z
    2300:	81 60       	ori	r24, 0x01	; 1
    2302:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2304:	ea e7       	ldi	r30, 0x7A	; 122
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	84 60       	ori	r24, 0x04	; 4
    230c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    230e:	80 81       	ld	r24, Z
    2310:	82 60       	ori	r24, 0x02	; 2
    2312:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2314:	80 81       	ld	r24, Z
    2316:	81 60       	ori	r24, 0x01	; 1
    2318:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    231a:	80 81       	ld	r24, Z
    231c:	80 68       	ori	r24, 0x80	; 128
    231e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2320:	10 92 c1 00 	sts	0x00C1, r1
    2324:	08 95       	ret

00002326 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	fc 01       	movw	r30, r24
    232a:	31 97       	sbiw	r30, 0x01	; 1
    232c:	e2 31       	cpi	r30, 0x12	; 18
    232e:	f1 05       	cpc	r31, r1
    2330:	08 f0       	brcs	.+2      	; 0x2334 <turnOffPWM+0xe>
    2332:	4b c0       	rjmp	.+150    	; 0x23ca <turnOffPWM+0xa4>
    2334:	e5 58       	subi	r30, 0x85	; 133
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	ff c2       	rjmp	.+1534   	; 0x2938 <__tablejump2__>
    233a:	80 91 80 00 	lds	r24, 0x0080
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    233e:	8f 77       	andi	r24, 0x7F	; 127
    2340:	03 c0       	rjmp	.+6      	; 0x2348 <turnOffPWM+0x22>
    2342:	80 91 80 00 	lds	r24, 0x0080
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2346:	8f 7d       	andi	r24, 0xDF	; 223
    2348:	80 93 80 00 	sts	0x0080, r24
    234c:	08 95       	ret
    234e:	80 91 80 00 	lds	r24, 0x0080
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2352:	87 7f       	andi	r24, 0xF7	; 247
    2354:	f9 cf       	rjmp	.-14     	; 0x2348 <turnOffPWM+0x22>
    2356:	84 b5       	in	r24, 0x24	; 36
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2358:	8f 77       	andi	r24, 0x7F	; 127
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <turnOffPWM+0x3a>
    235c:	84 b5       	in	r24, 0x24	; 36
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    235e:	8f 7d       	andi	r24, 0xDF	; 223
    2360:	84 bd       	out	0x24, r24	; 36
    2362:	08 95       	ret
    2364:	80 91 b0 00 	lds	r24, 0x00B0
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2368:	8f 77       	andi	r24, 0x7F	; 127
    236a:	03 c0       	rjmp	.+6      	; 0x2372 <turnOffPWM+0x4c>
    236c:	80 91 b0 00 	lds	r24, 0x00B0
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2370:	8f 7d       	andi	r24, 0xDF	; 223
    2372:	80 93 b0 00 	sts	0x00B0, r24
    2376:	08 95       	ret
    2378:	80 91 90 00 	lds	r24, 0x0090
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    237c:	8f 77       	andi	r24, 0x7F	; 127
    237e:	07 c0       	rjmp	.+14     	; 0x238e <turnOffPWM+0x68>
    2380:	80 91 90 00 	lds	r24, 0x0090
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2384:	8f 7d       	andi	r24, 0xDF	; 223
    2386:	03 c0       	rjmp	.+6      	; 0x238e <turnOffPWM+0x68>
    2388:	80 91 90 00 	lds	r24, 0x0090
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    238c:	87 7f       	andi	r24, 0xF7	; 247
    238e:	80 93 90 00 	sts	0x0090, r24
    2392:	08 95       	ret
    2394:	80 91 a0 00 	lds	r24, 0x00A0
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2398:	8f 77       	andi	r24, 0x7F	; 127
    239a:	07 c0       	rjmp	.+14     	; 0x23aa <turnOffPWM+0x84>
    239c:	80 91 a0 00 	lds	r24, 0x00A0
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    23a0:	8f 7d       	andi	r24, 0xDF	; 223
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <turnOffPWM+0x84>
    23a4:	80 91 a0 00 	lds	r24, 0x00A0
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    23a8:	87 7f       	andi	r24, 0xF7	; 247
    23aa:	80 93 a0 00 	sts	0x00A0, r24
    23ae:	08 95       	ret
    23b0:	80 91 20 01 	lds	r24, 0x0120
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    23b4:	8f 77       	andi	r24, 0x7F	; 127
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <turnOffPWM+0xa0>
    23b8:	80 91 20 01 	lds	r24, 0x0120
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    23bc:	8f 7d       	andi	r24, 0xDF	; 223
    23be:	03 c0       	rjmp	.+6      	; 0x23c6 <turnOffPWM+0xa0>
    23c0:	80 91 20 01 	lds	r24, 0x0120
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    23c4:	87 7f       	andi	r24, 0xF7	; 247
    23c6:	80 93 20 01 	sts	0x0120, r24
    23ca:	08 95       	ret

000023cc <pinMode>:
    23cc:	cf 93       	push	r28
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    23ce:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	fc 01       	movw	r30, r24
    23d4:	e0 5a       	subi	r30, 0xA0	; 160
    23d6:	fe 4f       	sbci	r31, 0xFE	; 254
    23d8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    23da:	fc 01       	movw	r30, r24
    23dc:	ea 55       	subi	r30, 0x5A	; 90
    23de:	fe 4f       	sbci	r31, 0xFE	; 254
    23e0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    23e2:	88 23       	and	r24, r24
    23e4:	49 f1       	breq	.+82     	; 0x2438 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	fc 01       	movw	r30, r24
    23ee:	ea 5f       	subi	r30, 0xFA	; 250
    23f0:	fd 4f       	sbci	r31, 0xFD	; 253
    23f2:	a5 91       	lpm	r26, Z+
    23f4:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    23f6:	84 51       	subi	r24, 0x14	; 20
    23f8:	9e 4f       	sbci	r25, 0xFE	; 254
    23fa:	fc 01       	movw	r30, r24
    23fc:	c5 91       	lpm	r28, Z+
    23fe:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    2400:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    2402:	61 11       	cpse	r22, r1
    2404:	08 c0       	rjmp	.+16     	; 0x2416 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
    2406:	f8 94       	cli
		*reg &= ~bit;
    2408:	8c 91       	ld	r24, X
    240a:	20 95       	com	r18
    240c:	82 23       	and	r24, r18
    240e:	8c 93       	st	X, r24
		*out &= ~bit;
    2410:	88 81       	ld	r24, Y
    2412:	82 23       	and	r24, r18
    2414:	0a c0       	rjmp	.+20     	; 0x242a <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2416:	62 30       	cpi	r22, 0x02	; 2
    2418:	51 f4       	brne	.+20     	; 0x242e <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
    241a:	f8 94       	cli
		*reg &= ~bit;
    241c:	8c 91       	ld	r24, X
    241e:	32 2f       	mov	r19, r18
    2420:	30 95       	com	r19
    2422:	83 23       	and	r24, r19
    2424:	8c 93       	st	X, r24
		*out |= bit;
    2426:	88 81       	ld	r24, Y
    2428:	82 2b       	or	r24, r18
    242a:	88 83       	st	Y, r24
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
    242e:	f8 94       	cli
		*reg |= bit;
    2430:	8c 91       	ld	r24, X
    2432:	82 2b       	or	r24, r18
    2434:	8c 93       	st	X, r24
		SREG = oldSREG;
    2436:	9f bf       	out	0x3f, r25	; 63
	}
}
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	08 95       	ret

0000243e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	1f 92       	push	r1
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	f9 01       	movw	r30, r18
    2452:	e6 5e       	subi	r30, 0xE6	; 230
    2454:	fe 4f       	sbci	r31, 0xFE	; 254
    2456:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2458:	f9 01       	movw	r30, r18
    245a:	e0 5a       	subi	r30, 0xA0	; 160
    245c:	fe 4f       	sbci	r31, 0xFE	; 254
    245e:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2460:	f9 01       	movw	r30, r18
    2462:	ea 55       	subi	r30, 0x5A	; 90
    2464:	fe 4f       	sbci	r31, 0xFE	; 254
    2466:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2468:	00 23       	and	r16, r16
    246a:	c1 f0       	breq	.+48     	; 0x249c <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    246c:	88 23       	and	r24, r24
    246e:	19 f0       	breq	.+6      	; 0x2476 <digitalWrite+0x38>
    2470:	69 83       	std	Y+1, r22	; 0x01
    2472:	59 df       	rcall	.-334    	; 0x2326 <turnOffPWM>
    2474:	69 81       	ldd	r22, Y+1	; 0x01
    2476:	e0 2f       	mov	r30, r16

	out = portOutputRegister(port);
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	e4 51       	subi	r30, 0x14	; 20
    2480:	fe 4f       	sbci	r31, 0xFE	; 254
    2482:	a5 91       	lpm	r26, Z+
    2484:	b4 91       	lpm	r27, Z
    2486:	9f b7       	in	r25, 0x3f	; 63

	uint8_t oldSREG = SREG;
    2488:	f8 94       	cli
	cli();
    248a:	8c 91       	ld	r24, X

	if (val == LOW) {
		*out &= ~bit;
    248c:	61 11       	cpse	r22, r1
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <digitalWrite+0x58>
    2490:	10 95       	com	r17
		*out &= ~bit;
    2492:	81 23       	and	r24, r17
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <digitalWrite+0x5a>
    2496:	81 2b       	or	r24, r17
	} else {
		*out |= bit;
    2498:	8c 93       	st	X, r24
    249a:	9f bf       	out	0x3f, r25	; 63
	}

	SREG = oldSREG;
    249c:	0f 90       	pop	r0
}
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	08 95       	ret

000024a8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    24a8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    24aa:	81 8d       	ldd	r24, Z+25	; 0x19
    24ac:	22 8d       	ldd	r18, Z+26	; 0x1a
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	80 5c       	subi	r24, 0xC0	; 192
    24b2:	9f 4f       	sbci	r25, 0xFF	; 255
    24b4:	82 1b       	sub	r24, r18
    24b6:	91 09       	sbc	r25, r1
}
    24b8:	8f 73       	andi	r24, 0x3F	; 63
    24ba:	99 27       	eor	r25, r25
    24bc:	08 95       	ret

000024be <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    24be:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    24c0:	91 8d       	ldd	r25, Z+25	; 0x19
    24c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    24c4:	98 17       	cp	r25, r24
    24c6:	31 f0       	breq	.+12     	; 0x24d4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    24c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ca:	e8 0f       	add	r30, r24
    24cc:	f1 1d       	adc	r31, r1
    24ce:	85 8d       	ldd	r24, Z+29	; 0x1d
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    24d4:	8f ef       	ldi	r24, 0xFF	; 255
    24d6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    24d8:	08 95       	ret

000024da <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    24da:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    24dc:	91 8d       	ldd	r25, Z+25	; 0x19
    24de:	82 8d       	ldd	r24, Z+26	; 0x1a
    24e0:	98 17       	cp	r25, r24
    24e2:	61 f0       	breq	.+24     	; 0x24fc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    24e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    24e6:	df 01       	movw	r26, r30
    24e8:	a8 0f       	add	r26, r24
    24ea:	b1 1d       	adc	r27, r1
    24ec:	5d 96       	adiw	r26, 0x1d	; 29
    24ee:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    24f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    24f2:	9f 5f       	subi	r25, 0xFF	; 255
    24f4:	9f 73       	andi	r25, 0x3F	; 63
    24f6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    24fc:	8f ef       	ldi	r24, 0xFF	; 255
    24fe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2500:	08 95       	ret

00002502 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2502:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2504:	84 8d       	ldd	r24, Z+28	; 0x1c
    2506:	df 01       	movw	r26, r30
    2508:	a8 0f       	add	r26, r24
    250a:	b1 1d       	adc	r27, r1
    250c:	a3 5a       	subi	r26, 0xA3	; 163
    250e:	bf 4f       	sbci	r27, 0xFF	; 255
    2510:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2512:	84 8d       	ldd	r24, Z+28	; 0x1c
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	8f 73       	andi	r24, 0x3F	; 63
    251a:	99 27       	eor	r25, r25
    251c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    251e:	a6 89       	ldd	r26, Z+22	; 0x16
    2520:	b7 89       	ldd	r27, Z+23	; 0x17
    2522:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2524:	a0 89       	ldd	r26, Z+16	; 0x10
    2526:	b1 89       	ldd	r27, Z+17	; 0x11
    2528:	8c 91       	ld	r24, X
    252a:	80 64       	ori	r24, 0x40	; 64
    252c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    252e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2530:	84 8d       	ldd	r24, Z+28	; 0x1c
    2532:	98 13       	cpse	r25, r24
    2534:	06 c0       	rjmp	.+12     	; 0x2542 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2536:	02 88       	ldd	r0, Z+18	; 0x12
    2538:	f3 89       	ldd	r31, Z+19	; 0x13
    253a:	e0 2d       	mov	r30, r0
    253c:	80 81       	ld	r24, Z
    253e:	8f 7d       	andi	r24, 0xDF	; 223
    2540:	80 83       	st	Z, r24
    2542:	08 95       	ret

00002544 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    254a:	88 8d       	ldd	r24, Y+24	; 0x18
    254c:	88 23       	and	r24, r24
    254e:	c1 f0       	breq	.+48     	; 0x2580 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2550:	ea 89       	ldd	r30, Y+18	; 0x12
    2552:	fb 89       	ldd	r31, Y+19	; 0x13
    2554:	80 81       	ld	r24, Z
    2556:	85 fd       	sbrc	r24, 5
    2558:	05 c0       	rjmp	.+10     	; 0x2564 <_ZN14HardwareSerial5flushEv+0x20>
    255a:	a8 89       	ldd	r26, Y+16	; 0x10
    255c:	b9 89       	ldd	r27, Y+17	; 0x11
    255e:	8c 91       	ld	r24, X
    2560:	86 fd       	sbrc	r24, 6
    2562:	0e c0       	rjmp	.+28     	; 0x2580 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	07 fc       	sbrc	r0, 7
    2568:	f5 cf       	rjmp	.-22     	; 0x2554 <_ZN14HardwareSerial5flushEv+0x10>
    256a:	80 81       	ld	r24, Z
    256c:	85 ff       	sbrs	r24, 5
    256e:	f2 cf       	rjmp	.-28     	; 0x2554 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2570:	a8 89       	ldd	r26, Y+16	; 0x10
    2572:	b9 89       	ldd	r27, Y+17	; 0x11
    2574:	8c 91       	ld	r24, X
    2576:	85 ff       	sbrs	r24, 5
    2578:	ed cf       	rjmp	.-38     	; 0x2554 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    257a:	ce 01       	movw	r24, r28
    257c:	c2 df       	rcall	.-124    	; 0x2502 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    257e:	e8 cf       	rjmp	.-48     	; 0x2550 <_ZN14HardwareSerial5flushEv+0xc>
    2580:	df 91       	pop	r29
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2582:	cf 91       	pop	r28
    2584:	08 95       	ret

00002586 <_ZN14HardwareSerial5writeEh>:
    2586:	cf 92       	push	r12

size_t HardwareSerial::write(uint8_t c)
{
    2588:	df 92       	push	r13
    258a:	ff 92       	push	r15
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	1f 92       	push	r1
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    259c:	dc 01       	movw	r26, r24
    259e:	5b 96       	adiw	r26, 0x1b	; 27
    25a0:	9c 91       	ld	r25, X
    25a2:	5b 97       	sbiw	r26, 0x1b	; 27
    25a4:	5c 96       	adiw	r26, 0x1c	; 28
    25a6:	8c 91       	ld	r24, X
    25a8:	5c 97       	sbiw	r26, 0x1c	; 28
    25aa:	98 13       	cpse	r25, r24
    25ac:	07 c0       	rjmp	.+14     	; 0x25bc <_ZN14HardwareSerial5writeEh+0x36>
    25ae:	50 96       	adiw	r26, 0x10	; 16
    25b0:	ed 91       	ld	r30, X+
    25b2:	fc 91       	ld	r31, X
    25b4:	51 97       	sbiw	r26, 0x11	; 17
    25b6:	80 81       	ld	r24, Z
    25b8:	85 fd       	sbrc	r24, 5
    25ba:	31 c0       	rjmp	.+98     	; 0x261e <_ZN14HardwareSerial5writeEh+0x98>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    25bc:	f6 01       	movw	r30, r12
    25be:	03 8d       	ldd	r16, Z+27	; 0x1b
    25c0:	10 e0       	ldi	r17, 0x00	; 0
    25c2:	0f 5f       	subi	r16, 0xFF	; 255
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	0f 73       	andi	r16, 0x3F	; 63
    25c8:	11 27       	eor	r17, r17
    25ca:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    25cc:	f6 01       	movw	r30, r12
    25ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    25d0:	f8 12       	cpse	r15, r24
    25d2:	10 c0       	rjmp	.+32     	; 0x25f4 <_ZN14HardwareSerial5writeEh+0x6e>
    if (bit_is_clear(SREG, SREG_I)) {
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	07 fc       	sbrc	r0, 7
    25d8:	f9 cf       	rjmp	.-14     	; 0x25cc <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    25da:	d6 01       	movw	r26, r12
    25dc:	50 96       	adiw	r26, 0x10	; 16
    25de:	ed 91       	ld	r30, X+
    25e0:	fc 91       	ld	r31, X
    25e2:	51 97       	sbiw	r26, 0x11	; 17
    25e4:	80 81       	ld	r24, Z
    25e6:	85 ff       	sbrs	r24, 5
    25e8:	f1 cf       	rjmp	.-30     	; 0x25cc <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
    25ea:	c6 01       	movw	r24, r12
    25ec:	69 83       	std	Y+1, r22	; 0x01
    25ee:	89 df       	rcall	.-238    	; 0x2502 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    25f0:	69 81       	ldd	r22, Y+1	; 0x01
    25f2:	ec cf       	rjmp	.-40     	; 0x25cc <_ZN14HardwareSerial5writeEh+0x46>
    25f4:	83 8d       	ldd	r24, Z+27	; 0x1b
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    25f6:	e8 0f       	add	r30, r24
    25f8:	f1 1d       	adc	r31, r1
    25fa:	e3 5a       	subi	r30, 0xA3	; 163
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	60 83       	st	Z, r22
    2600:	d6 01       	movw	r26, r12
  _tx_buffer_head = i;
    2602:	5b 96       	adiw	r26, 0x1b	; 27
    2604:	0c 93       	st	X, r16
    2606:	5b 97       	sbiw	r26, 0x1b	; 27
    2608:	52 96       	adiw	r26, 0x12	; 18
	
  sbi(*_ucsrb, UDRIE0);
    260a:	ed 91       	ld	r30, X+
    260c:	fc 91       	ld	r31, X
    260e:	53 97       	sbiw	r26, 0x13	; 19
    2610:	80 81       	ld	r24, Z
    2612:	80 62       	ori	r24, 0x20	; 32
    2614:	80 83       	st	Z, r24
    2616:	81 e0       	ldi	r24, 0x01	; 1
  _written = true;
    2618:	58 96       	adiw	r26, 0x18	; 24
    261a:	8c 93       	st	X, r24
    261c:	0d c0       	rjmp	.+26     	; 0x2638 <_ZN14HardwareSerial5writeEh+0xb2>
    261e:	d6 01       	movw	r26, r12
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2620:	56 96       	adiw	r26, 0x16	; 22
    2622:	ed 91       	ld	r30, X+
    2624:	fc 91       	ld	r31, X
    2626:	57 97       	sbiw	r26, 0x17	; 23
    2628:	60 83       	st	Z, r22
    262a:	50 96       	adiw	r26, 0x10	; 16
    sbi(*_ucsra, TXC0);
    262c:	ed 91       	ld	r30, X+
    262e:	fc 91       	ld	r31, X
    2630:	51 97       	sbiw	r26, 0x11	; 17
    2632:	80 81       	ld	r24, Z
    2634:	80 64       	ori	r24, 0x40	; 64
    2636:	80 83       	st	Z, r24
    2638:	81 e0       	ldi	r24, 0x01	; 1
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0f 90       	pop	r0
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	df 90       	pop	r13
    264a:	cf 90       	pop	r12
    264c:	08 95       	ret

0000264e <_ZN14HardwareSerial5beginEmh>:
    264e:	bf 92       	push	r11
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2650:	cf 92       	push	r12
    2652:	df 92       	push	r13
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	ec 01       	movw	r28, r24
    265e:	6a 01       	movw	r12, r20
    2660:	7b 01       	movw	r14, r22
    2662:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2664:	e8 89       	ldd	r30, Y+16	; 0x10
    2666:	f9 89       	ldd	r31, Y+17	; 0x11
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    266c:	41 15       	cp	r20, r1
    266e:	81 ee       	ldi	r24, 0xE1	; 225
    2670:	58 07       	cpc	r21, r24
    2672:	61 05       	cpc	r22, r1
    2674:	71 05       	cpc	r23, r1
    2676:	99 f0       	breq	.+38     	; 0x269e <_ZN14HardwareSerial5beginEmh+0x50>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	79 e0       	ldi	r23, 0x09	; 9
    267c:	8d e3       	ldi	r24, 0x3D	; 61
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a7 01       	movw	r20, r14
    2682:	96 01       	movw	r18, r12
    2684:	37 d1       	rcall	.+622    	; 0x28f4 <__udivmodsi4>
    2686:	21 50       	subi	r18, 0x01	; 1
    2688:	31 09       	sbc	r19, r1
    268a:	41 09       	sbc	r20, r1
    268c:	51 09       	sbc	r21, r1
    268e:	56 95       	lsr	r21
    2690:	47 95       	ror	r20
    2692:	37 95       	ror	r19
    2694:	27 95       	ror	r18
    2696:	21 15       	cp	r18, r1
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2698:	80 e1       	ldi	r24, 0x10	; 16
    269a:	38 07       	cpc	r19, r24
    269c:	90 f0       	brcs	.+36     	; 0x26c2 <_ZN14HardwareSerial5beginEmh+0x74>
    269e:	e8 89       	ldd	r30, Y+16	; 0x10
  {
    *_ucsra = 0;
    26a0:	f9 89       	ldd	r31, Y+17	; 0x11
    26a2:	10 82       	st	Z, r1
    26a4:	60 e8       	ldi	r22, 0x80	; 128
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    26a6:	74 e8       	ldi	r23, 0x84	; 132
    26a8:	8e e1       	ldi	r24, 0x1E	; 30
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a7 01       	movw	r20, r14
    26ae:	96 01       	movw	r18, r12
    26b0:	21 d1       	rcall	.+578    	; 0x28f4 <__udivmodsi4>
    26b2:	21 50       	subi	r18, 0x01	; 1
    26b4:	31 09       	sbc	r19, r1
    26b6:	41 09       	sbc	r20, r1
    26b8:	51 09       	sbc	r21, r1
    26ba:	56 95       	lsr	r21
    26bc:	47 95       	ror	r20
    26be:	37 95       	ror	r19
    26c0:	27 95       	ror	r18
    26c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    26c4:	fd 85       	ldd	r31, Y+13	; 0x0d
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    26c6:	30 83       	st	Z, r19
    26c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    26ca:	ff 85       	ldd	r31, Y+15	; 0x0f
  *_ubrrl = baud_setting;
    26cc:	20 83       	st	Z, r18
    26ce:	18 8e       	std	Y+24, r1	; 0x18
    26d0:	ec 89       	ldd	r30, Y+20	; 0x14

  _written = false;
    26d2:	fd 89       	ldd	r31, Y+21	; 0x15

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    26d4:	b0 82       	st	Z, r11
    26d6:	ea 89       	ldd	r30, Y+18	; 0x12
    26d8:	fb 89       	ldd	r31, Y+19	; 0x13
  
  sbi(*_ucsrb, RXEN0);
    26da:	80 81       	ld	r24, Z
    26dc:	80 61       	ori	r24, 0x10	; 16
    26de:	80 83       	st	Z, r24
    26e0:	ea 89       	ldd	r30, Y+18	; 0x12
    26e2:	fb 89       	ldd	r31, Y+19	; 0x13
  sbi(*_ucsrb, TXEN0);
    26e4:	80 81       	ld	r24, Z
    26e6:	88 60       	ori	r24, 0x08	; 8
    26e8:	80 83       	st	Z, r24
    26ea:	ea 89       	ldd	r30, Y+18	; 0x12
    26ec:	fb 89       	ldd	r31, Y+19	; 0x13
  sbi(*_ucsrb, RXCIE0);
    26ee:	80 81       	ld	r24, Z
    26f0:	80 68       	ori	r24, 0x80	; 128
    26f2:	80 83       	st	Z, r24
    26f4:	ea 89       	ldd	r30, Y+18	; 0x12
    26f6:	fb 89       	ldd	r31, Y+19	; 0x13
  cbi(*_ucsrb, UDRIE0);
    26f8:	80 81       	ld	r24, Z
    26fa:	8f 7d       	andi	r24, 0xDF	; 223
    26fc:	80 83       	st	Z, r24
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
}
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
    270c:	08 95       	ret

0000270e <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    270e:	1f 92       	push	r1
    2710:	0f 92       	push	r0
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	0f 92       	push	r0
    2716:	11 24       	eor	r1, r1
    2718:	0b b6       	in	r0, 0x3b	; 59
    271a:	0f 92       	push	r0
    271c:	2f 93       	push	r18
    271e:	8f 93       	push	r24
    2720:	9f 93       	push	r25
    2722:	ef 93       	push	r30
    2724:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2726:	e0 91 9c 0d 	lds	r30, 0x0D9C
    272a:	f0 91 9d 0d 	lds	r31, 0x0D9D
    272e:	80 81       	ld	r24, Z
    2730:	e0 91 a2 0d 	lds	r30, 0x0DA2
    2734:	f0 91 a3 0d 	lds	r31, 0x0DA3
    2738:	82 fd       	sbrc	r24, 2
    273a:	12 c0       	rjmp	.+36     	; 0x2760 <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    273c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    273e:	80 91 a5 0d 	lds	r24, 0x0DA5
    2742:	8f 5f       	subi	r24, 0xFF	; 255
    2744:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2746:	20 91 a6 0d 	lds	r18, 0x0DA6
    274a:	82 17       	cp	r24, r18
    274c:	51 f0       	breq	.+20     	; 0x2762 <__vector_51+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    274e:	e0 91 a5 0d 	lds	r30, 0x0DA5
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	e4 57       	subi	r30, 0x74	; 116
    2756:	f2 4f       	sbci	r31, 0xF2	; 242
    2758:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    275a:	80 93 a5 0d 	sts	0x0DA5, r24
    275e:	01 c0       	rjmp	.+2      	; 0x2762 <__vector_51+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2760:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    2762:	ff 91       	pop	r31
    2764:	ef 91       	pop	r30
    2766:	9f 91       	pop	r25
    2768:	8f 91       	pop	r24
    276a:	2f 91       	pop	r18
    276c:	0f 90       	pop	r0
    276e:	0b be       	out	0x3b, r0	; 59
    2770:	0f 90       	pop	r0
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	0f 90       	pop	r0
    2776:	1f 90       	pop	r1
    2778:	18 95       	reti

0000277a <__vector_52>:

ISR(USART2_UDRE_vect)
{
    277a:	1f 92       	push	r1
    277c:	0f 92       	push	r0
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	0f 92       	push	r0
    2782:	11 24       	eor	r1, r1
    2784:	0b b6       	in	r0, 0x3b	; 59
    2786:	0f 92       	push	r0
    2788:	2f 93       	push	r18
    278a:	3f 93       	push	r19
    278c:	4f 93       	push	r20
    278e:	5f 93       	push	r21
    2790:	6f 93       	push	r22
    2792:	7f 93       	push	r23
    2794:	8f 93       	push	r24
    2796:	9f 93       	push	r25
    2798:	af 93       	push	r26
    279a:	bf 93       	push	r27
    279c:	ef 93       	push	r30
    279e:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    27a0:	8c e8       	ldi	r24, 0x8C	; 140
    27a2:	9d e0       	ldi	r25, 0x0D	; 13
    27a4:	ae de       	rcall	.-676    	; 0x2502 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    27a6:	ff 91       	pop	r31
}
    27a8:	ef 91       	pop	r30
    27aa:	bf 91       	pop	r27
    27ac:	af 91       	pop	r26
    27ae:	9f 91       	pop	r25
    27b0:	8f 91       	pop	r24
    27b2:	7f 91       	pop	r23
    27b4:	6f 91       	pop	r22
    27b6:	5f 91       	pop	r21
    27b8:	4f 91       	pop	r20
    27ba:	3f 91       	pop	r19
    27bc:	2f 91       	pop	r18
    27be:	0f 90       	pop	r0
    27c0:	0b be       	out	0x3b, r0	; 59
    27c2:	0f 90       	pop	r0
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	0f 90       	pop	r0
    27c8:	1f 90       	pop	r1
    27ca:	18 95       	reti

000027cc <_GLOBAL__sub_I___vector_51>:
    27cc:	10 92 8f 0d 	sts	0x0D8F, r1
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    27d0:	10 92 8e 0d 	sts	0x0D8E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    27d4:	88 ee       	ldi	r24, 0xE8	; 232
    27d6:	93 e0       	ldi	r25, 0x03	; 3
    27d8:	a0 e0       	ldi	r26, 0x00	; 0
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	80 93 90 0d 	sts	0x0D90, r24
    27e0:	90 93 91 0d 	sts	0x0D91, r25
    27e4:	a0 93 92 0d 	sts	0x0D92, r26
    27e8:	b0 93 93 0d 	sts	0x0D93, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    27ec:	87 e8       	ldi	r24, 0x87	; 135
    27ee:	92 e0       	ldi	r25, 0x02	; 2
    27f0:	90 93 8d 0d 	sts	0x0D8D, r25
    27f4:	80 93 8c 0d 	sts	0x0D8C, r24
    27f8:	85 ed       	ldi	r24, 0xD5	; 213
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	90 93 99 0d 	sts	0x0D99, r25
    2800:	80 93 98 0d 	sts	0x0D98, r24
    2804:	84 ed       	ldi	r24, 0xD4	; 212
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	90 93 9b 0d 	sts	0x0D9B, r25
    280c:	80 93 9a 0d 	sts	0x0D9A, r24
    2810:	80 ed       	ldi	r24, 0xD0	; 208
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	90 93 9d 0d 	sts	0x0D9D, r25
    2818:	80 93 9c 0d 	sts	0x0D9C, r24
    281c:	81 ed       	ldi	r24, 0xD1	; 209
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	90 93 9f 0d 	sts	0x0D9F, r25
    2824:	80 93 9e 0d 	sts	0x0D9E, r24
    2828:	82 ed       	ldi	r24, 0xD2	; 210
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	90 93 a1 0d 	sts	0x0DA1, r25
    2830:	80 93 a0 0d 	sts	0x0DA0, r24
    2834:	86 ed       	ldi	r24, 0xD6	; 214
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	90 93 a3 0d 	sts	0x0DA3, r25
    283c:	80 93 a2 0d 	sts	0x0DA2, r24
    2840:	10 92 a5 0d 	sts	0x0DA5, r1
    2844:	10 92 a6 0d 	sts	0x0DA6, r1
    2848:	10 92 a7 0d 	sts	0x0DA7, r1
    284c:	10 92 a8 0d 	sts	0x0DA8, r1
    2850:	08 95       	ret

00002852 <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    2852:	7c c0       	rjmp	.+248    	; 0x294c <malloc>

00002854 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2854:	cf 92       	push	r12
    2856:	df 92       	push	r13
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	6c 01       	movw	r12, r24
    2866:	7a 01       	movw	r14, r20
    2868:	eb 01       	movw	r28, r22
    286a:	e6 0e       	add	r14, r22
    286c:	f7 1e       	adc	r15, r23
  size_t n = 0;
    286e:	00 e0       	ldi	r16, 0x00	; 0
    2870:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    2872:	ce 15       	cp	r28, r14
    2874:	df 05       	cpc	r29, r15
    2876:	61 f0       	breq	.+24     	; 0x2890 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
    2878:	69 91       	ld	r22, Y+
    287a:	d6 01       	movw	r26, r12
    287c:	ed 91       	ld	r30, X+
    287e:	fc 91       	ld	r31, X
    2880:	01 90       	ld	r0, Z+
    2882:	f0 81       	ld	r31, Z
    2884:	e0 2d       	mov	r30, r0
    2886:	c6 01       	movw	r24, r12
    2888:	19 95       	eicall
    288a:	08 0f       	add	r16, r24
    288c:	19 1f       	adc	r17, r25
    288e:	f1 cf       	rjmp	.-30     	; 0x2872 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
    2890:	c8 01       	movw	r24, r16
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	08 95       	ret

000028a4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    28a4:	08 95       	ret

000028a6 <__udivmodhi4>:
    28a6:	aa 1b       	sub	r26, r26
    28a8:	bb 1b       	sub	r27, r27
    28aa:	51 e1       	ldi	r21, 0x11	; 17
    28ac:	07 c0       	rjmp	.+14     	; 0x28bc <__udivmodhi4_ep>

000028ae <__udivmodhi4_loop>:
    28ae:	aa 1f       	adc	r26, r26
    28b0:	bb 1f       	adc	r27, r27
    28b2:	a6 17       	cp	r26, r22
    28b4:	b7 07       	cpc	r27, r23
    28b6:	10 f0       	brcs	.+4      	; 0x28bc <__udivmodhi4_ep>
    28b8:	a6 1b       	sub	r26, r22
    28ba:	b7 0b       	sbc	r27, r23

000028bc <__udivmodhi4_ep>:
    28bc:	88 1f       	adc	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	5a 95       	dec	r21
    28c2:	a9 f7       	brne	.-22     	; 0x28ae <__udivmodhi4_loop>
    28c4:	80 95       	com	r24
    28c6:	90 95       	com	r25
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	08 95       	ret

000028ce <__divmodhi4>:
    28ce:	97 fb       	bst	r25, 7
    28d0:	07 2e       	mov	r0, r23
    28d2:	16 f4       	brtc	.+4      	; 0x28d8 <__divmodhi4+0xa>
    28d4:	00 94       	com	r0
    28d6:	06 d0       	rcall	.+12     	; 0x28e4 <__divmodhi4_neg1>
    28d8:	77 fd       	sbrc	r23, 7
    28da:	08 d0       	rcall	.+16     	; 0x28ec <__divmodhi4_neg2>
    28dc:	e4 df       	rcall	.-56     	; 0x28a6 <__udivmodhi4>
    28de:	07 fc       	sbrc	r0, 7
    28e0:	05 d0       	rcall	.+10     	; 0x28ec <__divmodhi4_neg2>
    28e2:	3e f4       	brtc	.+14     	; 0x28f2 <__divmodhi4_exit>

000028e4 <__divmodhi4_neg1>:
    28e4:	90 95       	com	r25
    28e6:	81 95       	neg	r24
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	08 95       	ret

000028ec <__divmodhi4_neg2>:
    28ec:	70 95       	com	r23
    28ee:	61 95       	neg	r22
    28f0:	7f 4f       	sbci	r23, 0xFF	; 255

000028f2 <__divmodhi4_exit>:
    28f2:	08 95       	ret

000028f4 <__udivmodsi4>:
    28f4:	a1 e2       	ldi	r26, 0x21	; 33
    28f6:	1a 2e       	mov	r1, r26
    28f8:	aa 1b       	sub	r26, r26
    28fa:	bb 1b       	sub	r27, r27
    28fc:	fd 01       	movw	r30, r26
    28fe:	0d c0       	rjmp	.+26     	; 0x291a <__udivmodsi4_ep>

00002900 <__udivmodsi4_loop>:
    2900:	aa 1f       	adc	r26, r26
    2902:	bb 1f       	adc	r27, r27
    2904:	ee 1f       	adc	r30, r30
    2906:	ff 1f       	adc	r31, r31
    2908:	a2 17       	cp	r26, r18
    290a:	b3 07       	cpc	r27, r19
    290c:	e4 07       	cpc	r30, r20
    290e:	f5 07       	cpc	r31, r21
    2910:	20 f0       	brcs	.+8      	; 0x291a <__udivmodsi4_ep>
    2912:	a2 1b       	sub	r26, r18
    2914:	b3 0b       	sbc	r27, r19
    2916:	e4 0b       	sbc	r30, r20
    2918:	f5 0b       	sbc	r31, r21

0000291a <__udivmodsi4_ep>:
    291a:	66 1f       	adc	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	1a 94       	dec	r1
    2924:	69 f7       	brne	.-38     	; 0x2900 <__udivmodsi4_loop>
    2926:	60 95       	com	r22
    2928:	70 95       	com	r23
    292a:	80 95       	com	r24
    292c:	90 95       	com	r25
    292e:	9b 01       	movw	r18, r22
    2930:	ac 01       	movw	r20, r24
    2932:	bd 01       	movw	r22, r26
    2934:	cf 01       	movw	r24, r30
    2936:	08 95       	ret

00002938 <__tablejump2__>:
    2938:	ee 0f       	add	r30, r30
    293a:	ff 1f       	adc	r31, r31

0000293c <__tablejump__>:
    293c:	05 90       	lpm	r0, Z+
    293e:	f4 91       	lpm	r31, Z
    2940:	e0 2d       	mov	r30, r0
    2942:	19 94       	eijmp

00002944 <__tablejump_elpm__>:
    2944:	07 90       	elpm	r0, Z+
    2946:	f6 91       	elpm	r31, Z
    2948:	e0 2d       	mov	r30, r0
    294a:	19 94       	eijmp

0000294c <malloc>:
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	82 30       	cpi	r24, 0x02	; 2
    2952:	91 05       	cpc	r25, r1
    2954:	10 f4       	brcc	.+4      	; 0x295a <malloc+0xe>
    2956:	82 e0       	ldi	r24, 0x02	; 2
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	e0 91 2b 0e 	lds	r30, 0x0E2B
    295e:	f0 91 2c 0e 	lds	r31, 0x0E2C
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	30 97       	sbiw	r30, 0x00	; 0
    296c:	39 f1       	breq	.+78     	; 0x29bc <malloc+0x70>
    296e:	40 81       	ld	r20, Z
    2970:	51 81       	ldd	r21, Z+1	; 0x01
    2972:	48 17       	cp	r20, r24
    2974:	59 07       	cpc	r21, r25
    2976:	b8 f0       	brcs	.+46     	; 0x29a6 <malloc+0x5a>
    2978:	48 17       	cp	r20, r24
    297a:	59 07       	cpc	r21, r25
    297c:	71 f4       	brne	.+28     	; 0x299a <malloc+0x4e>
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	10 97       	sbiw	r26, 0x00	; 0
    2984:	29 f0       	breq	.+10     	; 0x2990 <malloc+0x44>
    2986:	13 96       	adiw	r26, 0x03	; 3
    2988:	9c 93       	st	X, r25
    298a:	8e 93       	st	-X, r24
    298c:	12 97       	sbiw	r26, 0x02	; 2
    298e:	2c c0       	rjmp	.+88     	; 0x29e8 <malloc+0x9c>
    2990:	90 93 2c 0e 	sts	0x0E2C, r25
    2994:	80 93 2b 0e 	sts	0x0E2B, r24
    2998:	27 c0       	rjmp	.+78     	; 0x29e8 <malloc+0x9c>
    299a:	21 15       	cp	r18, r1
    299c:	31 05       	cpc	r19, r1
    299e:	31 f0       	breq	.+12     	; 0x29ac <malloc+0x60>
    29a0:	42 17       	cp	r20, r18
    29a2:	53 07       	cpc	r21, r19
    29a4:	18 f0       	brcs	.+6      	; 0x29ac <malloc+0x60>
    29a6:	a9 01       	movw	r20, r18
    29a8:	db 01       	movw	r26, r22
    29aa:	01 c0       	rjmp	.+2      	; 0x29ae <malloc+0x62>
    29ac:	ef 01       	movw	r28, r30
    29ae:	9a 01       	movw	r18, r20
    29b0:	bd 01       	movw	r22, r26
    29b2:	df 01       	movw	r26, r30
    29b4:	02 80       	ldd	r0, Z+2	; 0x02
    29b6:	f3 81       	ldd	r31, Z+3	; 0x03
    29b8:	e0 2d       	mov	r30, r0
    29ba:	d7 cf       	rjmp	.-82     	; 0x296a <malloc+0x1e>
    29bc:	21 15       	cp	r18, r1
    29be:	31 05       	cpc	r19, r1
    29c0:	f9 f0       	breq	.+62     	; 0x2a00 <malloc+0xb4>
    29c2:	28 1b       	sub	r18, r24
    29c4:	39 0b       	sbc	r19, r25
    29c6:	24 30       	cpi	r18, 0x04	; 4
    29c8:	31 05       	cpc	r19, r1
    29ca:	80 f4       	brcc	.+32     	; 0x29ec <malloc+0xa0>
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	9b 81       	ldd	r25, Y+3	; 0x03
    29d0:	61 15       	cp	r22, r1
    29d2:	71 05       	cpc	r23, r1
    29d4:	21 f0       	breq	.+8      	; 0x29de <malloc+0x92>
    29d6:	fb 01       	movw	r30, r22
    29d8:	93 83       	std	Z+3, r25	; 0x03
    29da:	82 83       	std	Z+2, r24	; 0x02
    29dc:	04 c0       	rjmp	.+8      	; 0x29e6 <malloc+0x9a>
    29de:	90 93 2c 0e 	sts	0x0E2C, r25
    29e2:	80 93 2b 0e 	sts	0x0E2B, r24
    29e6:	fe 01       	movw	r30, r28
    29e8:	32 96       	adiw	r30, 0x02	; 2
    29ea:	44 c0       	rjmp	.+136    	; 0x2a74 <malloc+0x128>
    29ec:	fe 01       	movw	r30, r28
    29ee:	e2 0f       	add	r30, r18
    29f0:	f3 1f       	adc	r31, r19
    29f2:	81 93       	st	Z+, r24
    29f4:	91 93       	st	Z+, r25
    29f6:	22 50       	subi	r18, 0x02	; 2
    29f8:	31 09       	sbc	r19, r1
    29fa:	39 83       	std	Y+1, r19	; 0x01
    29fc:	28 83       	st	Y, r18
    29fe:	3a c0       	rjmp	.+116    	; 0x2a74 <malloc+0x128>
    2a00:	20 91 29 0e 	lds	r18, 0x0E29
    2a04:	30 91 2a 0e 	lds	r19, 0x0E2A
    2a08:	23 2b       	or	r18, r19
    2a0a:	41 f4       	brne	.+16     	; 0x2a1c <malloc+0xd0>
    2a0c:	20 91 02 02 	lds	r18, 0x0202
    2a10:	30 91 03 02 	lds	r19, 0x0203
    2a14:	30 93 2a 0e 	sts	0x0E2A, r19
    2a18:	20 93 29 0e 	sts	0x0E29, r18
    2a1c:	20 91 00 02 	lds	r18, 0x0200
    2a20:	30 91 01 02 	lds	r19, 0x0201
    2a24:	21 15       	cp	r18, r1
    2a26:	31 05       	cpc	r19, r1
    2a28:	41 f4       	brne	.+16     	; 0x2a3a <malloc+0xee>
    2a2a:	2d b7       	in	r18, 0x3d	; 61
    2a2c:	3e b7       	in	r19, 0x3e	; 62
    2a2e:	40 91 04 02 	lds	r20, 0x0204
    2a32:	50 91 05 02 	lds	r21, 0x0205
    2a36:	24 1b       	sub	r18, r20
    2a38:	35 0b       	sbc	r19, r21
    2a3a:	e0 91 29 0e 	lds	r30, 0x0E29
    2a3e:	f0 91 2a 0e 	lds	r31, 0x0E2A
    2a42:	e2 17       	cp	r30, r18
    2a44:	f3 07       	cpc	r31, r19
    2a46:	a0 f4       	brcc	.+40     	; 0x2a70 <malloc+0x124>
    2a48:	2e 1b       	sub	r18, r30
    2a4a:	3f 0b       	sbc	r19, r31
    2a4c:	28 17       	cp	r18, r24
    2a4e:	39 07       	cpc	r19, r25
    2a50:	78 f0       	brcs	.+30     	; 0x2a70 <malloc+0x124>
    2a52:	ac 01       	movw	r20, r24
    2a54:	4e 5f       	subi	r20, 0xFE	; 254
    2a56:	5f 4f       	sbci	r21, 0xFF	; 255
    2a58:	24 17       	cp	r18, r20
    2a5a:	35 07       	cpc	r19, r21
    2a5c:	48 f0       	brcs	.+18     	; 0x2a70 <malloc+0x124>
    2a5e:	4e 0f       	add	r20, r30
    2a60:	5f 1f       	adc	r21, r31
    2a62:	50 93 2a 0e 	sts	0x0E2A, r21
    2a66:	40 93 29 0e 	sts	0x0E29, r20
    2a6a:	81 93       	st	Z+, r24
    2a6c:	91 93       	st	Z+, r25
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <malloc+0x128>
    2a70:	e0 e0       	ldi	r30, 0x00	; 0
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	cf 01       	movw	r24, r30
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	08 95       	ret

00002a7c <free>:
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <free+0xa>
    2a84:	87 c0       	rjmp	.+270    	; 0x2b94 <free+0x118>
    2a86:	fc 01       	movw	r30, r24
    2a88:	32 97       	sbiw	r30, 0x02	; 2
    2a8a:	13 82       	std	Z+3, r1	; 0x03
    2a8c:	12 82       	std	Z+2, r1	; 0x02
    2a8e:	c0 91 2b 0e 	lds	r28, 0x0E2B
    2a92:	d0 91 2c 0e 	lds	r29, 0x0E2C
    2a96:	20 97       	sbiw	r28, 0x00	; 0
    2a98:	81 f4       	brne	.+32     	; 0x2aba <free+0x3e>
    2a9a:	20 81       	ld	r18, Z
    2a9c:	31 81       	ldd	r19, Z+1	; 0x01
    2a9e:	28 0f       	add	r18, r24
    2aa0:	39 1f       	adc	r19, r25
    2aa2:	80 91 29 0e 	lds	r24, 0x0E29
    2aa6:	90 91 2a 0e 	lds	r25, 0x0E2A
    2aaa:	82 17       	cp	r24, r18
    2aac:	93 07       	cpc	r25, r19
    2aae:	79 f5       	brne	.+94     	; 0x2b0e <free+0x92>
    2ab0:	f0 93 2a 0e 	sts	0x0E2A, r31
    2ab4:	e0 93 29 0e 	sts	0x0E29, r30
    2ab8:	6d c0       	rjmp	.+218    	; 0x2b94 <free+0x118>
    2aba:	de 01       	movw	r26, r28
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	ae 17       	cp	r26, r30
    2ac2:	bf 07       	cpc	r27, r31
    2ac4:	50 f4       	brcc	.+20     	; 0x2ada <free+0x5e>
    2ac6:	12 96       	adiw	r26, 0x02	; 2
    2ac8:	4d 91       	ld	r20, X+
    2aca:	5c 91       	ld	r21, X
    2acc:	13 97       	sbiw	r26, 0x03	; 3
    2ace:	9d 01       	movw	r18, r26
    2ad0:	41 15       	cp	r20, r1
    2ad2:	51 05       	cpc	r21, r1
    2ad4:	09 f1       	breq	.+66     	; 0x2b18 <free+0x9c>
    2ad6:	da 01       	movw	r26, r20
    2ad8:	f3 cf       	rjmp	.-26     	; 0x2ac0 <free+0x44>
    2ada:	b3 83       	std	Z+3, r27	; 0x03
    2adc:	a2 83       	std	Z+2, r26	; 0x02
    2ade:	40 81       	ld	r20, Z
    2ae0:	51 81       	ldd	r21, Z+1	; 0x01
    2ae2:	84 0f       	add	r24, r20
    2ae4:	95 1f       	adc	r25, r21
    2ae6:	8a 17       	cp	r24, r26
    2ae8:	9b 07       	cpc	r25, r27
    2aea:	71 f4       	brne	.+28     	; 0x2b08 <free+0x8c>
    2aec:	8d 91       	ld	r24, X+
    2aee:	9c 91       	ld	r25, X
    2af0:	11 97       	sbiw	r26, 0x01	; 1
    2af2:	84 0f       	add	r24, r20
    2af4:	95 1f       	adc	r25, r21
    2af6:	02 96       	adiw	r24, 0x02	; 2
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	80 83       	st	Z, r24
    2afc:	12 96       	adiw	r26, 0x02	; 2
    2afe:	8d 91       	ld	r24, X+
    2b00:	9c 91       	ld	r25, X
    2b02:	13 97       	sbiw	r26, 0x03	; 3
    2b04:	93 83       	std	Z+3, r25	; 0x03
    2b06:	82 83       	std	Z+2, r24	; 0x02
    2b08:	21 15       	cp	r18, r1
    2b0a:	31 05       	cpc	r19, r1
    2b0c:	29 f4       	brne	.+10     	; 0x2b18 <free+0x9c>
    2b0e:	f0 93 2c 0e 	sts	0x0E2C, r31
    2b12:	e0 93 2b 0e 	sts	0x0E2B, r30
    2b16:	3e c0       	rjmp	.+124    	; 0x2b94 <free+0x118>
    2b18:	d9 01       	movw	r26, r18
    2b1a:	13 96       	adiw	r26, 0x03	; 3
    2b1c:	fc 93       	st	X, r31
    2b1e:	ee 93       	st	-X, r30
    2b20:	12 97       	sbiw	r26, 0x02	; 2
    2b22:	4d 91       	ld	r20, X+
    2b24:	5d 91       	ld	r21, X+
    2b26:	a4 0f       	add	r26, r20
    2b28:	b5 1f       	adc	r27, r21
    2b2a:	ea 17       	cp	r30, r26
    2b2c:	fb 07       	cpc	r31, r27
    2b2e:	79 f4       	brne	.+30     	; 0x2b4e <free+0xd2>
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	84 0f       	add	r24, r20
    2b36:	95 1f       	adc	r25, r21
    2b38:	02 96       	adiw	r24, 0x02	; 2
    2b3a:	d9 01       	movw	r26, r18
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	9c 93       	st	X, r25
    2b40:	8e 93       	st	-X, r24
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	13 96       	adiw	r26, 0x03	; 3
    2b48:	9c 93       	st	X, r25
    2b4a:	8e 93       	st	-X, r24
    2b4c:	12 97       	sbiw	r26, 0x02	; 2
    2b4e:	e0 e0       	ldi	r30, 0x00	; 0
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	9b 81       	ldd	r25, Y+3	; 0x03
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	19 f0       	breq	.+6      	; 0x2b60 <free+0xe4>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	f9 cf       	rjmp	.-14     	; 0x2b52 <free+0xd6>
    2b60:	ce 01       	movw	r24, r28
    2b62:	02 96       	adiw	r24, 0x02	; 2
    2b64:	28 81       	ld	r18, Y
    2b66:	39 81       	ldd	r19, Y+1	; 0x01
    2b68:	82 0f       	add	r24, r18
    2b6a:	93 1f       	adc	r25, r19
    2b6c:	20 91 29 0e 	lds	r18, 0x0E29
    2b70:	30 91 2a 0e 	lds	r19, 0x0E2A
    2b74:	28 17       	cp	r18, r24
    2b76:	39 07       	cpc	r19, r25
    2b78:	69 f4       	brne	.+26     	; 0x2b94 <free+0x118>
    2b7a:	30 97       	sbiw	r30, 0x00	; 0
    2b7c:	29 f4       	brne	.+10     	; 0x2b88 <free+0x10c>
    2b7e:	10 92 2c 0e 	sts	0x0E2C, r1
    2b82:	10 92 2b 0e 	sts	0x0E2B, r1
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <free+0x110>
    2b88:	13 82       	std	Z+3, r1	; 0x03
    2b8a:	12 82       	std	Z+2, r1	; 0x02
    2b8c:	d0 93 2a 0e 	sts	0x0E2A, r29
    2b90:	c0 93 29 0e 	sts	0x0E29, r28
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	08 95       	ret

00002b9a <memset>:
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <memset+0x6>
    2b9e:	6d 93       	st	X+, r22
    2ba0:	41 50       	subi	r20, 0x01	; 1
    2ba2:	50 40       	sbci	r21, 0x00	; 0
    2ba4:	e0 f7       	brcc	.-8      	; 0x2b9e <memset+0x4>
    2ba6:	08 95       	ret

00002ba8 <strcat>:
    2ba8:	fb 01       	movw	r30, r22
    2baa:	dc 01       	movw	r26, r24
    2bac:	0d 90       	ld	r0, X+
    2bae:	00 20       	and	r0, r0
    2bb0:	e9 f7       	brne	.-6      	; 0x2bac <strcat+0x4>
    2bb2:	11 97       	sbiw	r26, 0x01	; 1
    2bb4:	01 90       	ld	r0, Z+
    2bb6:	0d 92       	st	X+, r0
    2bb8:	00 20       	and	r0, r0
    2bba:	e1 f7       	brne	.-8      	; 0x2bb4 <strcat+0xc>
    2bbc:	08 95       	ret

00002bbe <strcmp>:
    2bbe:	fb 01       	movw	r30, r22
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	8d 91       	ld	r24, X+
    2bc4:	01 90       	ld	r0, Z+
    2bc6:	80 19       	sub	r24, r0
    2bc8:	01 10       	cpse	r0, r1
    2bca:	d9 f3       	breq	.-10     	; 0x2bc2 <strcmp+0x4>
    2bcc:	99 0b       	sbc	r25, r25
    2bce:	08 95       	ret

00002bd0 <strcpy>:
    2bd0:	fb 01       	movw	r30, r22
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	01 90       	ld	r0, Z+
    2bd6:	0d 92       	st	X+, r0
    2bd8:	00 20       	and	r0, r0
    2bda:	e1 f7       	brne	.-8      	; 0x2bd4 <strcpy+0x4>
    2bdc:	08 95       	ret

00002bde <_exit>:
    2bde:	f8 94       	cli

00002be0 <__stop_program>:
    2be0:	ff cf       	rjmp	.-2      	; 0x2be0 <__stop_program>
